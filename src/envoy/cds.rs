// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ClusterDiscoveryRequest {
    // message fields
    node: ::protobuf::SingularPtrField<super::base::Node>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterDiscoveryRequest {}

impl ClusterDiscoveryRequest {
    pub fn new() -> ClusterDiscoveryRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterDiscoveryRequest {
        static mut instance: ::protobuf::lazy::Lazy<ClusterDiscoveryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterDiscoveryRequest,
        };
        unsafe {
            instance.get(ClusterDiscoveryRequest::new)
        }
    }

    // .envoy.api.v2.Node node = 1;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        };
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| super::base::Node::default_instance())
    }

    fn get_node_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Node> {
        &self.node
    }

    fn mut_node_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Node> {
        &mut self.node
    }
}

impl ::protobuf::Message for ClusterDiscoveryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterDiscoveryRequest {
    fn new() -> ClusterDiscoveryRequest {
        ClusterDiscoveryRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterDiscoveryRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                    "node",
                    ClusterDiscoveryRequest::get_node_for_reflect,
                    ClusterDiscoveryRequest::mut_node_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterDiscoveryRequest>(
                    "ClusterDiscoveryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterDiscoveryRequest {
    fn clear(&mut self) {
        self.clear_node();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterDiscoveryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterDiscoveryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterDiscoveryResponse {
    // message fields
    cluster: ::protobuf::RepeatedField<Cluster>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterDiscoveryResponse {}

impl ClusterDiscoveryResponse {
    pub fn new() -> ClusterDiscoveryResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterDiscoveryResponse {
        static mut instance: ::protobuf::lazy::Lazy<ClusterDiscoveryResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterDiscoveryResponse,
        };
        unsafe {
            instance.get(ClusterDiscoveryResponse::new)
        }
    }

    // repeated .envoy.api.v2.Cluster cluster = 1;

    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::protobuf::RepeatedField<Cluster>) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster(&mut self) -> &mut ::protobuf::RepeatedField<Cluster> {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::protobuf::RepeatedField<Cluster> {
        ::std::mem::replace(&mut self.cluster, ::protobuf::RepeatedField::new())
    }

    pub fn get_cluster(&self) -> &[Cluster] {
        &self.cluster
    }

    fn get_cluster_for_reflect(&self) -> &::protobuf::RepeatedField<Cluster> {
        &self.cluster
    }

    fn mut_cluster_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Cluster> {
        &mut self.cluster
    }
}

impl ::protobuf::Message for ClusterDiscoveryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cluster)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cluster {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cluster {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterDiscoveryResponse {
    fn new() -> ClusterDiscoveryResponse {
        ClusterDiscoveryResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterDiscoveryResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster>>(
                    "cluster",
                    ClusterDiscoveryResponse::get_cluster_for_reflect,
                    ClusterDiscoveryResponse::mut_cluster_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterDiscoveryResponse>(
                    "ClusterDiscoveryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterDiscoveryResponse {
    fn clear(&mut self) {
        self.clear_cluster();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterDiscoveryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterDiscoveryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CircuitBreakers {
    // message fields
    thresholds: ::protobuf::RepeatedField<CircuitBreakers_Thresholds>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for CircuitBreakers {}

impl CircuitBreakers {
    pub fn new() -> CircuitBreakers {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CircuitBreakers {
        static mut instance: ::protobuf::lazy::Lazy<CircuitBreakers> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CircuitBreakers,
        };
        unsafe {
            instance.get(CircuitBreakers::new)
        }
    }

    // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;

    pub fn clear_thresholds(&mut self) {
        self.thresholds.clear();
    }

    // Param is passed by value, moved
    pub fn set_thresholds(&mut self, v: ::protobuf::RepeatedField<CircuitBreakers_Thresholds>) {
        self.thresholds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thresholds(&mut self) -> &mut ::protobuf::RepeatedField<CircuitBreakers_Thresholds> {
        &mut self.thresholds
    }

    // Take field
    pub fn take_thresholds(&mut self) -> ::protobuf::RepeatedField<CircuitBreakers_Thresholds> {
        ::std::mem::replace(&mut self.thresholds, ::protobuf::RepeatedField::new())
    }

    pub fn get_thresholds(&self) -> &[CircuitBreakers_Thresholds] {
        &self.thresholds
    }

    fn get_thresholds_for_reflect(&self) -> &::protobuf::RepeatedField<CircuitBreakers_Thresholds> {
        &self.thresholds
    }

    fn mut_thresholds_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<CircuitBreakers_Thresholds> {
        &mut self.thresholds
    }
}

impl ::protobuf::Message for CircuitBreakers {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.thresholds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.thresholds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.thresholds {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CircuitBreakers {
    fn new() -> CircuitBreakers {
        CircuitBreakers::new()
    }

    fn descriptor_static(_: ::std::option::Option<CircuitBreakers>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CircuitBreakers_Thresholds>>(
                    "thresholds",
                    CircuitBreakers::get_thresholds_for_reflect,
                    CircuitBreakers::mut_thresholds_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CircuitBreakers>(
                    "CircuitBreakers",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CircuitBreakers {
    fn clear(&mut self) {
        self.clear_thresholds();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CircuitBreakers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CircuitBreakers {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CircuitBreakers_Thresholds {
    // message fields
    pub priority: super::base::RoutingPriority,
    max_connections: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    max_pending_requests: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    max_requests: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    max_retries: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for CircuitBreakers_Thresholds {}

impl CircuitBreakers_Thresholds {
    pub fn new() -> CircuitBreakers_Thresholds {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CircuitBreakers_Thresholds {
        static mut instance: ::protobuf::lazy::Lazy<CircuitBreakers_Thresholds> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CircuitBreakers_Thresholds,
        };
        unsafe {
            instance.get(CircuitBreakers_Thresholds::new)
        }
    }

    // .envoy.api.v2.RoutingPriority priority = 1;

    pub fn clear_priority(&mut self) {
        self.priority = super::base::RoutingPriority::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: super::base::RoutingPriority) {
        self.priority = v;
    }

    pub fn get_priority(&self) -> super::base::RoutingPriority {
        self.priority
    }

    fn get_priority_for_reflect(&self) -> &super::base::RoutingPriority {
        &self.priority
    }

    fn mut_priority_for_reflect(&mut self) -> &mut super::base::RoutingPriority {
        &mut self.priority
    }

    // .google.protobuf.UInt32Value max_connections = 2;

    pub fn clear_max_connections(&mut self) {
        self.max_connections.clear();
    }

    pub fn has_max_connections(&self) -> bool {
        self.max_connections.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_connections(&mut self, v: super::wrappers::UInt32Value) {
        self.max_connections = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_connections(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_connections.is_none() {
            self.max_connections.set_default();
        };
        self.max_connections.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_connections(&mut self) -> super::wrappers::UInt32Value {
        self.max_connections.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_connections(&self) -> &super::wrappers::UInt32Value {
        self.max_connections.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_connections_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_connections
    }

    fn mut_max_connections_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_connections
    }

    // .google.protobuf.UInt32Value max_pending_requests = 3;

    pub fn clear_max_pending_requests(&mut self) {
        self.max_pending_requests.clear();
    }

    pub fn has_max_pending_requests(&self) -> bool {
        self.max_pending_requests.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_pending_requests(&mut self, v: super::wrappers::UInt32Value) {
        self.max_pending_requests = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_pending_requests(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_pending_requests.is_none() {
            self.max_pending_requests.set_default();
        };
        self.max_pending_requests.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_pending_requests(&mut self) -> super::wrappers::UInt32Value {
        self.max_pending_requests.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_pending_requests(&self) -> &super::wrappers::UInt32Value {
        self.max_pending_requests.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_pending_requests_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_pending_requests
    }

    fn mut_max_pending_requests_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_pending_requests
    }

    // .google.protobuf.UInt32Value max_requests = 4;

    pub fn clear_max_requests(&mut self) {
        self.max_requests.clear();
    }

    pub fn has_max_requests(&self) -> bool {
        self.max_requests.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_requests(&mut self, v: super::wrappers::UInt32Value) {
        self.max_requests = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_requests(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_requests.is_none() {
            self.max_requests.set_default();
        };
        self.max_requests.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_requests(&mut self) -> super::wrappers::UInt32Value {
        self.max_requests.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_requests(&self) -> &super::wrappers::UInt32Value {
        self.max_requests.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_requests_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_requests
    }

    fn mut_max_requests_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_requests
    }

    // .google.protobuf.UInt32Value max_retries = 5;

    pub fn clear_max_retries(&mut self) {
        self.max_retries.clear();
    }

    pub fn has_max_retries(&self) -> bool {
        self.max_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_retries(&mut self, v: super::wrappers::UInt32Value) {
        self.max_retries = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_retries(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_retries.is_none() {
            self.max_retries.set_default();
        };
        self.max_retries.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_retries(&mut self) -> super::wrappers::UInt32Value {
        self.max_retries.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_retries(&self) -> &super::wrappers::UInt32Value {
        self.max_retries.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_retries_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_retries
    }

    fn mut_max_retries_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_retries
    }
}

impl ::protobuf::Message for CircuitBreakers_Thresholds {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.priority = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_connections)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_pending_requests)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_requests)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_retries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.priority != super::base::RoutingPriority::DEFAULT {
            my_size += ::protobuf::rt::enum_size(1, self.priority);
        };
        if let Some(v) = self.max_connections.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_pending_requests.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_requests.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_retries.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.priority != super::base::RoutingPriority::DEFAULT {
            os.write_enum(1, self.priority.value())?;
        };
        if let Some(v) = self.max_connections.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_pending_requests.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_requests.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_retries.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CircuitBreakers_Thresholds {
    fn new() -> CircuitBreakers_Thresholds {
        CircuitBreakers_Thresholds::new()
    }

    fn descriptor_static(_: ::std::option::Option<CircuitBreakers_Thresholds>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::base::RoutingPriority>>(
                    "priority",
                    CircuitBreakers_Thresholds::get_priority_for_reflect,
                    CircuitBreakers_Thresholds::mut_priority_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_connections",
                    CircuitBreakers_Thresholds::get_max_connections_for_reflect,
                    CircuitBreakers_Thresholds::mut_max_connections_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_pending_requests",
                    CircuitBreakers_Thresholds::get_max_pending_requests_for_reflect,
                    CircuitBreakers_Thresholds::mut_max_pending_requests_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_requests",
                    CircuitBreakers_Thresholds::get_max_requests_for_reflect,
                    CircuitBreakers_Thresholds::mut_max_requests_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_retries",
                    CircuitBreakers_Thresholds::get_max_retries_for_reflect,
                    CircuitBreakers_Thresholds::mut_max_retries_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CircuitBreakers_Thresholds>(
                    "CircuitBreakers_Thresholds",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CircuitBreakers_Thresholds {
    fn clear(&mut self) {
        self.clear_priority();
        self.clear_max_connections();
        self.clear_max_pending_requests();
        self.clear_max_requests();
        self.clear_max_retries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CircuitBreakers_Thresholds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CircuitBreakers_Thresholds {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProtocolOptions {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TcpProtocolOptions {}

impl TcpProtocolOptions {
    pub fn new() -> TcpProtocolOptions {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TcpProtocolOptions {
        static mut instance: ::protobuf::lazy::Lazy<TcpProtocolOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TcpProtocolOptions,
        };
        unsafe {
            instance.get(TcpProtocolOptions::new)
        }
    }
}

impl ::protobuf::Message for TcpProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TcpProtocolOptions {
    fn new() -> TcpProtocolOptions {
        TcpProtocolOptions::new()
    }

    fn descriptor_static(_: ::std::option::Option<TcpProtocolOptions>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TcpProtocolOptions>(
                    "TcpProtocolOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TcpProtocolOptions {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http1ProtocolOptions {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Http1ProtocolOptions {}

impl Http1ProtocolOptions {
    pub fn new() -> Http1ProtocolOptions {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Http1ProtocolOptions {
        static mut instance: ::protobuf::lazy::Lazy<Http1ProtocolOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Http1ProtocolOptions,
        };
        unsafe {
            instance.get(Http1ProtocolOptions::new)
        }
    }
}

impl ::protobuf::Message for Http1ProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Http1ProtocolOptions {
    fn new() -> Http1ProtocolOptions {
        Http1ProtocolOptions::new()
    }

    fn descriptor_static(_: ::std::option::Option<Http1ProtocolOptions>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Http1ProtocolOptions>(
                    "Http1ProtocolOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Http1ProtocolOptions {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http1ProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http1ProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http2ProtocolOptions {
    // message fields
    pub disable_dynamic_table: bool,
    per_stream_buffer_limit_bytes: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    max_concurrent_streams: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    initial_window_size: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Http2ProtocolOptions {}

impl Http2ProtocolOptions {
    pub fn new() -> Http2ProtocolOptions {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Http2ProtocolOptions {
        static mut instance: ::protobuf::lazy::Lazy<Http2ProtocolOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Http2ProtocolOptions,
        };
        unsafe {
            instance.get(Http2ProtocolOptions::new)
        }
    }

    // bool disable_dynamic_table = 1;

    pub fn clear_disable_dynamic_table(&mut self) {
        self.disable_dynamic_table = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_dynamic_table(&mut self, v: bool) {
        self.disable_dynamic_table = v;
    }

    pub fn get_disable_dynamic_table(&self) -> bool {
        self.disable_dynamic_table
    }

    fn get_disable_dynamic_table_for_reflect(&self) -> &bool {
        &self.disable_dynamic_table
    }

    fn mut_disable_dynamic_table_for_reflect(&mut self) -> &mut bool {
        &mut self.disable_dynamic_table
    }

    // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;

    pub fn clear_per_stream_buffer_limit_bytes(&mut self) {
        self.per_stream_buffer_limit_bytes.clear();
    }

    pub fn has_per_stream_buffer_limit_bytes(&self) -> bool {
        self.per_stream_buffer_limit_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_stream_buffer_limit_bytes(&mut self, v: super::wrappers::UInt32Value) {
        self.per_stream_buffer_limit_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_stream_buffer_limit_bytes(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.per_stream_buffer_limit_bytes.is_none() {
            self.per_stream_buffer_limit_bytes.set_default();
        };
        self.per_stream_buffer_limit_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_stream_buffer_limit_bytes(&mut self) -> super::wrappers::UInt32Value {
        self.per_stream_buffer_limit_bytes.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_per_stream_buffer_limit_bytes(&self) -> &super::wrappers::UInt32Value {
        self.per_stream_buffer_limit_bytes.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_per_stream_buffer_limit_bytes_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.per_stream_buffer_limit_bytes
    }

    fn mut_per_stream_buffer_limit_bytes_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.per_stream_buffer_limit_bytes
    }

    // .google.protobuf.UInt32Value max_concurrent_streams = 3;

    pub fn clear_max_concurrent_streams(&mut self) {
        self.max_concurrent_streams.clear();
    }

    pub fn has_max_concurrent_streams(&self) -> bool {
        self.max_concurrent_streams.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_concurrent_streams(&mut self, v: super::wrappers::UInt32Value) {
        self.max_concurrent_streams = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_concurrent_streams(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_concurrent_streams.is_none() {
            self.max_concurrent_streams.set_default();
        };
        self.max_concurrent_streams.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_concurrent_streams(&mut self) -> super::wrappers::UInt32Value {
        self.max_concurrent_streams.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_concurrent_streams(&self) -> &super::wrappers::UInt32Value {
        self.max_concurrent_streams.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_concurrent_streams_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_concurrent_streams
    }

    fn mut_max_concurrent_streams_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_concurrent_streams
    }

    // .google.protobuf.UInt32Value initial_window_size = 4;

    pub fn clear_initial_window_size(&mut self) {
        self.initial_window_size.clear();
    }

    pub fn has_initial_window_size(&self) -> bool {
        self.initial_window_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_window_size(&mut self, v: super::wrappers::UInt32Value) {
        self.initial_window_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_window_size(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.initial_window_size.is_none() {
            self.initial_window_size.set_default();
        };
        self.initial_window_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_window_size(&mut self) -> super::wrappers::UInt32Value {
        self.initial_window_size.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_initial_window_size(&self) -> &super::wrappers::UInt32Value {
        self.initial_window_size.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_initial_window_size_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.initial_window_size
    }

    fn mut_initial_window_size_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.initial_window_size
    }
}

impl ::protobuf::Message for Http2ProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.disable_dynamic_table = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_stream_buffer_limit_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_concurrent_streams)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_window_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.disable_dynamic_table != false {
            my_size += 2;
        };
        if let Some(v) = self.per_stream_buffer_limit_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_concurrent_streams.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.initial_window_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.disable_dynamic_table != false {
            os.write_bool(1, self.disable_dynamic_table)?;
        };
        if let Some(v) = self.per_stream_buffer_limit_bytes.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_concurrent_streams.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.initial_window_size.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Http2ProtocolOptions {
    fn new() -> Http2ProtocolOptions {
        Http2ProtocolOptions::new()
    }

    fn descriptor_static(_: ::std::option::Option<Http2ProtocolOptions>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disable_dynamic_table",
                    Http2ProtocolOptions::get_disable_dynamic_table_for_reflect,
                    Http2ProtocolOptions::mut_disable_dynamic_table_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "per_stream_buffer_limit_bytes",
                    Http2ProtocolOptions::get_per_stream_buffer_limit_bytes_for_reflect,
                    Http2ProtocolOptions::mut_per_stream_buffer_limit_bytes_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_concurrent_streams",
                    Http2ProtocolOptions::get_max_concurrent_streams_for_reflect,
                    Http2ProtocolOptions::mut_max_concurrent_streams_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "initial_window_size",
                    Http2ProtocolOptions::get_initial_window_size_for_reflect,
                    Http2ProtocolOptions::mut_initial_window_size_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Http2ProtocolOptions>(
                    "Http2ProtocolOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Http2ProtocolOptions {
    fn clear(&mut self) {
        self.clear_disable_dynamic_table();
        self.clear_per_stream_buffer_limit_bytes();
        self.clear_max_concurrent_streams();
        self.clear_initial_window_size();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http2ProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http2ProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcProtocolOptions {
    // message fields
    http2_protocol_options: ::protobuf::SingularPtrField<Http2ProtocolOptions>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for GrpcProtocolOptions {}

impl GrpcProtocolOptions {
    pub fn new() -> GrpcProtocolOptions {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static GrpcProtocolOptions {
        static mut instance: ::protobuf::lazy::Lazy<GrpcProtocolOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrpcProtocolOptions,
        };
        unsafe {
            instance.get(GrpcProtocolOptions::new)
        }
    }

    // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;

    pub fn clear_http2_protocol_options(&mut self) {
        self.http2_protocol_options.clear();
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        self.http2_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: Http2ProtocolOptions) {
        self.http2_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http2_protocol_options(&mut self) -> &mut Http2ProtocolOptions {
        if self.http2_protocol_options.is_none() {
            self.http2_protocol_options.set_default();
        };
        self.http2_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> Http2ProtocolOptions {
        self.http2_protocol_options.take().unwrap_or_else(|| Http2ProtocolOptions::new())
    }

    pub fn get_http2_protocol_options(&self) -> &Http2ProtocolOptions {
        self.http2_protocol_options.as_ref().unwrap_or_else(|| Http2ProtocolOptions::default_instance())
    }

    fn get_http2_protocol_options_for_reflect(&self) -> &::protobuf::SingularPtrField<Http2ProtocolOptions> {
        &self.http2_protocol_options
    }

    fn mut_http2_protocol_options_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<Http2ProtocolOptions> {
        &mut self.http2_protocol_options
    }
}

impl ::protobuf::Message for GrpcProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http2_protocol_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.http2_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.http2_protocol_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for GrpcProtocolOptions {
    fn new() -> GrpcProtocolOptions {
        GrpcProtocolOptions::new()
    }

    fn descriptor_static(_: ::std::option::Option<GrpcProtocolOptions>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Http2ProtocolOptions>>(
                    "http2_protocol_options",
                    GrpcProtocolOptions::get_http2_protocol_options_for_reflect,
                    GrpcProtocolOptions::mut_http2_protocol_options_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GrpcProtocolOptions>(
                    "GrpcProtocolOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for GrpcProtocolOptions {
    fn clear(&mut self) {
        self.clear_http2_protocol_options();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster {
    // message fields
    pub name: ::std::string::String,
    pub field_type: Cluster_DiscoveryType,
    connect_timeout: ::protobuf::SingularPtrField<super::duration::Duration>,
    per_connection_buffer_limit_bytes: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    pub lb_policy: Cluster_LbPolicy,
    health_checks: ::protobuf::RepeatedField<super::health_check::HealthCheck>,
    max_requests_per_connection: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    circuit_breakers: ::protobuf::SingularPtrField<CircuitBreakers>,
    tls_context: ::protobuf::SingularPtrField<super::tls_context::UpstreamTlsContext>,
    dns_refresh_rate: ::protobuf::SingularPtrField<super::duration::Duration>,
    outlier_detection: ::protobuf::SingularPtrField<Cluster_OutlierDetection>,
    // message oneof groups
    hosts_specifier: ::std::option::Option<Cluster_oneof_hosts_specifier>,
    protocol_options: ::std::option::Option<Cluster_oneof_protocol_options>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Cluster {}

#[derive(Clone,PartialEq)]
pub enum Cluster_oneof_hosts_specifier {
    static_hosts(super::address::ResolvedAddresses),
    dns_hosts(super::address::UnresolvedAddress),
}

#[derive(Clone,PartialEq)]
pub enum Cluster_oneof_protocol_options {
    tcp_protocol_options(TcpProtocolOptions),
    http_protocol_options(Http1ProtocolOptions),
    http2_protocol_options(Http2ProtocolOptions),
    grpc_protocol_options(GrpcProtocolOptions),
}

impl Cluster {
    pub fn new() -> Cluster {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Cluster {
        static mut instance: ::protobuf::lazy::Lazy<Cluster> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cluster,
        };
        unsafe {
            instance.get(Cluster::new)
        }
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    fn get_name_for_reflect(&self) -> &::std::string::String {
        &self.name
    }

    fn mut_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // .envoy.api.v2.Cluster.DiscoveryType type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type = Cluster_DiscoveryType::STATIC;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Cluster_DiscoveryType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> Cluster_DiscoveryType {
        self.field_type
    }

    fn get_field_type_for_reflect(&self) -> &Cluster_DiscoveryType {
        &self.field_type
    }

    fn mut_field_type_for_reflect(&mut self) -> &mut Cluster_DiscoveryType {
        &mut self.field_type
    }

    // .google.protobuf.Duration connect_timeout = 3;

    pub fn clear_connect_timeout(&mut self) {
        self.connect_timeout.clear();
    }

    pub fn has_connect_timeout(&self) -> bool {
        self.connect_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_timeout(&mut self, v: super::duration::Duration) {
        self.connect_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_timeout(&mut self) -> &mut super::duration::Duration {
        if self.connect_timeout.is_none() {
            self.connect_timeout.set_default();
        };
        self.connect_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_timeout(&mut self) -> super::duration::Duration {
        self.connect_timeout.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_connect_timeout(&self) -> &super::duration::Duration {
        self.connect_timeout.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_connect_timeout_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.connect_timeout
    }

    fn mut_connect_timeout_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.connect_timeout
    }

    // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;

    pub fn clear_per_connection_buffer_limit_bytes(&mut self) {
        self.per_connection_buffer_limit_bytes.clear();
    }

    pub fn has_per_connection_buffer_limit_bytes(&self) -> bool {
        self.per_connection_buffer_limit_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_connection_buffer_limit_bytes(&mut self, v: super::wrappers::UInt32Value) {
        self.per_connection_buffer_limit_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_connection_buffer_limit_bytes(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.per_connection_buffer_limit_bytes.is_none() {
            self.per_connection_buffer_limit_bytes.set_default();
        };
        self.per_connection_buffer_limit_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_connection_buffer_limit_bytes(&mut self) -> super::wrappers::UInt32Value {
        self.per_connection_buffer_limit_bytes.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_per_connection_buffer_limit_bytes(&self) -> &super::wrappers::UInt32Value {
        self.per_connection_buffer_limit_bytes.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_per_connection_buffer_limit_bytes_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.per_connection_buffer_limit_bytes
    }

    fn mut_per_connection_buffer_limit_bytes_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.per_connection_buffer_limit_bytes
    }

    // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;

    pub fn clear_lb_policy(&mut self) {
        self.lb_policy = Cluster_LbPolicy::ROUND_ROBIN;
    }

    // Param is passed by value, moved
    pub fn set_lb_policy(&mut self, v: Cluster_LbPolicy) {
        self.lb_policy = v;
    }

    pub fn get_lb_policy(&self) -> Cluster_LbPolicy {
        self.lb_policy
    }

    fn get_lb_policy_for_reflect(&self) -> &Cluster_LbPolicy {
        &self.lb_policy
    }

    fn mut_lb_policy_for_reflect(&mut self) -> &mut Cluster_LbPolicy {
        &mut self.lb_policy
    }

    // .envoy.api.v2.ResolvedAddresses static_hosts = 6;

    pub fn clear_static_hosts(&mut self) {
        self.hosts_specifier = ::std::option::Option::None;
    }

    pub fn has_static_hosts(&self) -> bool {
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_static_hosts(&mut self, v: super::address::ResolvedAddresses) {
        self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(v))
    }

    // Mutable pointer to the field.
    pub fn mut_static_hosts(&mut self) -> &mut super::address::ResolvedAddresses {
        if let ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(_)) = self.hosts_specifier {
        } else {
            self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(super::address::ResolvedAddresses::new()));
        }
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_static_hosts(&mut self) -> super::address::ResolvedAddresses {
        if self.has_static_hosts() {
            match self.hosts_specifier.take() {
                ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(v)) => v,
                _ => panic!(),
            }
        } else {
            super::address::ResolvedAddresses::new()
        }
    }

    pub fn get_static_hosts(&self) -> &super::address::ResolvedAddresses {
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(ref v)) => v,
            _ => super::address::ResolvedAddresses::default_instance(),
        }
    }

    // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;

    pub fn clear_dns_hosts(&mut self) {
        self.hosts_specifier = ::std::option::Option::None;
    }

    pub fn has_dns_hosts(&self) -> bool {
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dns_hosts(&mut self, v: super::address::UnresolvedAddress) {
        self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dns_hosts(&mut self) -> &mut super::address::UnresolvedAddress {
        if let ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(_)) = self.hosts_specifier {
        } else {
            self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(super::address::UnresolvedAddress::new()));
        }
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dns_hosts(&mut self) -> super::address::UnresolvedAddress {
        if self.has_dns_hosts() {
            match self.hosts_specifier.take() {
                ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(v)) => v,
                _ => panic!(),
            }
        } else {
            super::address::UnresolvedAddress::new()
        }
    }

    pub fn get_dns_hosts(&self) -> &super::address::UnresolvedAddress {
        match self.hosts_specifier {
            ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(ref v)) => v,
            _ => super::address::UnresolvedAddress::default_instance(),
        }
    }

    // repeated .envoy.api.v2.HealthCheck health_checks = 8;

    pub fn clear_health_checks(&mut self) {
        self.health_checks.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_checks(&mut self, v: ::protobuf::RepeatedField<super::health_check::HealthCheck>) {
        self.health_checks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_checks(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // Take field
    pub fn take_health_checks(&mut self) -> ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        ::std::mem::replace(&mut self.health_checks, ::protobuf::RepeatedField::new())
    }

    pub fn get_health_checks(&self) -> &[super::health_check::HealthCheck] {
        &self.health_checks
    }

    fn get_health_checks_for_reflect(&self) -> &::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &self.health_checks
    }

    fn mut_health_checks_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // .google.protobuf.UInt32Value max_requests_per_connection = 9;

    pub fn clear_max_requests_per_connection(&mut self) {
        self.max_requests_per_connection.clear();
    }

    pub fn has_max_requests_per_connection(&self) -> bool {
        self.max_requests_per_connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_requests_per_connection(&mut self, v: super::wrappers::UInt32Value) {
        self.max_requests_per_connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_requests_per_connection(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_requests_per_connection.is_none() {
            self.max_requests_per_connection.set_default();
        };
        self.max_requests_per_connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_requests_per_connection(&mut self) -> super::wrappers::UInt32Value {
        self.max_requests_per_connection.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_requests_per_connection(&self) -> &super::wrappers::UInt32Value {
        self.max_requests_per_connection.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_requests_per_connection_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_requests_per_connection
    }

    fn mut_max_requests_per_connection_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_requests_per_connection
    }

    // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;

    pub fn clear_circuit_breakers(&mut self) {
        self.circuit_breakers.clear();
    }

    pub fn has_circuit_breakers(&self) -> bool {
        self.circuit_breakers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_circuit_breakers(&mut self, v: CircuitBreakers) {
        self.circuit_breakers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_circuit_breakers(&mut self) -> &mut CircuitBreakers {
        if self.circuit_breakers.is_none() {
            self.circuit_breakers.set_default();
        };
        self.circuit_breakers.as_mut().unwrap()
    }

    // Take field
    pub fn take_circuit_breakers(&mut self) -> CircuitBreakers {
        self.circuit_breakers.take().unwrap_or_else(|| CircuitBreakers::new())
    }

    pub fn get_circuit_breakers(&self) -> &CircuitBreakers {
        self.circuit_breakers.as_ref().unwrap_or_else(|| CircuitBreakers::default_instance())
    }

    fn get_circuit_breakers_for_reflect(&self) -> &::protobuf::SingularPtrField<CircuitBreakers> {
        &self.circuit_breakers
    }

    fn mut_circuit_breakers_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<CircuitBreakers> {
        &mut self.circuit_breakers
    }

    // .envoy.api.v2.UpstreamTlsContext tls_context = 11;

    pub fn clear_tls_context(&mut self) {
        self.tls_context.clear();
    }

    pub fn has_tls_context(&self) -> bool {
        self.tls_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_context(&mut self, v: super::tls_context::UpstreamTlsContext) {
        self.tls_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_context(&mut self) -> &mut super::tls_context::UpstreamTlsContext {
        if self.tls_context.is_none() {
            self.tls_context.set_default();
        };
        self.tls_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_context(&mut self) -> super::tls_context::UpstreamTlsContext {
        self.tls_context.take().unwrap_or_else(|| super::tls_context::UpstreamTlsContext::new())
    }

    pub fn get_tls_context(&self) -> &super::tls_context::UpstreamTlsContext {
        self.tls_context.as_ref().unwrap_or_else(|| super::tls_context::UpstreamTlsContext::default_instance())
    }

    fn get_tls_context_for_reflect(&self) -> &::protobuf::SingularPtrField<super::tls_context::UpstreamTlsContext> {
        &self.tls_context
    }

    fn mut_tls_context_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::tls_context::UpstreamTlsContext> {
        &mut self.tls_context
    }

    // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;

    pub fn clear_tcp_protocol_options(&mut self) {
        self.protocol_options = ::std::option::Option::None;
    }

    pub fn has_tcp_protocol_options(&self) -> bool {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp_protocol_options(&mut self, v: TcpProtocolOptions) {
        self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_protocol_options(&mut self) -> &mut TcpProtocolOptions {
        if let ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(_)) = self.protocol_options {
        } else {
            self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(TcpProtocolOptions::new()));
        }
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp_protocol_options(&mut self) -> TcpProtocolOptions {
        if self.has_tcp_protocol_options() {
            match self.protocol_options.take() {
                ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            TcpProtocolOptions::new()
        }
    }

    pub fn get_tcp_protocol_options(&self) -> &TcpProtocolOptions {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(ref v)) => v,
            _ => TcpProtocolOptions::default_instance(),
        }
    }

    // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;

    pub fn clear_http_protocol_options(&mut self) {
        self.protocol_options = ::std::option::Option::None;
    }

    pub fn has_http_protocol_options(&self) -> bool {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_protocol_options(&mut self, v: Http1ProtocolOptions) {
        self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_protocol_options(&mut self) -> &mut Http1ProtocolOptions {
        if let ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(_)) = self.protocol_options {
        } else {
            self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(Http1ProtocolOptions::new()));
        }
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_protocol_options(&mut self) -> Http1ProtocolOptions {
        if self.has_http_protocol_options() {
            match self.protocol_options.take() {
                ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            Http1ProtocolOptions::new()
        }
    }

    pub fn get_http_protocol_options(&self) -> &Http1ProtocolOptions {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(ref v)) => v,
            _ => Http1ProtocolOptions::default_instance(),
        }
    }

    // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;

    pub fn clear_http2_protocol_options(&mut self) {
        self.protocol_options = ::std::option::Option::None;
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: Http2ProtocolOptions) {
        self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http2_protocol_options(&mut self) -> &mut Http2ProtocolOptions {
        if let ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(_)) = self.protocol_options {
        } else {
            self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(Http2ProtocolOptions::new()));
        }
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> Http2ProtocolOptions {
        if self.has_http2_protocol_options() {
            match self.protocol_options.take() {
                ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            Http2ProtocolOptions::new()
        }
    }

    pub fn get_http2_protocol_options(&self) -> &Http2ProtocolOptions {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(ref v)) => v,
            _ => Http2ProtocolOptions::default_instance(),
        }
    }

    // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;

    pub fn clear_grpc_protocol_options(&mut self) {
        self.protocol_options = ::std::option::Option::None;
    }

    pub fn has_grpc_protocol_options(&self) -> bool {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_grpc_protocol_options(&mut self, v: GrpcProtocolOptions) {
        self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_protocol_options(&mut self) -> &mut GrpcProtocolOptions {
        if let ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(_)) = self.protocol_options {
        } else {
            self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(GrpcProtocolOptions::new()));
        }
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_grpc_protocol_options(&mut self) -> GrpcProtocolOptions {
        if self.has_grpc_protocol_options() {
            match self.protocol_options.take() {
                ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcProtocolOptions::new()
        }
    }

    pub fn get_grpc_protocol_options(&self) -> &GrpcProtocolOptions {
        match self.protocol_options {
            ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(ref v)) => v,
            _ => GrpcProtocolOptions::default_instance(),
        }
    }

    // .google.protobuf.Duration dns_refresh_rate = 16;

    pub fn clear_dns_refresh_rate(&mut self) {
        self.dns_refresh_rate.clear();
    }

    pub fn has_dns_refresh_rate(&self) -> bool {
        self.dns_refresh_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_refresh_rate(&mut self, v: super::duration::Duration) {
        self.dns_refresh_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_refresh_rate(&mut self) -> &mut super::duration::Duration {
        if self.dns_refresh_rate.is_none() {
            self.dns_refresh_rate.set_default();
        };
        self.dns_refresh_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_refresh_rate(&mut self) -> super::duration::Duration {
        self.dns_refresh_rate.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_dns_refresh_rate(&self) -> &super::duration::Duration {
        self.dns_refresh_rate.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_dns_refresh_rate_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.dns_refresh_rate
    }

    fn mut_dns_refresh_rate_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.dns_refresh_rate
    }

    // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;

    pub fn clear_outlier_detection(&mut self) {
        self.outlier_detection.clear();
    }

    pub fn has_outlier_detection(&self) -> bool {
        self.outlier_detection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outlier_detection(&mut self, v: Cluster_OutlierDetection) {
        self.outlier_detection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outlier_detection(&mut self) -> &mut Cluster_OutlierDetection {
        if self.outlier_detection.is_none() {
            self.outlier_detection.set_default();
        };
        self.outlier_detection.as_mut().unwrap()
    }

    // Take field
    pub fn take_outlier_detection(&mut self) -> Cluster_OutlierDetection {
        self.outlier_detection.take().unwrap_or_else(|| Cluster_OutlierDetection::new())
    }

    pub fn get_outlier_detection(&self) -> &Cluster_OutlierDetection {
        self.outlier_detection.as_ref().unwrap_or_else(|| Cluster_OutlierDetection::default_instance())
    }

    fn get_outlier_detection_for_reflect(&self) -> &::protobuf::SingularPtrField<Cluster_OutlierDetection> {
        &self.outlier_detection
    }

    fn mut_outlier_detection_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<Cluster_OutlierDetection> {
        &mut self.outlier_detection
    }
}

impl ::protobuf::Message for Cluster {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.field_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connect_timeout)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_connection_buffer_limit_bytes)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.lb_policy = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::static_hosts(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.hosts_specifier = ::std::option::Option::Some(Cluster_oneof_hosts_specifier::dns_hosts(is.read_message()?));
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.health_checks)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_requests_per_connection)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.circuit_breakers)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_context)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::tcp_protocol_options(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http_protocol_options(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::http2_protocol_options(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.protocol_options = ::std::option::Option::Some(Cluster_oneof_protocol_options::grpc_protocol_options(is.read_message()?));
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_refresh_rate)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.outlier_detection)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        };
        if self.field_type != Cluster_DiscoveryType::STATIC {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        };
        if let Some(v) = self.connect_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.per_connection_buffer_limit_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.lb_policy != Cluster_LbPolicy::ROUND_ROBIN {
            my_size += ::protobuf::rt::enum_size(5, self.lb_policy);
        };
        for value in &self.health_checks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_requests_per_connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.circuit_breakers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.tls_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.dns_refresh_rate.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.outlier_detection.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.hosts_specifier {
            match v {
                &Cluster_oneof_hosts_specifier::static_hosts(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_hosts_specifier::dns_hosts(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        if let ::std::option::Option::Some(ref v) = self.protocol_options {
            match v {
                &Cluster_oneof_protocol_options::tcp_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_protocol_options::http_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_protocol_options::http2_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_protocol_options::grpc_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        };
        if self.field_type != Cluster_DiscoveryType::STATIC {
            os.write_enum(2, self.field_type.value())?;
        };
        if let Some(v) = self.connect_timeout.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.per_connection_buffer_limit_bytes.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.lb_policy != Cluster_LbPolicy::ROUND_ROBIN {
            os.write_enum(5, self.lb_policy.value())?;
        };
        for v in &self.health_checks {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_requests_per_connection.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.circuit_breakers.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.tls_context.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.dns_refresh_rate.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.outlier_detection.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.hosts_specifier {
            match v {
                &Cluster_oneof_hosts_specifier::static_hosts(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_hosts_specifier::dns_hosts(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        if let ::std::option::Option::Some(ref v) = self.protocol_options {
            match v {
                &Cluster_oneof_protocol_options::tcp_protocol_options(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_protocol_options::http_protocol_options(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_protocol_options::http2_protocol_options(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_protocol_options::grpc_protocol_options(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Cluster {
    fn new() -> Cluster {
        Cluster::new()
    }

    fn descriptor_static(_: ::std::option::Option<Cluster>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    Cluster::get_name_for_reflect,
                    Cluster::mut_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_DiscoveryType>>(
                    "type",
                    Cluster::get_field_type_for_reflect,
                    Cluster::mut_field_type_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "connect_timeout",
                    Cluster::get_connect_timeout_for_reflect,
                    Cluster::mut_connect_timeout_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "per_connection_buffer_limit_bytes",
                    Cluster::get_per_connection_buffer_limit_bytes_for_reflect,
                    Cluster::mut_per_connection_buffer_limit_bytes_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_LbPolicy>>(
                    "lb_policy",
                    Cluster::get_lb_policy_for_reflect,
                    Cluster::mut_lb_policy_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::address::ResolvedAddresses>(
                    "static_hosts",
                    Cluster::has_static_hosts,
                    Cluster::get_static_hosts,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::address::UnresolvedAddress>(
                    "dns_hosts",
                    Cluster::has_dns_hosts,
                    Cluster::get_dns_hosts,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::health_check::HealthCheck>>(
                    "health_checks",
                    Cluster::get_health_checks_for_reflect,
                    Cluster::mut_health_checks_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_requests_per_connection",
                    Cluster::get_max_requests_per_connection_for_reflect,
                    Cluster::mut_max_requests_per_connection_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CircuitBreakers>>(
                    "circuit_breakers",
                    Cluster::get_circuit_breakers_for_reflect,
                    Cluster::mut_circuit_breakers_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tls_context::UpstreamTlsContext>>(
                    "tls_context",
                    Cluster::get_tls_context_for_reflect,
                    Cluster::mut_tls_context_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TcpProtocolOptions>(
                    "tcp_protocol_options",
                    Cluster::has_tcp_protocol_options,
                    Cluster::get_tcp_protocol_options,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Http1ProtocolOptions>(
                    "http_protocol_options",
                    Cluster::has_http_protocol_options,
                    Cluster::get_http_protocol_options,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Http2ProtocolOptions>(
                    "http2_protocol_options",
                    Cluster::has_http2_protocol_options,
                    Cluster::get_http2_protocol_options,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcProtocolOptions>(
                    "grpc_protocol_options",
                    Cluster::has_grpc_protocol_options,
                    Cluster::get_grpc_protocol_options,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "dns_refresh_rate",
                    Cluster::get_dns_refresh_rate_for_reflect,
                    Cluster::mut_dns_refresh_rate_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_OutlierDetection>>(
                    "outlier_detection",
                    Cluster::get_outlier_detection_for_reflect,
                    Cluster::mut_outlier_detection_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cluster>(
                    "Cluster",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Cluster {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_field_type();
        self.clear_connect_timeout();
        self.clear_per_connection_buffer_limit_bytes();
        self.clear_lb_policy();
        self.clear_static_hosts();
        self.clear_dns_hosts();
        self.clear_health_checks();
        self.clear_max_requests_per_connection();
        self.clear_circuit_breakers();
        self.clear_tls_context();
        self.clear_tcp_protocol_options();
        self.clear_http_protocol_options();
        self.clear_http2_protocol_options();
        self.clear_grpc_protocol_options();
        self.clear_dns_refresh_rate();
        self.clear_outlier_detection();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_OutlierDetection {
    // message fields
    consecutive_5xx: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    interval: ::protobuf::SingularPtrField<super::duration::Duration>,
    base_ejection_time: ::protobuf::SingularPtrField<super::duration::Duration>,
    max_ejection_percent: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    enforcing_consecutive_5xx: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    enforcing_success_rate: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    success_rate_minimum_hosts: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    success_rate_request_volume: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    success_rate_stdev_factor: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Cluster_OutlierDetection {}

impl Cluster_OutlierDetection {
    pub fn new() -> Cluster_OutlierDetection {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Cluster_OutlierDetection {
        static mut instance: ::protobuf::lazy::Lazy<Cluster_OutlierDetection> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cluster_OutlierDetection,
        };
        unsafe {
            instance.get(Cluster_OutlierDetection::new)
        }
    }

    // .google.protobuf.UInt32Value consecutive_5xx = 1;

    pub fn clear_consecutive_5xx(&mut self) {
        self.consecutive_5xx.clear();
    }

    pub fn has_consecutive_5xx(&self) -> bool {
        self.consecutive_5xx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consecutive_5xx(&mut self, v: super::wrappers::UInt32Value) {
        self.consecutive_5xx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consecutive_5xx(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.consecutive_5xx.is_none() {
            self.consecutive_5xx.set_default();
        };
        self.consecutive_5xx.as_mut().unwrap()
    }

    // Take field
    pub fn take_consecutive_5xx(&mut self) -> super::wrappers::UInt32Value {
        self.consecutive_5xx.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_consecutive_5xx(&self) -> &super::wrappers::UInt32Value {
        self.consecutive_5xx.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_consecutive_5xx_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.consecutive_5xx
    }

    fn mut_consecutive_5xx_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.consecutive_5xx
    }

    // .google.protobuf.Duration interval = 2;

    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: super::duration::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut super::duration::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        };
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> super::duration::Duration {
        self.interval.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_interval(&self) -> &super::duration::Duration {
        self.interval.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_interval_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.interval
    }

    fn mut_interval_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.interval
    }

    // .google.protobuf.Duration base_ejection_time = 3;

    pub fn clear_base_ejection_time(&mut self) {
        self.base_ejection_time.clear();
    }

    pub fn has_base_ejection_time(&self) -> bool {
        self.base_ejection_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_ejection_time(&mut self, v: super::duration::Duration) {
        self.base_ejection_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_ejection_time(&mut self) -> &mut super::duration::Duration {
        if self.base_ejection_time.is_none() {
            self.base_ejection_time.set_default();
        };
        self.base_ejection_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_ejection_time(&mut self) -> super::duration::Duration {
        self.base_ejection_time.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_base_ejection_time(&self) -> &super::duration::Duration {
        self.base_ejection_time.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_base_ejection_time_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.base_ejection_time
    }

    fn mut_base_ejection_time_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.base_ejection_time
    }

    // .google.protobuf.UInt32Value max_ejection_percent = 4;

    pub fn clear_max_ejection_percent(&mut self) {
        self.max_ejection_percent.clear();
    }

    pub fn has_max_ejection_percent(&self) -> bool {
        self.max_ejection_percent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_ejection_percent(&mut self, v: super::wrappers::UInt32Value) {
        self.max_ejection_percent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_ejection_percent(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.max_ejection_percent.is_none() {
            self.max_ejection_percent.set_default();
        };
        self.max_ejection_percent.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_ejection_percent(&mut self) -> super::wrappers::UInt32Value {
        self.max_ejection_percent.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_max_ejection_percent(&self) -> &super::wrappers::UInt32Value {
        self.max_ejection_percent.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_max_ejection_percent_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.max_ejection_percent
    }

    fn mut_max_ejection_percent_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.max_ejection_percent
    }

    // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;

    pub fn clear_enforcing_consecutive_5xx(&mut self) {
        self.enforcing_consecutive_5xx.clear();
    }

    pub fn has_enforcing_consecutive_5xx(&self) -> bool {
        self.enforcing_consecutive_5xx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_consecutive_5xx(&mut self, v: super::wrappers::UInt32Value) {
        self.enforcing_consecutive_5xx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_consecutive_5xx(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.enforcing_consecutive_5xx.is_none() {
            self.enforcing_consecutive_5xx.set_default();
        };
        self.enforcing_consecutive_5xx.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_consecutive_5xx(&mut self) -> super::wrappers::UInt32Value {
        self.enforcing_consecutive_5xx.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_enforcing_consecutive_5xx(&self) -> &super::wrappers::UInt32Value {
        self.enforcing_consecutive_5xx.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_enforcing_consecutive_5xx_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.enforcing_consecutive_5xx
    }

    fn mut_enforcing_consecutive_5xx_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.enforcing_consecutive_5xx
    }

    // .google.protobuf.UInt32Value enforcing_success_rate = 6;

    pub fn clear_enforcing_success_rate(&mut self) {
        self.enforcing_success_rate.clear();
    }

    pub fn has_enforcing_success_rate(&self) -> bool {
        self.enforcing_success_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_success_rate(&mut self, v: super::wrappers::UInt32Value) {
        self.enforcing_success_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_success_rate(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.enforcing_success_rate.is_none() {
            self.enforcing_success_rate.set_default();
        };
        self.enforcing_success_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_success_rate(&mut self) -> super::wrappers::UInt32Value {
        self.enforcing_success_rate.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_enforcing_success_rate(&self) -> &super::wrappers::UInt32Value {
        self.enforcing_success_rate.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_enforcing_success_rate_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.enforcing_success_rate
    }

    fn mut_enforcing_success_rate_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.enforcing_success_rate
    }

    // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;

    pub fn clear_success_rate_minimum_hosts(&mut self) {
        self.success_rate_minimum_hosts.clear();
    }

    pub fn has_success_rate_minimum_hosts(&self) -> bool {
        self.success_rate_minimum_hosts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_minimum_hosts(&mut self, v: super::wrappers::UInt32Value) {
        self.success_rate_minimum_hosts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_minimum_hosts(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.success_rate_minimum_hosts.is_none() {
            self.success_rate_minimum_hosts.set_default();
        };
        self.success_rate_minimum_hosts.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_minimum_hosts(&mut self) -> super::wrappers::UInt32Value {
        self.success_rate_minimum_hosts.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_success_rate_minimum_hosts(&self) -> &super::wrappers::UInt32Value {
        self.success_rate_minimum_hosts.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_success_rate_minimum_hosts_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.success_rate_minimum_hosts
    }

    fn mut_success_rate_minimum_hosts_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.success_rate_minimum_hosts
    }

    // .google.protobuf.UInt32Value success_rate_request_volume = 8;

    pub fn clear_success_rate_request_volume(&mut self) {
        self.success_rate_request_volume.clear();
    }

    pub fn has_success_rate_request_volume(&self) -> bool {
        self.success_rate_request_volume.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_request_volume(&mut self, v: super::wrappers::UInt32Value) {
        self.success_rate_request_volume = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_request_volume(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.success_rate_request_volume.is_none() {
            self.success_rate_request_volume.set_default();
        };
        self.success_rate_request_volume.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_request_volume(&mut self) -> super::wrappers::UInt32Value {
        self.success_rate_request_volume.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_success_rate_request_volume(&self) -> &super::wrappers::UInt32Value {
        self.success_rate_request_volume.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_success_rate_request_volume_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.success_rate_request_volume
    }

    fn mut_success_rate_request_volume_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.success_rate_request_volume
    }

    // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;

    pub fn clear_success_rate_stdev_factor(&mut self) {
        self.success_rate_stdev_factor.clear();
    }

    pub fn has_success_rate_stdev_factor(&self) -> bool {
        self.success_rate_stdev_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_stdev_factor(&mut self, v: super::wrappers::UInt32Value) {
        self.success_rate_stdev_factor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_stdev_factor(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.success_rate_stdev_factor.is_none() {
            self.success_rate_stdev_factor.set_default();
        };
        self.success_rate_stdev_factor.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_stdev_factor(&mut self) -> super::wrappers::UInt32Value {
        self.success_rate_stdev_factor.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_success_rate_stdev_factor(&self) -> &super::wrappers::UInt32Value {
        self.success_rate_stdev_factor.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_success_rate_stdev_factor_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.success_rate_stdev_factor
    }

    fn mut_success_rate_stdev_factor_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.success_rate_stdev_factor
    }
}

impl ::protobuf::Message for Cluster_OutlierDetection {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consecutive_5xx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_ejection_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_ejection_percent)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_consecutive_5xx)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_success_rate)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_minimum_hosts)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_request_volume)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_stdev_factor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.consecutive_5xx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.base_ejection_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_ejection_percent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.enforcing_consecutive_5xx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.enforcing_success_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.success_rate_minimum_hosts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.success_rate_request_volume.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.success_rate_stdev_factor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.consecutive_5xx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.base_ejection_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_ejection_percent.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.enforcing_consecutive_5xx.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.enforcing_success_rate.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.success_rate_minimum_hosts.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.success_rate_request_volume.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.success_rate_stdev_factor.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Cluster_OutlierDetection {
    fn new() -> Cluster_OutlierDetection {
        Cluster_OutlierDetection::new()
    }

    fn descriptor_static(_: ::std::option::Option<Cluster_OutlierDetection>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "consecutive_5xx",
                    Cluster_OutlierDetection::get_consecutive_5xx_for_reflect,
                    Cluster_OutlierDetection::mut_consecutive_5xx_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "interval",
                    Cluster_OutlierDetection::get_interval_for_reflect,
                    Cluster_OutlierDetection::mut_interval_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "base_ejection_time",
                    Cluster_OutlierDetection::get_base_ejection_time_for_reflect,
                    Cluster_OutlierDetection::mut_base_ejection_time_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "max_ejection_percent",
                    Cluster_OutlierDetection::get_max_ejection_percent_for_reflect,
                    Cluster_OutlierDetection::mut_max_ejection_percent_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "enforcing_consecutive_5xx",
                    Cluster_OutlierDetection::get_enforcing_consecutive_5xx_for_reflect,
                    Cluster_OutlierDetection::mut_enforcing_consecutive_5xx_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "enforcing_success_rate",
                    Cluster_OutlierDetection::get_enforcing_success_rate_for_reflect,
                    Cluster_OutlierDetection::mut_enforcing_success_rate_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "success_rate_minimum_hosts",
                    Cluster_OutlierDetection::get_success_rate_minimum_hosts_for_reflect,
                    Cluster_OutlierDetection::mut_success_rate_minimum_hosts_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "success_rate_request_volume",
                    Cluster_OutlierDetection::get_success_rate_request_volume_for_reflect,
                    Cluster_OutlierDetection::mut_success_rate_request_volume_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "success_rate_stdev_factor",
                    Cluster_OutlierDetection::get_success_rate_stdev_factor_for_reflect,
                    Cluster_OutlierDetection::mut_success_rate_stdev_factor_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cluster_OutlierDetection>(
                    "Cluster_OutlierDetection",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Cluster_OutlierDetection {
    fn clear(&mut self) {
        self.clear_consecutive_5xx();
        self.clear_interval();
        self.clear_base_ejection_time();
        self.clear_max_ejection_percent();
        self.clear_enforcing_consecutive_5xx();
        self.clear_enforcing_success_rate();
        self.clear_success_rate_minimum_hosts();
        self.clear_success_rate_request_volume();
        self.clear_success_rate_stdev_factor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_OutlierDetection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_OutlierDetection {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_DiscoveryType {
    STATIC = 0,
    STRICT_DNS = 1,
    LOGICAL_DNS = 2,
    EDS = 3,
}

impl ::protobuf::ProtobufEnum for Cluster_DiscoveryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_DiscoveryType> {
        match value {
            0 => ::std::option::Option::Some(Cluster_DiscoveryType::STATIC),
            1 => ::std::option::Option::Some(Cluster_DiscoveryType::STRICT_DNS),
            2 => ::std::option::Option::Some(Cluster_DiscoveryType::LOGICAL_DNS),
            3 => ::std::option::Option::Some(Cluster_DiscoveryType::EDS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_DiscoveryType] = &[
            Cluster_DiscoveryType::STATIC,
            Cluster_DiscoveryType::STRICT_DNS,
            Cluster_DiscoveryType::LOGICAL_DNS,
            Cluster_DiscoveryType::EDS,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Cluster_DiscoveryType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Cluster_DiscoveryType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Cluster_DiscoveryType {
}

impl ::std::default::Default for Cluster_DiscoveryType {
    fn default() -> Self {
        Cluster_DiscoveryType::STATIC
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_DiscoveryType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_LbPolicy {
    ROUND_ROBIN = 0,
    LEAST_REQUEST = 1,
    RING_HASH = 2,
    RANDOM = 3,
}

impl ::protobuf::ProtobufEnum for Cluster_LbPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_LbPolicy> {
        match value {
            0 => ::std::option::Option::Some(Cluster_LbPolicy::ROUND_ROBIN),
            1 => ::std::option::Option::Some(Cluster_LbPolicy::LEAST_REQUEST),
            2 => ::std::option::Option::Some(Cluster_LbPolicy::RING_HASH),
            3 => ::std::option::Option::Some(Cluster_LbPolicy::RANDOM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_LbPolicy] = &[
            Cluster_LbPolicy::ROUND_ROBIN,
            Cluster_LbPolicy::LEAST_REQUEST,
            Cluster_LbPolicy::RING_HASH,
            Cluster_LbPolicy::RANDOM,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Cluster_LbPolicy>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Cluster_LbPolicy", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Cluster_LbPolicy {
}

impl ::std::default::Default for Cluster_LbPolicy {
    fn default() -> Self {
        Cluster_LbPolicy::ROUND_ROBIN
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x11, 0x61,
    0x70, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
    0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6c,
    0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
    0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
    0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
    0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a,
    0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
    0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
    0x22, 0x4b, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
    0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07,
    0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xbc, 0x03,
    0x0a, 0x0f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
    0x73, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18,
    0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
    0x6b, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52,
    0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0xde, 0x02, 0x0a, 0x0a,
    0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72,
    0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74,
    0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
    0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
    0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61,
    0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x14,
    0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
    0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e,
    0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
    0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a,
    0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12,
    0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x48, 0x74, 0x74, 0x70, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x48,
    0x74, 0x74, 0x70, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
    0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d,
    0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x5f, 0x73,
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
    0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x70, 0x65,
    0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
    0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63,
    0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
    0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
    0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x69,
    0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69,
    0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
    0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x57,
    0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6f, 0x0a, 0x13, 0x47, 0x72, 0x70,
    0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x12, 0x58, 0x0a, 0x16, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
    0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x22, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
    0x48, 0x74, 0x74, 0x70, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x68, 0x74, 0x74, 0x70, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x11, 0x0a, 0x07, 0x43,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
    0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
    0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
    0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
    0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74,
    0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
    0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x66, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f, 0x63,
    0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x52, 0x1d, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
    0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
    0x3b, 0x0a, 0x09, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
    0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69,
    0x63, 0x79, 0x52, 0x08, 0x6c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0c,
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
    0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x6f, 0x73,
    0x74, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18,
    0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41,
    0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x48, 0x6f, 0x73,
    0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
    0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
    0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
    0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
    0x48, 0x0a, 0x10, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
    0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
    0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
    0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x6c, 0x73,
    0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
    0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
    0x52, 0x0a, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x14,
    0x74, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76,
    0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x12,
    0x74, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
    0x2e, 0x48, 0x74, 0x74, 0x70, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x16,
    0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f,
    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x74, 0x74, 0x70,
    0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x48, 0x01, 0x52, 0x14, 0x68, 0x74, 0x74, 0x70, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
    0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x67, 0x72, 0x70, 0x63,
    0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x13, 0x67, 0x72,
    0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
    0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65,
    0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65,
    0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
    0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72,
    0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69,
    0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe8, 0x05, 0x0a, 0x10,
    0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f,
    0x35, 0x78, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
    0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
    0x74, 0x69, 0x76, 0x65, 0x35, 0x78, 0x78, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
    0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47,
    0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
    0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65,
    0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
    0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
    0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x66, 0x6f, 0x72,
    0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
    0x5f, 0x35, 0x78, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
    0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
    0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x35, 0x78,
    0x78, 0x12, 0x52, 0x0a, 0x16, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73,
    0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
    0x14, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
    0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
    0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x6f,
    0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
    0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
    0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73,
    0x12, 0x5b, 0x0a, 0x1b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
    0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
    0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
    0x6c, 0x75, 0x65, 0x52, 0x18, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x57, 0x0a,
    0x19, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
    0x64, 0x65, 0x76, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
    0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
    0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x64, 0x65, 0x76,
    0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x45, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
    0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
    0x43, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x44, 0x4e,
    0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44,
    0x4e, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x44, 0x53, 0x10, 0x03, 0x22, 0x49, 0x0a,
    0x08, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55,
    0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45,
    0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
    0x09, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
    0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x42, 0x11, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
    0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
    0x82, 0x02, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
    0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53,
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
    0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
    0x12, 0x81, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
    0x72, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
    0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x64,
    0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x73, 0x3a, 0x01, 0x2a, 0x4a, 0xdd, 0x43, 0x0a, 0x07, 0x12, 0x05, 0x00, 0x00, 0xc2, 0x01, 0x01,
    0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12,
    0x03, 0x02, 0x08, 0x14, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x07, 0x1a, 0x0a,
    0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x05, 0x07, 0x17, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02,
    0x12, 0x03, 0x06, 0x07, 0x1f, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03, 0x07, 0x07, 0x1e,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x03, 0x09, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x05, 0x12, 0x03, 0x0a, 0x07, 0x27, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x06, 0x12, 0x03, 0x0b, 0x07,
    0x27, 0x0a, 0x0a, 0x0a, 0x02, 0x06, 0x00, 0x12, 0x04, 0x0d, 0x00, 0x1a, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x06, 0x00, 0x01, 0x12, 0x03, 0x0d, 0x08, 0x1f, 0x0a, 0x4d, 0x0a, 0x04, 0x06, 0x00, 0x02,
    0x00, 0x12, 0x04, 0x0f, 0x02, 0x11, 0x03, 0x1a, 0x3f, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
    0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x78,
    0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61,
    0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x0f, 0x06, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x0f, 0x15, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x10,
    0x0f, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x10, 0x16, 0x2e,
    0x0a, 0x0c, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01, 0x12, 0x04, 0x13, 0x02, 0x19, 0x03, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x13, 0x06, 0x13, 0x0a, 0x0c, 0x0a, 0x05,
    0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x13, 0x14, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x14, 0x0f, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x04, 0x15, 0x04, 0x18, 0x06, 0x0a, 0x10, 0x0a, 0x08, 0x06, 0x00, 0x02, 0x01, 0x04,
    0xe7, 0x07, 0x00, 0x12, 0x04, 0x15, 0x04, 0x18, 0x06, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02,
    0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x15, 0x0b, 0x1c, 0x0a, 0x11, 0x0a, 0x0a, 0x06,
    0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x15, 0x0b, 0x1c, 0x0a, 0x12,
    0x0a, 0x0b, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15,
    0x0c, 0x1b, 0x0a, 0x11, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x08, 0x12,
    0x04, 0x15, 0x1f, 0x18, 0x05, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x1c, 0x00, 0x1e,
    0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1c, 0x08, 0x1f, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1d, 0x02, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x04, 0x12, 0x04, 0x1d, 0x02, 0x1c, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x06, 0x12, 0x03, 0x1d, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x1d, 0x07, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x1d, 0x0e, 0x0f, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x20, 0x00, 0x22, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x20, 0x08, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x01, 0x02, 0x00, 0x12, 0x03, 0x21, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x21, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x21, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x21,
    0x13, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x21, 0x1d, 0x1e,
    0x0a, 0x61, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x26, 0x00, 0x3b, 0x01, 0x1a, 0x55, 0x20, 0x43,
    0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20,
    0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69,
    0x64, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
    0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
    0x79, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x26, 0x08, 0x17, 0x0a,
    0x0c, 0x0a, 0x04, 0x04, 0x02, 0x03, 0x00, 0x12, 0x04, 0x27, 0x02, 0x39, 0x03, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x03, 0x00, 0x01, 0x12, 0x03, 0x27, 0x0a, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x02, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x28, 0x04, 0x21, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02,
    0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x28, 0x04, 0x27, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x03, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x28, 0x04, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x28, 0x14, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x28, 0x1f, 0x20, 0x0a, 0xc2, 0x01, 0x0a, 0x06,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x2c, 0x04, 0x34, 0x1a, 0xb2, 0x01, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x73,
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20,
    0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
    0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x31, 0x30, 0x32, 0x34, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x0a, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67,
    0x20, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
    0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x2c, 0x04, 0x28,
    0x21, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x2c, 0x04,
    0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2c, 0x20,
    0x2f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x2c, 0x32,
    0x33, 0x0a, 0xc8, 0x01, 0x0a, 0x06, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x12, 0x03, 0x30, 0x04,
    0x39, 0x1a, 0xb8, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
    0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x6e, 0x64, 0x69,
    0x6e, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
    0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
    0x77, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
    0x61, 0x6d, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x31, 0x30, 0x32,
    0x34, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75,
    0x69, 0x74, 0x0a, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x76, 0x65,
    0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
    0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x04, 0x30, 0x04, 0x2c, 0x34, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x30, 0x04, 0x1f, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x30, 0x20, 0x34, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x30, 0x37, 0x38, 0x0a, 0xc8, 0x01,
    0x0a, 0x06, 0x04, 0x02, 0x03, 0x00, 0x02, 0x03, 0x12, 0x03, 0x34, 0x04, 0x31, 0x1a, 0xb8, 0x01,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x45, 0x6e,
    0x76, 0x6f, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x6f,
    0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
    0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x31, 0x30, 0x32, 0x34, 0x2e, 0x20, 0x53,
    0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x0a, 0x20,
    0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
    0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
    0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x03, 0x04, 0x12, 0x04, 0x34, 0x04, 0x30, 0x39, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x34, 0x04, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x34, 0x20, 0x2c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03,
    0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x34, 0x2f, 0x30, 0x0a, 0xc5, 0x01, 0x0a, 0x06, 0x04, 0x02,
    0x03, 0x00, 0x02, 0x04, 0x12, 0x03, 0x38, 0x04, 0x30, 0x1a, 0xb5, 0x01, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
    0x6f, 0x66, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x72, 0x65, 0x74, 0x72,
    0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
    0x0a, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
    0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
    0x74, 0x20, 0x69, 0x73, 0x20, 0x33, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x0a, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e,
    0x67, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d,
    0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x04, 0x04, 0x12, 0x04, 0x38, 0x04,
    0x34, 0x31, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x04, 0x06, 0x12, 0x03, 0x38,
    0x04, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x38,
    0x20, 0x2b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x38,
    0x2e, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x3a, 0x02, 0x25, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x3a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12, 0x03, 0x3a, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3a, 0x16, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x3a, 0x23, 0x24, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x3e,
    0x00, 0x3f, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x3e, 0x08, 0x1a, 0x0a,
    0x0a, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x41, 0x00, 0x42, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x04, 0x01, 0x12, 0x03, 0x41, 0x08, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x04, 0x44,
    0x00, 0x4a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12, 0x03, 0x44, 0x08, 0x1c, 0x0a,
    0x20, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00, 0x12, 0x03, 0x46, 0x02, 0x21, 0x1a, 0x13, 0x20, 0x44,
    0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x04, 0x46, 0x02, 0x44, 0x1e,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x03, 0x46, 0x02, 0x06, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x46, 0x07, 0x1c, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x03, 0x46, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05,
    0x02, 0x01, 0x12, 0x03, 0x47, 0x02, 0x40, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x04,
    0x12, 0x04, 0x47, 0x02, 0x46, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x06, 0x12,
    0x03, 0x47, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x47,
    0x1e, 0x3b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x03, 0x12, 0x03, 0x47, 0x3e, 0x3f,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x02, 0x12, 0x03, 0x48, 0x02, 0x39, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x02, 0x04, 0x12, 0x04, 0x48, 0x02, 0x47, 0x40, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x02, 0x06, 0x12, 0x03, 0x48, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x48, 0x1e, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02,
    0x03, 0x12, 0x03, 0x48, 0x37, 0x38, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x03, 0x12, 0x03,
    0x49, 0x02, 0x36, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x04, 0x12, 0x04, 0x49, 0x02,
    0x48, 0x39, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x06, 0x12, 0x03, 0x49, 0x02, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x01, 0x12, 0x03, 0x49, 0x1e, 0x31, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x03, 0x12, 0x03, 0x49, 0x34, 0x35, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x06, 0x12, 0x04, 0x4c, 0x00, 0x4e, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x06, 0x01, 0x12,
    0x03, 0x4c, 0x08, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x00, 0x12, 0x03, 0x4d, 0x02,
    0x32, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12, 0x04, 0x4d, 0x02, 0x4c, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x06, 0x12, 0x03, 0x4d, 0x02, 0x16, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4d, 0x17, 0x2d, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x03, 0x4d, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x02, 0x04, 0x07,
    0x12, 0x05, 0x50, 0x00, 0xc2, 0x01, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x07, 0x01, 0x12, 0x03,
    0x50, 0x08, 0x0f, 0x0a, 0xdb, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x00, 0x12, 0x03, 0x54, 0x02,
    0x12, 0x1a, 0xcd, 0x01, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74,
    0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d,
    0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65,
    0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
    0x63, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
    0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x0a, 0x20, 0x61, 0x74, 0x20,
    0x6d, 0x6f, 0x73, 0x74, 0x20, 0x36, 0x30, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
    0x72, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73,
    0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x3a, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x04, 0x12, 0x04, 0x54, 0x02, 0x50, 0x11,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x05, 0x12, 0x03, 0x54, 0x02, 0x08, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x01, 0x12, 0x03, 0x54, 0x09, 0x0d, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x00, 0x03, 0x12, 0x03, 0x54, 0x10, 0x11, 0x0a, 0x4c, 0x0a, 0x04, 0x04, 0x07,
    0x04, 0x00, 0x12, 0x04, 0x57, 0x02, 0x5c, 0x03, 0x1a, 0x3e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
    0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x04, 0x00,
    0x01, 0x12, 0x03, 0x57, 0x07, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x00,
    0x12, 0x03, 0x58, 0x04, 0x0f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x58, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x58, 0x0d, 0x0e, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x59, 0x04, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x59, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12,
    0x03, 0x59, 0x11, 0x12, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03,
    0x5a, 0x04, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x5a, 0x04, 0x0f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03,
    0x5a, 0x12, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x5b,
    0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x5b,
    0x04, 0x07, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x5b,
    0x0a, 0x0b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x01, 0x12, 0x03, 0x5d, 0x02, 0x19, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12, 0x04, 0x5d, 0x02, 0x5c, 0x03, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x06, 0x12, 0x03, 0x5d, 0x02, 0x0f, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5d, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x5d, 0x17, 0x18, 0x0a, 0x4f, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x02,
    0x12, 0x03, 0x60, 0x02, 0x2f, 0x1a, 0x42, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6e, 0x65, 0x74, 0x77,
    0x6f, 0x72, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02,
    0x02, 0x04, 0x12, 0x04, 0x60, 0x02, 0x5d, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02,
    0x06, 0x12, 0x03, 0x60, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x60, 0x1b, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x03, 0x12, 0x03, 0x60,
    0x2d, 0x2e, 0x0a, 0x9f, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x03, 0x12, 0x03, 0x63, 0x02, 0x44,
    0x1a, 0x91, 0x01, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6f,
    0x6e, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77,
    0x72, 0x69, 0x74, 0x65, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x49, 0x66,
    0x0a, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x61,
    0x6e, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
    0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x28, 0x31, 0x4d, 0x69,
    0x42, 0x29, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x03, 0x04, 0x12, 0x04, 0x63,
    0x02, 0x60, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x03, 0x06, 0x12, 0x03, 0x63, 0x02,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x03, 0x01, 0x12, 0x03, 0x63, 0x1e, 0x3f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x03, 0x03, 0x12, 0x03, 0x63, 0x42, 0x43, 0x0a, 0x51, 0x0a,
    0x04, 0x04, 0x07, 0x04, 0x01, 0x12, 0x04, 0x66, 0x02, 0x6b, 0x03, 0x1a, 0x43, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x20,
    0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
    0x20, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x04, 0x01, 0x01, 0x12, 0x03, 0x66, 0x07, 0x0f, 0x0a, 0x0d,
    0x0a, 0x06, 0x04, 0x07, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x67, 0x04, 0x14, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x07, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x67, 0x04, 0x0f, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x07, 0x04, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x67, 0x12, 0x13, 0x0a, 0x0d, 0x0a,
    0x06, 0x04, 0x07, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x68, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x07, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x68, 0x04, 0x11, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x07, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x68, 0x14, 0x15, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x07, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x69, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x07, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x69, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x07, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x69, 0x10, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x07, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x6a, 0x04, 0x0f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07,
    0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x6a, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x07,
    0x04, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x6a, 0x0d, 0x0e, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x07,
    0x02, 0x04, 0x12, 0x03, 0x6c, 0x02, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x04, 0x04,
    0x12, 0x04, 0x6c, 0x02, 0x6b, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x04, 0x06, 0x12,
    0x03, 0x6c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x04, 0x01, 0x12, 0x03, 0x6c,
    0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x04, 0x03, 0x12, 0x03, 0x6c, 0x17, 0x18,
    0x0a, 0xa7, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x08, 0x00, 0x12, 0x04, 0x70, 0x02, 0x73, 0x03, 0x1a,
    0x98, 0x01, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
    0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
    0x69, 0x72, 0x65, 0x64, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x65,
    0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20,
    0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x64,
    0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6e,
    0x73, 0x2c, 0x20, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69, 0x73, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07,
    0x08, 0x00, 0x01, 0x12, 0x03, 0x70, 0x08, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x05,
    0x12, 0x03, 0x71, 0x04, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x05, 0x06, 0x12, 0x03,
    0x71, 0x04, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x05, 0x01, 0x12, 0x03, 0x71, 0x16,
    0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x05, 0x03, 0x12, 0x03, 0x71, 0x25, 0x26, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x06, 0x12, 0x03, 0x72, 0x04, 0x24, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x06, 0x06, 0x12, 0x03, 0x72, 0x04, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x06, 0x01, 0x12, 0x03, 0x72, 0x16, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x06,
    0x03, 0x12, 0x03, 0x72, 0x22, 0x23, 0x0a, 0xd2, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x07, 0x12,
    0x03, 0x78, 0x02, 0x29, 0x1a, 0xc4, 0x01, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
    0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63,
    0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x0a, 0x20, 0x63, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x73,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x6c,
    0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x62, 0x65, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c,
    0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x0a, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
    0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
    0x65, 0x72, 0x65, 0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x61, 0x74, 0x20,
    0x61, 0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x07, 0x04, 0x12, 0x03, 0x78, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02,
    0x07, 0x06, 0x12, 0x03, 0x78, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x07, 0x01,
    0x12, 0x03, 0x78, 0x17, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x07, 0x03, 0x12, 0x03,
    0x78, 0x27, 0x28, 0x0a, 0x91, 0x02, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x08, 0x12, 0x03, 0x7e, 0x02,
    0x3e, 0x1a, 0x83, 0x02, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x61,
    0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x73, 0x74,
    0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x0a,
    0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
    0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,
    0x2e, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x32, 0x20, 0x63, 0x6f,
    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x0a, 0x20, 0x69,
    0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20,
    0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
    0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x69,
    0x6d, 0x69, 0x74, 0x2e, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
    0x31, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
    0x6c, 0x79, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20,
    0x61, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x08, 0x04,
    0x12, 0x04, 0x7e, 0x02, 0x78, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x08, 0x06, 0x12,
    0x03, 0x7e, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x08, 0x01, 0x12, 0x03, 0x7e,
    0x1e, 0x39, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x08, 0x03, 0x12, 0x03, 0x7e, 0x3c, 0x3d,
    0x0a, 0x43, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x09, 0x12, 0x04, 0x81, 0x01, 0x02, 0x28, 0x1a, 0x35,
    0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
    0x74, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69,
    0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73,
    0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x09, 0x04, 0x12, 0x05,
    0x81, 0x01, 0x02, 0x7e, 0x3e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x09, 0x06, 0x12, 0x04,
    0x81, 0x01, 0x02, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x09, 0x01, 0x12, 0x04, 0x81,
    0x01, 0x12, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x09, 0x03, 0x12, 0x04, 0x81, 0x01,
    0x25, 0x27, 0x0a, 0xa0, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x0a, 0x12, 0x04, 0x85, 0x01, 0x02,
    0x26, 0x1a, 0x91, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63,
    0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x54, 0x4c, 0x53, 0x0a, 0x20, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0a, 0x04, 0x12, 0x06,
    0x85, 0x01, 0x02, 0x81, 0x01, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0a, 0x06, 0x12,
    0x04, 0x85, 0x01, 0x02, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0a, 0x01, 0x12, 0x04,
    0x85, 0x01, 0x15, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0a, 0x03, 0x12, 0x04, 0x85,
    0x01, 0x23, 0x25, 0x0a, 0x0e, 0x0a, 0x04, 0x04, 0x07, 0x08, 0x01, 0x12, 0x06, 0x87, 0x01, 0x02,
    0x8c, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x08, 0x01, 0x01, 0x12, 0x04, 0x87, 0x01,
    0x08, 0x18, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x0b, 0x12, 0x04, 0x88, 0x01, 0x04, 0x31,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0b, 0x06, 0x12, 0x04, 0x88, 0x01, 0x04, 0x16, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0b, 0x01, 0x12, 0x04, 0x88, 0x01, 0x17, 0x2b, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x0b, 0x03, 0x12, 0x04, 0x88, 0x01, 0x2e, 0x30, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x07, 0x02, 0x0c, 0x12, 0x04, 0x89, 0x01, 0x04, 0x35, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x0c, 0x06, 0x12, 0x04, 0x89, 0x01, 0x04, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x0c, 0x01, 0x12, 0x04, 0x89, 0x01, 0x19, 0x2e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02,
    0x0c, 0x03, 0x12, 0x04, 0x89, 0x01, 0x32, 0x34, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x0d,
    0x12, 0x04, 0x8a, 0x01, 0x04, 0x36, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0d, 0x06, 0x12,
    0x04, 0x8a, 0x01, 0x04, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0d, 0x01, 0x12, 0x04,
    0x8a, 0x01, 0x19, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0d, 0x03, 0x12, 0x04, 0x8a,
    0x01, 0x33, 0x35, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x0e, 0x12, 0x04, 0x8b, 0x01, 0x04,
    0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0e, 0x06, 0x12, 0x04, 0x8b, 0x01, 0x04, 0x17,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0e, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x18, 0x2d, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x0e, 0x03, 0x12, 0x04, 0x8b, 0x01, 0x31, 0x33, 0x0a, 0xbb,
    0x02, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x0f, 0x12, 0x04, 0x93, 0x01, 0x02, 0x31, 0x1a, 0xac, 0x02,
    0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x66, 0x72,
    0x65, 0x73, 0x68, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x65, 0x69,
    0x74, 0x68, 0x65, 0x72, 0x0a, 0x20, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x6e, 0x73,
    0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6e, 0x73,
    0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73,
    0x74, 0x65, 0x72, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x64, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x66, 0x72,
    0x65, 0x73, 0x68, 0x0a, 0x20, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x35, 0x30, 0x30, 0x30, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x0a, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x74, 0x68, 0x65,
    0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x6e,
    0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6e,
    0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69,
    0x73, 0x0a, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x0f, 0x04, 0x12, 0x06, 0x93, 0x01, 0x02, 0x8c, 0x01, 0x03, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x07, 0x02, 0x0f, 0x06, 0x12, 0x04, 0x93, 0x01, 0x02, 0x1a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x0f, 0x01, 0x12, 0x04, 0x93, 0x01, 0x1b, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x0f, 0x03, 0x12, 0x04, 0x93, 0x01, 0x2e, 0x30, 0x0a, 0x5c, 0x0a, 0x04, 0x04, 0x07,
    0x03, 0x00, 0x12, 0x06, 0x96, 0x01, 0x02, 0xc0, 0x01, 0x03, 0x1a, 0x4c, 0x20, 0x49, 0x66, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69,
    0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c,
    0x6c, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x03, 0x00,
    0x01, 0x12, 0x04, 0x96, 0x01, 0x0a, 0x1a, 0x0a, 0x73, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02,
    0x00, 0x12, 0x04, 0x99, 0x01, 0x04, 0x34, 0x1a, 0x63, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75,
    0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
    0x69, 0x76, 0x65, 0x20, 0x35, 0x78, 0x78, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65,
    0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x20, 0x35, 0x78, 0x78, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66,
    0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07,
    0x04, 0x07, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x06, 0x99, 0x01, 0x04, 0x96, 0x01, 0x1c, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x00, 0x06, 0x12, 0x04, 0x99, 0x01, 0x04, 0x1f,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0x99, 0x01, 0x20,
    0x2f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x04, 0x99, 0x01,
    0x32, 0x33, 0x0a, 0xb6, 0x01, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02, 0x01, 0x12, 0x04, 0x9d,
    0x01, 0x04, 0x2a, 0x1a, 0xa5, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
    0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
    0x69, 0x73, 0x20, 0x73, 0x77, 0x65, 0x65, 0x70, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x6e, 0x0a, 0x20, 0x62,
    0x6f, 0x74, 0x68, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x68, 0x6f, 0x73,
    0x74, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
    0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x44, 0x65,
    0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x30, 0x30,
    0x6d, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x31, 0x30, 0x73, 0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04,
    0x07, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x06, 0x9d, 0x01, 0x04, 0x99, 0x01, 0x34, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x01, 0x06, 0x12, 0x04, 0x9d, 0x01, 0x04, 0x1c, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0x9d, 0x01, 0x1d, 0x25,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x04, 0x9d, 0x01, 0x28,
    0x29, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02, 0x02, 0x12, 0x04, 0xa1, 0x01,
    0x04, 0x34, 0x1a, 0xae, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x74,
    0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x73,
    0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x62,
    0x61, 0x73, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
    0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68,
    0x6f, 0x73, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x65, 0x6a, 0x65,
    0x63, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x33, 0x30, 0x30, 0x30, 0x30, 0x6d, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x33, 0x30,
    0x73, 0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x06,
    0xa1, 0x01, 0x04, 0x9d, 0x01, 0x2a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x02,
    0x06, 0x12, 0x04, 0xa1, 0x01, 0x04, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x04, 0xa1, 0x01, 0x1d, 0x2f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00,
    0x02, 0x02, 0x03, 0x12, 0x04, 0xa1, 0x01, 0x32, 0x33, 0x0a, 0x76, 0x0a, 0x06, 0x04, 0x07, 0x03,
    0x00, 0x02, 0x03, 0x12, 0x04, 0xa4, 0x01, 0x04, 0x39, 0x1a, 0x66, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20,
    0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6a, 0x65,
    0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x75, 0x74, 0x6c,
    0x69, 0x65, 0x72, 0x0a, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
    0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x25, 0x2e,
    0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x03, 0x04, 0x12, 0x06, 0xa4, 0x01,
    0x04, 0xa1, 0x01, 0x34, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x03, 0x06, 0x12,
    0x04, 0xa4, 0x01, 0x04, 0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x03, 0x01,
    0x12, 0x04, 0xa4, 0x01, 0x20, 0x34, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x03,
    0x03, 0x12, 0x04, 0xa4, 0x01, 0x37, 0x38, 0x0a, 0xd9, 0x01, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00,
    0x02, 0x04, 0x12, 0x04, 0xa8, 0x01, 0x04, 0x3e, 0x1a, 0xc8, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x25, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20,
    0x68, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x63, 0x74,
    0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
    0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
    0x75, 0x74, 0x69, 0x76, 0x65, 0x20, 0x35, 0x78, 0x78, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75,
    0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x20,
    0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72,
    0x61, 0x6d, 0x70, 0x20, 0x69, 0x74, 0x20, 0x75, 0x70, 0x20, 0x73, 0x6c, 0x6f, 0x77, 0x6c, 0x79,
    0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30,
    0x30, 0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x04, 0x04, 0x12, 0x06,
    0xa8, 0x01, 0x04, 0xa4, 0x01, 0x39, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x04,
    0x06, 0x12, 0x04, 0xa8, 0x01, 0x04, 0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02,
    0x04, 0x01, 0x12, 0x04, 0xa8, 0x01, 0x20, 0x39, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00,
    0x02, 0x04, 0x03, 0x12, 0x04, 0xa8, 0x01, 0x3c, 0x3d, 0x0a, 0xe1, 0x01, 0x0a, 0x06, 0x04, 0x07,
    0x03, 0x00, 0x02, 0x05, 0x12, 0x04, 0xac, 0x01, 0x04, 0x3b, 0x1a, 0xd0, 0x01, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x25, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61,
    0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
    0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x20,
    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63,
    0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x73, 0x75, 0x63, 0x63,
    0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
    0x69, 0x63, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
    0x67, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x74,
    0x20, 0x75, 0x70, 0x20, 0x73, 0x6c, 0x6f, 0x77, 0x6c, 0x79, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
    0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x2e, 0x0a, 0x0a, 0x11, 0x0a,
    0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x05, 0x04, 0x12, 0x06, 0xac, 0x01, 0x04, 0xa8, 0x01, 0x3e,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x05, 0x06, 0x12, 0x04, 0xac, 0x01, 0x04,
    0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x05, 0x01, 0x12, 0x04, 0xac, 0x01,
    0x20, 0x36, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x05, 0x03, 0x12, 0x04, 0xac,
    0x01, 0x39, 0x3a, 0x0a, 0x99, 0x02, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02, 0x06, 0x12, 0x04,
    0xb1, 0x01, 0x04, 0x3f, 0x1a, 0x88, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
    0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61,
    0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75,
    0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x6f,
    0x0a, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
    0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x20,
    0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74,
    0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
    0x67, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x69, 0x61, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
    0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
    0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
    0x64, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20,
    0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x2e, 0x0a, 0x0a,
    0x11, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x06, 0x04, 0x12, 0x06, 0xb1, 0x01, 0x04, 0xac,
    0x01, 0x3b, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x06, 0x06, 0x12, 0x04, 0xb1,
    0x01, 0x04, 0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x06, 0x01, 0x12, 0x04,
    0xb1, 0x01, 0x20, 0x3a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x06, 0x03, 0x12,
    0x04, 0xb1, 0x01, 0x3d, 0x3e, 0x0a, 0xd5, 0x02, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02, 0x07,
    0x12, 0x04, 0xb7, 0x01, 0x04, 0x40, 0x1a, 0xc4, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69,
    0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c,
    0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x69, 0x6e,
    0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x28, 0x61, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
    0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
    0x61, 0x6c, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x76,
    0x65, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63,
    0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
    0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
    0x69, 0x73, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x0a, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x6f, 0x75, 0x74,
    0x6c, 0x69, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
    0x69, 0x61, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20,
    0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x0a, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
    0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x2e, 0x0a, 0x0a, 0x11, 0x0a,
    0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x07, 0x04, 0x12, 0x06, 0xb7, 0x01, 0x04, 0xb1, 0x01, 0x3f,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x07, 0x06, 0x12, 0x04, 0xb7, 0x01, 0x04,
    0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x07, 0x01, 0x12, 0x04, 0xb7, 0x01,
    0x20, 0x3b, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x07, 0x03, 0x12, 0x04, 0xb7,
    0x01, 0x3e, 0x3f, 0x0a, 0xcc, 0x03, 0x0a, 0x06, 0x04, 0x07, 0x03, 0x00, 0x02, 0x08, 0x12, 0x04,
    0xbf, 0x01, 0x04, 0x3e, 0x1a, 0xbb, 0x03, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x63,
    0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64,
    0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6a, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65,
    0x0a, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74,
    0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x20, 0x73,
    0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x0a, 0x20, 0x64, 0x65,
    0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
    0x65, 0x61, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x72, 0x61, 0x74, 0x65,
    0x3a, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x20, 0x2d, 0x20, 0x28, 0x73, 0x74, 0x64, 0x65, 0x76, 0x20,
    0x2a, 0x0a, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
    0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x2e, 0x20, 0x54,
    0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69,
    0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73,
    0x61, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x0a, 0x20, 0x64, 0x6f,
    0x75, 0x62, 0x6c, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x2c, 0x20, 0x69,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x61,
    0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x31, 0x2e, 0x39, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x73,
    0x68, 0x6f, 0x75, 0x6c, 0x64, 0x0a, 0x20, 0x62, 0x65, 0x20, 0x31, 0x39, 0x30, 0x30, 0x2e, 0x20,
    0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x39, 0x30, 0x30,
    0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x08, 0x04, 0x12, 0x06, 0xbf,
    0x01, 0x04, 0xb7, 0x01, 0x40, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x08, 0x06,
    0x12, 0x04, 0xbf, 0x01, 0x04, 0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02, 0x08,
    0x01, 0x12, 0x04, 0xbf, 0x01, 0x20, 0x39, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x03, 0x00, 0x02,
    0x08, 0x03, 0x12, 0x04, 0xbf, 0x01, 0x3c, 0x3d, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x10,
    0x12, 0x04, 0xc1, 0x01, 0x02, 0x2a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x10, 0x04, 0x12,
    0x06, 0xc1, 0x01, 0x02, 0xc0, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x10, 0x06,
    0x12, 0x04, 0xc1, 0x01, 0x02, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x10, 0x01, 0x12,
    0x04, 0xc1, 0x01, 0x13, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x10, 0x03, 0x12, 0x04,
    0xc1, 0x01, 0x27, 0x29, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
