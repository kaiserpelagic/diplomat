// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Capability {
    // message fields
    health_check_protocol: ::std::vec::Vec<Capability_Protocol>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Capability {}

impl Capability {
    pub fn new() -> Capability {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Capability {
        static mut instance: ::protobuf::lazy::Lazy<Capability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Capability,
        };
        unsafe {
            instance.get(Capability::new)
        }
    }

    // repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;

    pub fn clear_health_check_protocol(&mut self) {
        self.health_check_protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_check_protocol(&mut self, v: ::std::vec::Vec<Capability_Protocol>) {
        self.health_check_protocol = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_check_protocol(&mut self) -> &mut ::std::vec::Vec<Capability_Protocol> {
        &mut self.health_check_protocol
    }

    // Take field
    pub fn take_health_check_protocol(&mut self) -> ::std::vec::Vec<Capability_Protocol> {
        ::std::mem::replace(&mut self.health_check_protocol, ::std::vec::Vec::new())
    }

    pub fn get_health_check_protocol(&self) -> &[Capability_Protocol] {
        &self.health_check_protocol
    }

    fn get_health_check_protocol_for_reflect(&self) -> &::std::vec::Vec<Capability_Protocol> {
        &self.health_check_protocol
    }

    fn mut_health_check_protocol_for_reflect(&mut self) -> &mut ::std::vec::Vec<Capability_Protocol> {
        &mut self.health_check_protocol
    }
}

impl ::protobuf::Message for Capability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_into(wire_type, is, &mut self.health_check_protocol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.health_check_protocol {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.health_check_protocol {
            os.write_enum(1, v.value())?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Capability {
    fn new() -> Capability {
        Capability::new()
    }

    fn descriptor_static(_: ::std::option::Option<Capability>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Capability_Protocol>>(
                    "health_check_protocol",
                    Capability::get_health_check_protocol_for_reflect,
                    Capability::mut_health_check_protocol_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Capability>(
                    "Capability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Capability {
    fn clear(&mut self) {
        self.clear_health_check_protocol();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Capability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Capability_Protocol {
    HTTP = 0,
    TCP = 1,
    REDIS = 2,
}

impl ::protobuf::ProtobufEnum for Capability_Protocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Capability_Protocol> {
        match value {
            0 => ::std::option::Option::Some(Capability_Protocol::HTTP),
            1 => ::std::option::Option::Some(Capability_Protocol::TCP),
            2 => ::std::option::Option::Some(Capability_Protocol::REDIS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Capability_Protocol] = &[
            Capability_Protocol::HTTP,
            Capability_Protocol::TCP,
            Capability_Protocol::REDIS,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Capability_Protocol>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Capability_Protocol", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Capability_Protocol {
}

impl ::std::default::Default for Capability_Protocol {
    fn default() -> Self {
        Capability_Protocol::HTTP
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability_Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequest {
    // message fields
    node: ::protobuf::SingularPtrField<super::base::Node>,
    capability: ::protobuf::SingularPtrField<Capability>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheckRequest {}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheckRequest {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheckRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheckRequest,
        };
        unsafe {
            instance.get(HealthCheckRequest::new)
        }
    }

    // .envoy.api.v2.Node node = 1;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        };
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| super::base::Node::default_instance())
    }

    fn get_node_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Node> {
        &self.node
    }

    fn mut_node_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Node> {
        &mut self.node
    }

    // .envoy.api.v2.Capability capability = 2;

    pub fn clear_capability(&mut self) {
        self.capability.clear();
    }

    pub fn has_capability(&self) -> bool {
        self.capability.is_some()
    }

    // Param is passed by value, moved
    pub fn set_capability(&mut self, v: Capability) {
        self.capability = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capability(&mut self) -> &mut Capability {
        if self.capability.is_none() {
            self.capability.set_default();
        };
        self.capability.as_mut().unwrap()
    }

    // Take field
    pub fn take_capability(&mut self) -> Capability {
        self.capability.take().unwrap_or_else(|| Capability::new())
    }

    pub fn get_capability(&self) -> &Capability {
        self.capability.as_ref().unwrap_or_else(|| Capability::default_instance())
    }

    fn get_capability_for_reflect(&self) -> &::protobuf::SingularPtrField<Capability> {
        &self.capability
    }

    fn mut_capability_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<Capability> {
        &mut self.capability
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.capability)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.capability.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.capability.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheckRequest {
    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheckRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                    "node",
                    HealthCheckRequest::get_node_for_reflect,
                    HealthCheckRequest::mut_node_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Capability>>(
                    "capability",
                    HealthCheckRequest::get_capability_for_reflect,
                    HealthCheckRequest::mut_capability_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheckRequest>(
                    "HealthCheckRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheckRequest {
    fn clear(&mut self) {
        self.clear_node();
        self.clear_capability();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointHealth {
    // message fields
    endpoint: ::protobuf::SingularPtrField<super::base::Endpoint>,
    pub health_status: super::health_check::HealthStatus,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EndpointHealth {}

impl EndpointHealth {
    pub fn new() -> EndpointHealth {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EndpointHealth {
        static mut instance: ::protobuf::lazy::Lazy<EndpointHealth> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointHealth,
        };
        unsafe {
            instance.get(EndpointHealth::new)
        }
    }

    // .envoy.api.v2.Endpoint endpoint = 1;

    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    pub fn has_endpoint(&self) -> bool {
        self.endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: super::base::Endpoint) {
        self.endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut super::base::Endpoint {
        if self.endpoint.is_none() {
            self.endpoint.set_default();
        };
        self.endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_endpoint(&mut self) -> super::base::Endpoint {
        self.endpoint.take().unwrap_or_else(|| super::base::Endpoint::new())
    }

    pub fn get_endpoint(&self) -> &super::base::Endpoint {
        self.endpoint.as_ref().unwrap_or_else(|| super::base::Endpoint::default_instance())
    }

    fn get_endpoint_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Endpoint> {
        &self.endpoint
    }

    fn mut_endpoint_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Endpoint> {
        &mut self.endpoint
    }

    // .envoy.api.v2.HealthStatus health_status = 2;

    pub fn clear_health_status(&mut self) {
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: super::health_check::HealthStatus) {
        self.health_status = v;
    }

    pub fn get_health_status(&self) -> super::health_check::HealthStatus {
        self.health_status
    }

    fn get_health_status_for_reflect(&self) -> &super::health_check::HealthStatus {
        &self.health_status
    }

    fn mut_health_status_for_reflect(&mut self) -> &mut super::health_check::HealthStatus {
        &mut self.health_status
    }
}

impl ::protobuf::Message for EndpointHealth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.health_status = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.health_status);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            os.write_enum(2, self.health_status.value())?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EndpointHealth {
    fn new() -> EndpointHealth {
        EndpointHealth::new()
    }

    fn descriptor_static(_: ::std::option::Option<EndpointHealth>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Endpoint>>(
                    "endpoint",
                    EndpointHealth::get_endpoint_for_reflect,
                    EndpointHealth::mut_endpoint_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::health_check::HealthStatus>>(
                    "health_status",
                    EndpointHealth::get_health_status_for_reflect,
                    EndpointHealth::mut_health_status_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointHealth>(
                    "EndpointHealth",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EndpointHealth {
    fn clear(&mut self) {
        self.clear_endpoint();
        self.clear_health_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointHealth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointHealth {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointHealthResponse {
    // message fields
    endpoints_health: ::protobuf::RepeatedField<EndpointHealth>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EndpointHealthResponse {}

impl EndpointHealthResponse {
    pub fn new() -> EndpointHealthResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EndpointHealthResponse {
        static mut instance: ::protobuf::lazy::Lazy<EndpointHealthResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointHealthResponse,
        };
        unsafe {
            instance.get(EndpointHealthResponse::new)
        }
    }

    // repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;

    pub fn clear_endpoints_health(&mut self) {
        self.endpoints_health.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints_health(&mut self, v: ::protobuf::RepeatedField<EndpointHealth>) {
        self.endpoints_health = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints_health(&mut self) -> &mut ::protobuf::RepeatedField<EndpointHealth> {
        &mut self.endpoints_health
    }

    // Take field
    pub fn take_endpoints_health(&mut self) -> ::protobuf::RepeatedField<EndpointHealth> {
        ::std::mem::replace(&mut self.endpoints_health, ::protobuf::RepeatedField::new())
    }

    pub fn get_endpoints_health(&self) -> &[EndpointHealth] {
        &self.endpoints_health
    }

    fn get_endpoints_health_for_reflect(&self) -> &::protobuf::RepeatedField<EndpointHealth> {
        &self.endpoints_health
    }

    fn mut_endpoints_health_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<EndpointHealth> {
        &mut self.endpoints_health
    }
}

impl ::protobuf::Message for EndpointHealthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints_health)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.endpoints_health {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.endpoints_health {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EndpointHealthResponse {
    fn new() -> EndpointHealthResponse {
        EndpointHealthResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<EndpointHealthResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndpointHealth>>(
                    "endpoints_health",
                    EndpointHealthResponse::get_endpoints_health_for_reflect,
                    EndpointHealthResponse::mut_endpoints_health_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointHealthResponse>(
                    "EndpointHealthResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EndpointHealthResponse {
    fn clear(&mut self) {
        self.clear_endpoints_health();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointHealthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointHealthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequestOrEndpointHealthResponse {
    // message oneof groups
    request_type: ::std::option::Option<HealthCheckRequestOrEndpointHealthResponse_oneof_request_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheckRequestOrEndpointHealthResponse {}

#[derive(Clone,PartialEq)]
pub enum HealthCheckRequestOrEndpointHealthResponse_oneof_request_type {
    health_check_request(HealthCheckRequest),
    endpoint_health_response(EndpointHealthResponse),
}

impl HealthCheckRequestOrEndpointHealthResponse {
    pub fn new() -> HealthCheckRequestOrEndpointHealthResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheckRequestOrEndpointHealthResponse {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheckRequestOrEndpointHealthResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheckRequestOrEndpointHealthResponse,
        };
        unsafe {
            instance.get(HealthCheckRequestOrEndpointHealthResponse::new)
        }
    }

    // .envoy.api.v2.HealthCheckRequest health_check_request = 1;

    pub fn clear_health_check_request(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_health_check_request(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_health_check_request(&mut self, v: HealthCheckRequest) {
        self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_health_check_request(&mut self) -> &mut HealthCheckRequest {
        if let ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(HealthCheckRequest::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_health_check_request(&mut self) -> HealthCheckRequest {
        if self.has_health_check_request() {
            match self.request_type.take() {
                ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(v)) => v,
                _ => panic!(),
            }
        } else {
            HealthCheckRequest::new()
        }
    }

    pub fn get_health_check_request(&self) -> &HealthCheckRequest {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v)) => v,
            _ => HealthCheckRequest::default_instance(),
        }
    }

    // .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;

    pub fn clear_endpoint_health_response(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_endpoint_health_response(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint_health_response(&mut self, v: EndpointHealthResponse) {
        self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint_health_response(&mut self) -> &mut EndpointHealthResponse {
        if let ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(EndpointHealthResponse::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint_health_response(&mut self) -> EndpointHealthResponse {
        if self.has_endpoint_health_response() {
            match self.request_type.take() {
                ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(v)) => v,
                _ => panic!(),
            }
        } else {
            EndpointHealthResponse::new()
        }
    }

    pub fn get_endpoint_health_response(&self) -> &EndpointHealthResponse {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v)) => v,
            _ => EndpointHealthResponse::default_instance(),
        }
    }
}

impl ::protobuf::Message for HealthCheckRequestOrEndpointHealthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheckRequestOrEndpointHealthResponse {
    fn new() -> HealthCheckRequestOrEndpointHealthResponse {
        HealthCheckRequestOrEndpointHealthResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheckRequestOrEndpointHealthResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HealthCheckRequest>(
                    "health_check_request",
                    HealthCheckRequestOrEndpointHealthResponse::has_health_check_request,
                    HealthCheckRequestOrEndpointHealthResponse::get_health_check_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EndpointHealthResponse>(
                    "endpoint_health_response",
                    HealthCheckRequestOrEndpointHealthResponse::has_endpoint_health_response,
                    HealthCheckRequestOrEndpointHealthResponse::get_endpoint_health_response,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheckRequestOrEndpointHealthResponse>(
                    "HealthCheckRequestOrEndpointHealthResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheckRequestOrEndpointHealthResponse {
    fn clear(&mut self) {
        self.clear_health_check_request();
        self.clear_endpoint_health_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequestOrEndpointHealthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequestOrEndpointHealthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalityEndpoints {
    // message fields
    locality: ::protobuf::SingularPtrField<super::base::Locality>,
    endpoints: ::protobuf::RepeatedField<super::base::Endpoint>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LocalityEndpoints {}

impl LocalityEndpoints {
    pub fn new() -> LocalityEndpoints {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LocalityEndpoints {
        static mut instance: ::protobuf::lazy::Lazy<LocalityEndpoints> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LocalityEndpoints,
        };
        unsafe {
            instance.get(LocalityEndpoints::new)
        }
    }

    // .envoy.api.v2.Locality locality = 1;

    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        };
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }

    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| super::base::Locality::default_instance())
    }

    fn get_locality_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Locality> {
        &self.locality
    }

    fn mut_locality_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Locality> {
        &mut self.locality
    }

    // repeated .envoy.api.v2.Endpoint endpoints = 2;

    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<super::base::Endpoint>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<super::base::Endpoint> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<super::base::Endpoint> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_endpoints(&self) -> &[super::base::Endpoint] {
        &self.endpoints
    }

    fn get_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<super::base::Endpoint> {
        &self.endpoints
    }

    fn mut_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::base::Endpoint> {
        &mut self.endpoints
    }
}

impl ::protobuf::Message for LocalityEndpoints {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.locality.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LocalityEndpoints {
    fn new() -> LocalityEndpoints {
        LocalityEndpoints::new()
    }

    fn descriptor_static(_: ::std::option::Option<LocalityEndpoints>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                    "locality",
                    LocalityEndpoints::get_locality_for_reflect,
                    LocalityEndpoints::mut_locality_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Endpoint>>(
                    "endpoints",
                    LocalityEndpoints::get_endpoints_for_reflect,
                    LocalityEndpoints::mut_endpoints_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LocalityEndpoints>(
                    "LocalityEndpoints",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LocalityEndpoints {
    fn clear(&mut self) {
        self.clear_locality();
        self.clear_endpoints();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalityEndpoints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalityEndpoints {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterHealthCheck {
    // message fields
    pub cluster_name: ::std::string::String,
    health_checks: ::protobuf::RepeatedField<super::health_check::HealthCheck>,
    endpoints: ::protobuf::RepeatedField<LocalityEndpoints>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterHealthCheck {}

impl ClusterHealthCheck {
    pub fn new() -> ClusterHealthCheck {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterHealthCheck {
        static mut instance: ::protobuf::lazy::Lazy<ClusterHealthCheck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterHealthCheck,
        };
        unsafe {
            instance.get(ClusterHealthCheck::new)
        }
    }

    // string cluster_name = 1;

    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }

    fn get_cluster_name_for_reflect(&self) -> &::std::string::String {
        &self.cluster_name
    }

    fn mut_cluster_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // repeated .envoy.api.v2.HealthCheck health_checks = 2;

    pub fn clear_health_checks(&mut self) {
        self.health_checks.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_checks(&mut self, v: ::protobuf::RepeatedField<super::health_check::HealthCheck>) {
        self.health_checks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_checks(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // Take field
    pub fn take_health_checks(&mut self) -> ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        ::std::mem::replace(&mut self.health_checks, ::protobuf::RepeatedField::new())
    }

    pub fn get_health_checks(&self) -> &[super::health_check::HealthCheck] {
        &self.health_checks
    }

    fn get_health_checks_for_reflect(&self) -> &::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &self.health_checks
    }

    fn mut_health_checks_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;

    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<LocalityEndpoints>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LocalityEndpoints> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<LocalityEndpoints> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_endpoints(&self) -> &[LocalityEndpoints] {
        &self.endpoints
    }

    fn get_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<LocalityEndpoints> {
        &self.endpoints
    }

    fn mut_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<LocalityEndpoints> {
        &mut self.endpoints
    }
}

impl ::protobuf::Message for ClusterHealthCheck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.health_checks)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        };
        for value in &self.health_checks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        };
        for v in &self.health_checks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.endpoints {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterHealthCheck {
    fn new() -> ClusterHealthCheck {
        ClusterHealthCheck::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterHealthCheck>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cluster_name",
                    ClusterHealthCheck::get_cluster_name_for_reflect,
                    ClusterHealthCheck::mut_cluster_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::health_check::HealthCheck>>(
                    "health_checks",
                    ClusterHealthCheck::get_health_checks_for_reflect,
                    ClusterHealthCheck::mut_health_checks_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalityEndpoints>>(
                    "endpoints",
                    ClusterHealthCheck::get_endpoints_for_reflect,
                    ClusterHealthCheck::mut_endpoints_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterHealthCheck>(
                    "ClusterHealthCheck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterHealthCheck {
    fn clear(&mut self) {
        self.clear_cluster_name();
        self.clear_health_checks();
        self.clear_endpoints();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterHealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterHealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckSpecifier {
    // message fields
    health_check: ::protobuf::RepeatedField<ClusterHealthCheck>,
    interval: ::protobuf::SingularPtrField<super::duration::Duration>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheckSpecifier {}

impl HealthCheckSpecifier {
    pub fn new() -> HealthCheckSpecifier {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheckSpecifier {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheckSpecifier> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheckSpecifier,
        };
        unsafe {
            instance.get(HealthCheckSpecifier::new)
        }
    }

    // repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;

    pub fn clear_health_check(&mut self) {
        self.health_check.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_check(&mut self, v: ::protobuf::RepeatedField<ClusterHealthCheck>) {
        self.health_check = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_check(&mut self) -> &mut ::protobuf::RepeatedField<ClusterHealthCheck> {
        &mut self.health_check
    }

    // Take field
    pub fn take_health_check(&mut self) -> ::protobuf::RepeatedField<ClusterHealthCheck> {
        ::std::mem::replace(&mut self.health_check, ::protobuf::RepeatedField::new())
    }

    pub fn get_health_check(&self) -> &[ClusterHealthCheck] {
        &self.health_check
    }

    fn get_health_check_for_reflect(&self) -> &::protobuf::RepeatedField<ClusterHealthCheck> {
        &self.health_check
    }

    fn mut_health_check_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<ClusterHealthCheck> {
        &mut self.health_check
    }

    // .google.protobuf.Duration interval = 2;

    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: super::duration::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut super::duration::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        };
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> super::duration::Duration {
        self.interval.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_interval(&self) -> &super::duration::Duration {
        self.interval.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_interval_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.interval
    }

    fn mut_interval_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.interval
    }
}

impl ::protobuf::Message for HealthCheckSpecifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.health_check)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.health_check {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.health_check {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheckSpecifier {
    fn new() -> HealthCheckSpecifier {
        HealthCheckSpecifier::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheckSpecifier>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterHealthCheck>>(
                    "health_check",
                    HealthCheckSpecifier::get_health_check_for_reflect,
                    HealthCheckSpecifier::mut_health_check_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "interval",
                    HealthCheckSpecifier::get_interval_for_reflect,
                    HealthCheckSpecifier::mut_interval_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheckSpecifier>(
                    "HealthCheckSpecifier",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheckSpecifier {
    fn clear(&mut self) {
        self.clear_health_check();
        self.clear_interval();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckSpecifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckSpecifier {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x0e, 0x61,
    0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61,
    0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
    0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
    0x74, 0x79, 0x12, 0x55, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
    0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
    0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
    0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74,
    0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
    0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12,
    0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x44, 0x49,
    0x53, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
    0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
    0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
    0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
    0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x0e,
    0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x32,
    0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
    0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
    0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61,
    0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
    0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
    0x74, 0x75, 0x73, 0x22, 0x61, 0x0a, 0x16, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
    0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xf4, 0x01, 0x0a, 0x2a, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x45,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
    0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x65,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x0a,
    0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a,
    0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6c, 0x6f,
    0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
    0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a,
    0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
    0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61,
    0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
    0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
    0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70,
    0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43,
    0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01,
    0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x32, 0xab, 0x02, 0x0a, 0x16, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65,
    0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x38, 0x2e, 0x65, 0x6e, 0x76,
    0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x45, 0x6e,
    0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x22, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x97,
    0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x12, 0x38, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x22, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61,
    0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
    0x72, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x64,
    0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x4a, 0xdd, 0x26, 0x0a, 0x06, 0x12, 0x04, 0x00,
    0x00, 0x77, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a,
    0x01, 0x02, 0x12, 0x03, 0x02, 0x08, 0x14, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04,
    0x07, 0x17, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x05, 0x07, 0x1f, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x07, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x08, 0x07, 0x27, 0x0a, 0xd3, 0x02, 0x0a, 0x02, 0x06, 0x00, 0x12, 0x04, 0x0f, 0x00, 0x40, 0x01,
    0x1a, 0xc6, 0x02, 0x20, 0x48, 0x44, 0x53, 0x20, 0x69, 0x73, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x65,
    0x6e, 0x74, 0x73, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x68, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x79, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
    0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79,
    0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
    0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62,
    0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x0a, 0x20, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,
    0x65, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20,
    0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
    0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
    0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72,
    0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x20, 0x65, 0x74, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
    0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63,
    0x6b, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x74, 0x68, 0x72, 0x6f,
    0x75, 0x67, 0x68, 0x20, 0x45, 0x44, 0x53, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x06, 0x00, 0x01,
    0x12, 0x03, 0x0f, 0x08, 0x1e, 0x0a, 0xf1, 0x10, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x00, 0x12, 0x04,
    0x32, 0x02, 0x34, 0x03, 0x1a, 0xe2, 0x10, 0x20, 0x31, 0x2e, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79,
    0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69,
    0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62,
    0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
    0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x73, 0x65, 0x6e, 0x64,
    0x73, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x72, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x69,
    0x74, 0x73, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
    0x28, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20,
    0x69, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68,
    0x65, 0x63, 0x6b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x69, 0x74, 0x68, 0x2c, 0x20, 0x77, 0x68,
    0x61, 0x74, 0x20, 0x7a, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x74, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64,
    0x65, 0x73, 0x20, 0x69, 0x6e, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2e, 0x0a, 0x20, 0x32,
    0x2e, 0x20, 0x49, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
    0x20, 0x28, 0x31, 0x29, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x64, 0x65, 0x73, 0x69,
    0x67, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x45, 0x6e, 0x76, 0x6f,
    0x79, 0x20, 0x61, 0x73, 0x20, 0x61, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x6c,
    0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
    0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69,
    0x76, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
    0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x73,
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x32, 0x29, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x73, 0x74, 0x72,
    0x65, 0x61, 0x6d, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
    0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x6c, 0x75, 0x73,
    0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66,
    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c,
    0x6c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73,
    0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75,
    0x65, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e,
    0x74, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x3a,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x2e, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x73, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x2e, 0x20, 0x50, 0x65, 0x72, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x0a, 0x20, 0x33, 0x2e, 0x20, 0x45,
    0x6e, 0x76, 0x6f, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x68,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65,
    0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
    0x68, 0x65, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x73, 0x65, 0x6e, 0x64, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20,
    0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x28, 0x69, 0x70, 0x3a, 0x70, 0x6f, 0x72, 0x74,
    0x29, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x32, 0x2e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x6e,
    0x76, 0x6f, 0x79, 0x20, 0x77, 0x61, 0x69, 0x74, 0x73, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x73, 0x20, 0x61,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
    0x20, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x6e,
    0x6f, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x68, 0x61, 0x73, 0x6e, 0xe2, 0x80, 0x99, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
    0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,
    0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
    0x65, 0x64, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x2e, 0x0a, 0x20, 0x34, 0x2e, 0x20,
    0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x72, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e,
    0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61,
    0x6d, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20,
    0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74,
    0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e,
    0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x35, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d,
    0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c,
    0x6c, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x28,
    0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
    0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63,
    0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x45, 0x6e, 0x64,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
    0x0a, 0x20, 0x36, 0x2e, 0x20, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20,
    0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x70,
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
    0x20, 0x74, 0x6f, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
    0x63, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
    0x74, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x68, 0x65, 0x61,
    0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x49, 0x74,
    0x20, 0x6d, 0x61, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x6c,
    0x69, 0x6e, 0x65, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20,
    0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x65,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
    0x59, 0x20, 0x69, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20,
    0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x20, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x48,
    0x44, 0x53, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x45, 0x44, 0x53, 0x29, 0x2e, 0x0a, 0x20, 0x42, 0x79,
    0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2c, 0x20, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x75,
    0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20,
    0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63,
    0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
    0x63, 0x6b, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x4f, 0x44,
    0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x48, 0x6f, 0x77, 0x20, 0x69, 0x73,
    0x20, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
    0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x43, 0x44, 0x53, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69,
    0x61, 0x6e, 0x74, 0x3f, 0x0a, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68,
    0x29, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x20, 0x40, 0x61, 0x6d, 0x62, 0x36, 0x37, 0x27, 0x73, 0x20,
    0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x32, 0x06, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x05,
    0x12, 0x03, 0x32, 0x18, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03,
    0x32, 0x1f, 0x49, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x33, 0x0f,
    0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x33, 0x16, 0x2a, 0x0a,
    0xc1, 0x01, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01, 0x12, 0x04, 0x39, 0x02, 0x3f, 0x03, 0x1a, 0xb2,
    0x01, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x55,
    0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x76,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64,
    0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x53,
    0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x77, 0x65, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x6e, 0x20,
    0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65,
    0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x3f, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x39, 0x06,
    0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x39, 0x17, 0x41, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x3a, 0x0f, 0x23, 0x0a, 0x0d, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x3b, 0x04, 0x3e, 0x06, 0x0a, 0x10, 0x0a, 0x08,
    0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x04, 0x3b, 0x04, 0x3e, 0x06, 0x0a, 0x10,
    0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x3b, 0x0b, 0x1c,
    0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x3b, 0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x3b, 0x0c, 0x1b, 0x0a, 0x11, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04,
    0xe7, 0x07, 0x00, 0x08, 0x12, 0x04, 0x3b, 0x1f, 0x3e, 0x05, 0x0a, 0x74, 0x0a, 0x02, 0x04, 0x00,
    0x12, 0x04, 0x44, 0x00, 0x4d, 0x01, 0x1a, 0x68, 0x20, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
    0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x73, 0x20, 0x65, 0x74, 0x63, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x72, 0x0a, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x0a,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x44, 0x08, 0x12, 0x0a, 0x8a, 0x01, 0x0a,
    0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x47, 0x02, 0x4b, 0x03, 0x1a, 0x7c, 0x20, 0x44, 0x69,
    0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x69, 0x6e,
    0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,
    0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62,
    0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x52, 0x65,
    0x64, 0x69, 0x73, 0x29, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04,
    0x00, 0x01, 0x12, 0x03, 0x47, 0x07, 0x0f, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x48, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x48, 0x04, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00,
    0x02, 0x12, 0x03, 0x48, 0x0b, 0x0c, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01,
    0x12, 0x03, 0x49, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x49, 0x04, 0x07, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x49, 0x0a, 0x0b, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x12,
    0x03, 0x4a, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x4a, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x4a, 0x0c, 0x0d, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x4c, 0x02,
    0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x4c, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x4c, 0x0b, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4c, 0x14, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x4c, 0x2c, 0x2d, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x4f, 0x00, 0x52, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x4f, 0x08,
    0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x50, 0x02, 0x10, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0x50, 0x02, 0x4f, 0x1c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x50, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x50, 0x07, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x50, 0x0e, 0x0f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12,
    0x03, 0x51, 0x02, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x04, 0x51,
    0x02, 0x50, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x51, 0x02,
    0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x51, 0x0d, 0x17, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x51, 0x1a, 0x1b, 0x0a, 0x0a, 0x0a,
    0x02, 0x04, 0x02, 0x12, 0x04, 0x54, 0x00, 0x57, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x54, 0x08, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x55,
    0x02, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0x55, 0x02, 0x54,
    0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12, 0x03, 0x55, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x55, 0x0b, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x55, 0x16, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x56, 0x02, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x04, 0x12, 0x04, 0x56, 0x02, 0x55, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x06,
    0x12, 0x03, 0x56, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x56, 0x0f, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x56, 0x1f,
    0x20, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x59, 0x00, 0x5b, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x59, 0x08, 0x1e, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x00, 0x12, 0x03, 0x5a, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x5a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06, 0x12, 0x03, 0x5a,
    0x0b, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5a, 0x1a, 0x2a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x5a, 0x2d, 0x2e, 0x0a, 0x0a,
    0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x5d, 0x00, 0x62, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04,
    0x01, 0x12, 0x03, 0x5d, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x04, 0x08, 0x00, 0x12, 0x04,
    0x5e, 0x02, 0x61, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x08, 0x00, 0x01, 0x12, 0x03, 0x5e,
    0x08, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x5f, 0x04, 0x30, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12, 0x03, 0x5f, 0x04, 0x16, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5f, 0x17, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x5f, 0x2e, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02,
    0x01, 0x12, 0x03, 0x60, 0x04, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x06, 0x12,
    0x03, 0x60, 0x04, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12, 0x03, 0x60,
    0x1b, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x03, 0x60, 0x36, 0x37,
    0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x04, 0x64, 0x00, 0x67, 0x01, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x05, 0x01, 0x12, 0x03, 0x64, 0x08, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00,
    0x12, 0x03, 0x65, 0x02, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x04,
    0x65, 0x02, 0x64, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x06, 0x12, 0x03, 0x65,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x65, 0x0b, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x03, 0x65, 0x16, 0x17, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x05, 0x02, 0x01, 0x12, 0x03, 0x66, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x01, 0x04, 0x12, 0x03, 0x66, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x01, 0x06, 0x12, 0x03, 0x66, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x66, 0x14, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x66, 0x20, 0x21, 0x0a, 0xa7, 0x02, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x04, 0x6d, 0x00, 0x71, 0x01,
    0x1a, 0x9a, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
    0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
    0x79, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74,
    0x0a, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
    0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2c,
    0x20, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x62,
    0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x45,
    0x6e, 0x76, 0x6f, 0x79, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x28, 0x6f,
    0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x44, 0x53, 0x29, 0x2e, 0x20,
    0x46, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x66,
    0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
    0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x61, 0x6d,
    0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
    0x75, 0x72, 0x65, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76,
    0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x45, 0x44, 0x53, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x06, 0x01, 0x12, 0x03, 0x6d, 0x08, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x06, 0x02,
    0x00, 0x12, 0x03, 0x6e, 0x02, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12,
    0x04, 0x6e, 0x02, 0x6d, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x05, 0x12, 0x03,
    0x6e, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x03, 0x6e, 0x09,
    0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x03, 0x6e, 0x18, 0x19, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x01, 0x12, 0x03, 0x6f, 0x02, 0x29, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x06, 0x02, 0x01, 0x04, 0x12, 0x03, 0x6f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06,
    0x02, 0x01, 0x06, 0x12, 0x03, 0x6f, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x6f, 0x17, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x6f, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x02, 0x12, 0x03, 0x70, 0x02,
    0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x04, 0x12, 0x03, 0x70, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x06, 0x12, 0x03, 0x70, 0x0b, 0x1c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x06, 0x02, 0x02, 0x01, 0x12, 0x03, 0x70, 0x1d, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x06, 0x02, 0x02, 0x03, 0x12, 0x03, 0x70, 0x29, 0x2a, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x07, 0x12,
    0x04, 0x73, 0x00, 0x77, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x07, 0x01, 0x12, 0x03, 0x73, 0x08,
    0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x00, 0x12, 0x03, 0x74, 0x02, 0x2f, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x04, 0x12, 0x03, 0x74, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x00, 0x06, 0x12, 0x03, 0x74, 0x0b, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x74, 0x1e, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x74, 0x2d, 0x2e, 0x0a, 0x27, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x01, 0x12, 0x03,
    0x76, 0x02, 0x28, 0x1a, 0x1a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
    0x74, 0x20, 0x69, 0x73, 0x20, 0x31, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12, 0x04, 0x76, 0x02, 0x74, 0x2f, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x06, 0x12, 0x03, 0x76, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x01, 0x01, 0x12, 0x03, 0x76, 0x1b, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x76, 0x26, 0x27, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
