// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheck {
    // message fields
    timeout: ::protobuf::SingularPtrField<super::duration::Duration>,
    interval: ::protobuf::SingularPtrField<super::duration::Duration>,
    interval_jitter: ::protobuf::SingularPtrField<super::duration::Duration>,
    unhealthy_threshold: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    healthy_threshold: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    alt_port: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    reuse_connection: ::protobuf::SingularPtrField<super::wrappers::BoolValue>,
    // message oneof groups
    health_checker: ::std::option::Option<HealthCheck_oneof_health_checker>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheck {}

#[derive(Clone,PartialEq)]
pub enum HealthCheck_oneof_health_checker {
    http_health_check(HealthCheck_HttpHealthCheck),
    tcp_health_check(HealthCheck_TcpHealthCheck),
}

impl HealthCheck {
    pub fn new() -> HealthCheck {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheck {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheck,
        };
        unsafe {
            instance.get(HealthCheck::new)
        }
    }

    // .google.protobuf.Duration timeout = 1;

    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: super::duration::Duration) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut super::duration::Duration {
        if self.timeout.is_none() {
            self.timeout.set_default();
        };
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> super::duration::Duration {
        self.timeout.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_timeout(&self) -> &super::duration::Duration {
        self.timeout.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_timeout_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.timeout
    }

    fn mut_timeout_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.timeout
    }

    // .google.protobuf.Duration interval = 2;

    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: super::duration::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut super::duration::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        };
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> super::duration::Duration {
        self.interval.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_interval(&self) -> &super::duration::Duration {
        self.interval.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_interval_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.interval
    }

    fn mut_interval_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.interval
    }

    // .google.protobuf.Duration interval_jitter = 3;

    pub fn clear_interval_jitter(&mut self) {
        self.interval_jitter.clear();
    }

    pub fn has_interval_jitter(&self) -> bool {
        self.interval_jitter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval_jitter(&mut self, v: super::duration::Duration) {
        self.interval_jitter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval_jitter(&mut self) -> &mut super::duration::Duration {
        if self.interval_jitter.is_none() {
            self.interval_jitter.set_default();
        };
        self.interval_jitter.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval_jitter(&mut self) -> super::duration::Duration {
        self.interval_jitter.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_interval_jitter(&self) -> &super::duration::Duration {
        self.interval_jitter.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_interval_jitter_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.interval_jitter
    }

    fn mut_interval_jitter_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.interval_jitter
    }

    // .google.protobuf.UInt32Value unhealthy_threshold = 4;

    pub fn clear_unhealthy_threshold(&mut self) {
        self.unhealthy_threshold.clear();
    }

    pub fn has_unhealthy_threshold(&self) -> bool {
        self.unhealthy_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unhealthy_threshold(&mut self, v: super::wrappers::UInt32Value) {
        self.unhealthy_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unhealthy_threshold(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.unhealthy_threshold.is_none() {
            self.unhealthy_threshold.set_default();
        };
        self.unhealthy_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_unhealthy_threshold(&mut self) -> super::wrappers::UInt32Value {
        self.unhealthy_threshold.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_unhealthy_threshold(&self) -> &super::wrappers::UInt32Value {
        self.unhealthy_threshold.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_unhealthy_threshold_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.unhealthy_threshold
    }

    fn mut_unhealthy_threshold_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.unhealthy_threshold
    }

    // .google.protobuf.UInt32Value healthy_threshold = 5;

    pub fn clear_healthy_threshold(&mut self) {
        self.healthy_threshold.clear();
    }

    pub fn has_healthy_threshold(&self) -> bool {
        self.healthy_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_healthy_threshold(&mut self, v: super::wrappers::UInt32Value) {
        self.healthy_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_healthy_threshold(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.healthy_threshold.is_none() {
            self.healthy_threshold.set_default();
        };
        self.healthy_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_healthy_threshold(&mut self) -> super::wrappers::UInt32Value {
        self.healthy_threshold.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_healthy_threshold(&self) -> &super::wrappers::UInt32Value {
        self.healthy_threshold.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_healthy_threshold_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.healthy_threshold
    }

    fn mut_healthy_threshold_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.healthy_threshold
    }

    // .google.protobuf.UInt32Value alt_port = 6;

    pub fn clear_alt_port(&mut self) {
        self.alt_port.clear();
    }

    pub fn has_alt_port(&self) -> bool {
        self.alt_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alt_port(&mut self, v: super::wrappers::UInt32Value) {
        self.alt_port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alt_port(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.alt_port.is_none() {
            self.alt_port.set_default();
        };
        self.alt_port.as_mut().unwrap()
    }

    // Take field
    pub fn take_alt_port(&mut self) -> super::wrappers::UInt32Value {
        self.alt_port.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_alt_port(&self) -> &super::wrappers::UInt32Value {
        self.alt_port.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_alt_port_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.alt_port
    }

    fn mut_alt_port_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.alt_port
    }

    // .google.protobuf.BoolValue reuse_connection = 7;

    pub fn clear_reuse_connection(&mut self) {
        self.reuse_connection.clear();
    }

    pub fn has_reuse_connection(&self) -> bool {
        self.reuse_connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reuse_connection(&mut self, v: super::wrappers::BoolValue) {
        self.reuse_connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reuse_connection(&mut self) -> &mut super::wrappers::BoolValue {
        if self.reuse_connection.is_none() {
            self.reuse_connection.set_default();
        };
        self.reuse_connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_reuse_connection(&mut self) -> super::wrappers::BoolValue {
        self.reuse_connection.take().unwrap_or_else(|| super::wrappers::BoolValue::new())
    }

    pub fn get_reuse_connection(&self) -> &super::wrappers::BoolValue {
        self.reuse_connection.as_ref().unwrap_or_else(|| super::wrappers::BoolValue::default_instance())
    }

    fn get_reuse_connection_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &self.reuse_connection
    }

    fn mut_reuse_connection_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &mut self.reuse_connection
    }

    // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;

    pub fn clear_http_health_check(&mut self) {
        self.health_checker = ::std::option::Option::None;
    }

    pub fn has_http_health_check(&self) -> bool {
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_health_check(&mut self, v: HealthCheck_HttpHealthCheck) {
        self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_health_check(&mut self) -> &mut HealthCheck_HttpHealthCheck {
        if let ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(_)) = self.health_checker {
        } else {
            self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(HealthCheck_HttpHealthCheck::new()));
        }
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_health_check(&mut self) -> HealthCheck_HttpHealthCheck {
        if self.has_http_health_check() {
            match self.health_checker.take() {
                ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(v)) => v,
                _ => panic!(),
            }
        } else {
            HealthCheck_HttpHealthCheck::new()
        }
    }

    pub fn get_http_health_check(&self) -> &HealthCheck_HttpHealthCheck {
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(ref v)) => v,
            _ => HealthCheck_HttpHealthCheck::default_instance(),
        }
    }

    // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;

    pub fn clear_tcp_health_check(&mut self) {
        self.health_checker = ::std::option::Option::None;
    }

    pub fn has_tcp_health_check(&self) -> bool {
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp_health_check(&mut self, v: HealthCheck_TcpHealthCheck) {
        self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_health_check(&mut self) -> &mut HealthCheck_TcpHealthCheck {
        if let ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(_)) = self.health_checker {
        } else {
            self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(HealthCheck_TcpHealthCheck::new()));
        }
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp_health_check(&mut self) -> HealthCheck_TcpHealthCheck {
        if self.has_tcp_health_check() {
            match self.health_checker.take() {
                ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(v)) => v,
                _ => panic!(),
            }
        } else {
            HealthCheck_TcpHealthCheck::new()
        }
    }

    pub fn get_tcp_health_check(&self) -> &HealthCheck_TcpHealthCheck {
        match self.health_checker {
            ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(ref v)) => v,
            _ => HealthCheck_TcpHealthCheck::default_instance(),
        }
    }
}

impl ::protobuf::Message for HealthCheck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval_jitter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.unhealthy_threshold)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.healthy_threshold)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alt_port)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reuse_connection)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::http_health_check(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.health_checker = ::std::option::Option::Some(HealthCheck_oneof_health_checker::tcp_health_check(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.interval_jitter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.unhealthy_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.healthy_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.alt_port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.reuse_connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.health_checker {
            match v {
                &HealthCheck_oneof_health_checker::http_health_check(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HealthCheck_oneof_health_checker::tcp_health_check(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timeout.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.interval_jitter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.unhealthy_threshold.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.healthy_threshold.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.alt_port.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.reuse_connection.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.health_checker {
            match v {
                &HealthCheck_oneof_health_checker::http_health_check(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HealthCheck_oneof_health_checker::tcp_health_check(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheck {
    fn new() -> HealthCheck {
        HealthCheck::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheck>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "timeout",
                    HealthCheck::get_timeout_for_reflect,
                    HealthCheck::mut_timeout_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "interval",
                    HealthCheck::get_interval_for_reflect,
                    HealthCheck::mut_interval_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "interval_jitter",
                    HealthCheck::get_interval_jitter_for_reflect,
                    HealthCheck::mut_interval_jitter_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "unhealthy_threshold",
                    HealthCheck::get_unhealthy_threshold_for_reflect,
                    HealthCheck::mut_unhealthy_threshold_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "healthy_threshold",
                    HealthCheck::get_healthy_threshold_for_reflect,
                    HealthCheck::mut_healthy_threshold_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "alt_port",
                    HealthCheck::get_alt_port_for_reflect,
                    HealthCheck::mut_alt_port_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::BoolValue>>(
                    "reuse_connection",
                    HealthCheck::get_reuse_connection_for_reflect,
                    HealthCheck::mut_reuse_connection_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HealthCheck_HttpHealthCheck>(
                    "http_health_check",
                    HealthCheck::has_http_health_check,
                    HealthCheck::get_http_health_check,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HealthCheck_TcpHealthCheck>(
                    "tcp_health_check",
                    HealthCheck::has_tcp_health_check,
                    HealthCheck::get_tcp_health_check,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheck>(
                    "HealthCheck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheck {
    fn clear(&mut self) {
        self.clear_timeout();
        self.clear_interval();
        self.clear_interval_jitter();
        self.clear_unhealthy_threshold();
        self.clear_healthy_threshold();
        self.clear_alt_port();
        self.clear_reuse_connection();
        self.clear_http_health_check();
        self.clear_tcp_health_check();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheck_Payload {
    // message oneof groups
    payload: ::std::option::Option<HealthCheck_Payload_oneof_payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheck_Payload {}

#[derive(Clone,PartialEq)]
pub enum HealthCheck_Payload_oneof_payload {
    text(::std::string::String),
    binary(::std::vec::Vec<u8>),
}

impl HealthCheck_Payload {
    pub fn new() -> HealthCheck_Payload {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheck_Payload {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheck_Payload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheck_Payload,
        };
        unsafe {
            instance.get(HealthCheck_Payload::new)
        }
    }

    // string text = 1;

    pub fn clear_text(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(::std::string::String::new()));
        }
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        if self.has_text() {
            match self.payload.take() {
                ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_text(&self) -> &str {
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(ref v)) => v,
            _ => "",
        }
    }

    // bytes binary = 2;

    pub fn clear_binary(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_binary(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(::std::vec::Vec::new()));
        }
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_binary() {
            match self.payload.take() {
                ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_binary(&self) -> &[u8] {
        match self.payload {
            ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for HealthCheck_Payload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::text(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.payload = ::std::option::Option::Some(HealthCheck_Payload_oneof_payload::binary(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &HealthCheck_Payload_oneof_payload::text(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &HealthCheck_Payload_oneof_payload::binary(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &HealthCheck_Payload_oneof_payload::text(ref v) => {
                    os.write_string(1, v)?;
                },
                &HealthCheck_Payload_oneof_payload::binary(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheck_Payload {
    fn new() -> HealthCheck_Payload {
        HealthCheck_Payload::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheck_Payload>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "text",
                    HealthCheck_Payload::has_text,
                    HealthCheck_Payload::get_text,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "binary",
                    HealthCheck_Payload::has_binary,
                    HealthCheck_Payload::get_binary,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheck_Payload>(
                    "HealthCheck_Payload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheck_Payload {
    fn clear(&mut self) {
        self.clear_text();
        self.clear_binary();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheck_Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheck_Payload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheck_HttpHealthCheck {
    // message fields
    pub host: ::std::string::String,
    pub path: ::std::string::String,
    send: ::protobuf::SingularPtrField<HealthCheck_Payload>,
    receive: ::protobuf::SingularPtrField<HealthCheck_Payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheck_HttpHealthCheck {}

impl HealthCheck_HttpHealthCheck {
    pub fn new() -> HealthCheck_HttpHealthCheck {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheck_HttpHealthCheck {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheck_HttpHealthCheck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheck_HttpHealthCheck,
        };
        unsafe {
            instance.get(HealthCheck_HttpHealthCheck::new)
        }
    }

    // string host = 1;

    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    pub fn get_host(&self) -> &str {
        &self.host
    }

    fn get_host_for_reflect(&self) -> &::std::string::String {
        &self.host
    }

    fn mut_host_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // string path = 2;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    fn get_path_for_reflect(&self) -> &::std::string::String {
        &self.path
    }

    fn mut_path_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // .envoy.api.v2.HealthCheck.Payload send = 3;

    pub fn clear_send(&mut self) {
        self.send.clear();
    }

    pub fn has_send(&self) -> bool {
        self.send.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send(&mut self, v: HealthCheck_Payload) {
        self.send = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_send(&mut self) -> &mut HealthCheck_Payload {
        if self.send.is_none() {
            self.send.set_default();
        };
        self.send.as_mut().unwrap()
    }

    // Take field
    pub fn take_send(&mut self) -> HealthCheck_Payload {
        self.send.take().unwrap_or_else(|| HealthCheck_Payload::new())
    }

    pub fn get_send(&self) -> &HealthCheck_Payload {
        self.send.as_ref().unwrap_or_else(|| HealthCheck_Payload::default_instance())
    }

    fn get_send_for_reflect(&self) -> &::protobuf::SingularPtrField<HealthCheck_Payload> {
        &self.send
    }

    fn mut_send_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<HealthCheck_Payload> {
        &mut self.send
    }

    // .envoy.api.v2.HealthCheck.Payload receive = 4;

    pub fn clear_receive(&mut self) {
        self.receive.clear();
    }

    pub fn has_receive(&self) -> bool {
        self.receive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receive(&mut self, v: HealthCheck_Payload) {
        self.receive = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receive(&mut self) -> &mut HealthCheck_Payload {
        if self.receive.is_none() {
            self.receive.set_default();
        };
        self.receive.as_mut().unwrap()
    }

    // Take field
    pub fn take_receive(&mut self) -> HealthCheck_Payload {
        self.receive.take().unwrap_or_else(|| HealthCheck_Payload::new())
    }

    pub fn get_receive(&self) -> &HealthCheck_Payload {
        self.receive.as_ref().unwrap_or_else(|| HealthCheck_Payload::default_instance())
    }

    fn get_receive_for_reflect(&self) -> &::protobuf::SingularPtrField<HealthCheck_Payload> {
        &self.receive
    }

    fn mut_receive_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<HealthCheck_Payload> {
        &mut self.receive
    }
}

impl ::protobuf::Message for HealthCheck_HttpHealthCheck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.send)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receive)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        };
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        };
        if let Some(v) = self.send.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.receive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        };
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        };
        if let Some(v) = self.send.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.receive.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheck_HttpHealthCheck {
    fn new() -> HealthCheck_HttpHealthCheck {
        HealthCheck_HttpHealthCheck::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheck_HttpHealthCheck>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    HealthCheck_HttpHealthCheck::get_host_for_reflect,
                    HealthCheck_HttpHealthCheck::mut_host_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    HealthCheck_HttpHealthCheck::get_path_for_reflect,
                    HealthCheck_HttpHealthCheck::mut_path_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HealthCheck_Payload>>(
                    "send",
                    HealthCheck_HttpHealthCheck::get_send_for_reflect,
                    HealthCheck_HttpHealthCheck::mut_send_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HealthCheck_Payload>>(
                    "receive",
                    HealthCheck_HttpHealthCheck::get_receive_for_reflect,
                    HealthCheck_HttpHealthCheck::mut_receive_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheck_HttpHealthCheck>(
                    "HealthCheck_HttpHealthCheck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheck_HttpHealthCheck {
    fn clear(&mut self) {
        self.clear_host();
        self.clear_path();
        self.clear_send();
        self.clear_receive();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheck_HttpHealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheck_HttpHealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheck_TcpHealthCheck {
    // message fields
    send: ::protobuf::SingularPtrField<HealthCheck_Payload>,
    receive: ::protobuf::SingularPtrField<HealthCheck_Payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for HealthCheck_TcpHealthCheck {}

impl HealthCheck_TcpHealthCheck {
    pub fn new() -> HealthCheck_TcpHealthCheck {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static HealthCheck_TcpHealthCheck {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheck_TcpHealthCheck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheck_TcpHealthCheck,
        };
        unsafe {
            instance.get(HealthCheck_TcpHealthCheck::new)
        }
    }

    // .envoy.api.v2.HealthCheck.Payload send = 1;

    pub fn clear_send(&mut self) {
        self.send.clear();
    }

    pub fn has_send(&self) -> bool {
        self.send.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send(&mut self, v: HealthCheck_Payload) {
        self.send = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_send(&mut self) -> &mut HealthCheck_Payload {
        if self.send.is_none() {
            self.send.set_default();
        };
        self.send.as_mut().unwrap()
    }

    // Take field
    pub fn take_send(&mut self) -> HealthCheck_Payload {
        self.send.take().unwrap_or_else(|| HealthCheck_Payload::new())
    }

    pub fn get_send(&self) -> &HealthCheck_Payload {
        self.send.as_ref().unwrap_or_else(|| HealthCheck_Payload::default_instance())
    }

    fn get_send_for_reflect(&self) -> &::protobuf::SingularPtrField<HealthCheck_Payload> {
        &self.send
    }

    fn mut_send_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<HealthCheck_Payload> {
        &mut self.send
    }

    // .envoy.api.v2.HealthCheck.Payload receive = 2;

    pub fn clear_receive(&mut self) {
        self.receive.clear();
    }

    pub fn has_receive(&self) -> bool {
        self.receive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receive(&mut self, v: HealthCheck_Payload) {
        self.receive = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receive(&mut self) -> &mut HealthCheck_Payload {
        if self.receive.is_none() {
            self.receive.set_default();
        };
        self.receive.as_mut().unwrap()
    }

    // Take field
    pub fn take_receive(&mut self) -> HealthCheck_Payload {
        self.receive.take().unwrap_or_else(|| HealthCheck_Payload::new())
    }

    pub fn get_receive(&self) -> &HealthCheck_Payload {
        self.receive.as_ref().unwrap_or_else(|| HealthCheck_Payload::default_instance())
    }

    fn get_receive_for_reflect(&self) -> &::protobuf::SingularPtrField<HealthCheck_Payload> {
        &self.receive
    }

    fn mut_receive_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<HealthCheck_Payload> {
        &mut self.receive
    }
}

impl ::protobuf::Message for HealthCheck_TcpHealthCheck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.send)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receive)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.send.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.receive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.send.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.receive.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for HealthCheck_TcpHealthCheck {
    fn new() -> HealthCheck_TcpHealthCheck {
        HealthCheck_TcpHealthCheck::new()
    }

    fn descriptor_static(_: ::std::option::Option<HealthCheck_TcpHealthCheck>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HealthCheck_Payload>>(
                    "send",
                    HealthCheck_TcpHealthCheck::get_send_for_reflect,
                    HealthCheck_TcpHealthCheck::mut_send_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HealthCheck_Payload>>(
                    "receive",
                    HealthCheck_TcpHealthCheck::get_receive_for_reflect,
                    HealthCheck_TcpHealthCheck::mut_receive_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheck_TcpHealthCheck>(
                    "HealthCheck_TcpHealthCheck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for HealthCheck_TcpHealthCheck {
    fn clear(&mut self) {
        self.clear_send();
        self.clear_receive();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheck_TcpHealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheck_TcpHealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HealthStatus {
    UNKNOWN = 0,
    HEALTHY = 1,
    UNHEALTHY = 2,
    DRAINING = 3,
    TIMEOUT = 4,
}

impl ::protobuf::ProtobufEnum for HealthStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HealthStatus> {
        match value {
            0 => ::std::option::Option::Some(HealthStatus::UNKNOWN),
            1 => ::std::option::Option::Some(HealthStatus::HEALTHY),
            2 => ::std::option::Option::Some(HealthStatus::UNHEALTHY),
            3 => ::std::option::Option::Some(HealthStatus::DRAINING),
            4 => ::std::option::Option::Some(HealthStatus::TIMEOUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HealthStatus] = &[
            HealthStatus::UNKNOWN,
            HealthStatus::HEALTHY,
            HealthStatus::UNHEALTHY,
            HealthStatus::DRAINING,
            HealthStatus::TIMEOUT,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<HealthStatus>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("HealthStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for HealthStatus {
}

impl ::std::default::Default for HealthStatus {
    fn default() -> Self {
        HealthStatus::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
    0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x08, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
    0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69,
    0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
    0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
    0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6a,
    0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
    0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c,
    0x74, 0x68, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x52, 0x12, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65,
    0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
    0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
    0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
    0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
    0x12, 0x37, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x52, 0x07, 0x61, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x75,
    0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
    0x0f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x12, 0x57, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e,
    0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x10, 0x74, 0x63, 0x70,
    0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54,
    0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52,
    0x0e, 0x74, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a,
    0x44, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65,
    0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
    0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
    0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
    0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xad, 0x01, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
    0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
    0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
    0x68, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
    0x61, 0x64, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65,
    0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
    0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x72, 0x65,
    0x63, 0x65, 0x69, 0x76, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x48, 0x65, 0x61,
    0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
    0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12,
    0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
    0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6c,
    0x6f, 0x61, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x10, 0x0a, 0x0e,
    0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2a, 0x52,
    0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
    0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48,
    0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45,
    0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x41, 0x49, 0x4e,
    0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
    0x10, 0x04, 0x4a, 0x86, 0x1a, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x49, 0x01, 0x0a, 0x08, 0x0a,
    0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x08,
    0x14, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x07, 0x27, 0x0a, 0x09, 0x0a, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x05, 0x07, 0x27, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x07,
    0x00, 0x3a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x07, 0x08, 0x13, 0x0a,
    0x8f, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0a, 0x02, 0x27, 0x1a, 0x81, 0x01,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x61, 0x69,
    0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63,
    0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x49,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x68, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d,
    0x70, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x0a, 0x02, 0x07, 0x15,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0a, 0x02, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0a, 0x1b, 0x22, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0a, 0x25, 0x26, 0x0a, 0x32, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x01, 0x12, 0x03, 0x0c, 0x02, 0x28, 0x1a, 0x25, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e,
    0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x68,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x0c, 0x02, 0x0a, 0x27, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x0c, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0c, 0x1b, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x0c, 0x26, 0x27, 0x0a, 0x94, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x0f, 0x02, 0x2f, 0x1a, 0x86, 0x01, 0x20, 0x41, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6d, 0x6f, 0x75,
    0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
    0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c,
    0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x0a, 0x20, 0x69,
    0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x20, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x74, 0x65,
    0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x04, 0x0f, 0x02, 0x0c, 0x28, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x0f, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x1b, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x03, 0x12, 0x03, 0x0f, 0x2d, 0x2e, 0x0a, 0xee, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03,
    0x12, 0x03, 0x14, 0x02, 0x36, 0x1a, 0xe0, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
    0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61,
    0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x0a,
    0x20, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x68,
    0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x69,
    0x66, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
    0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x35, 0x30, 0x33, 0x0a, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x69, 0x67,
    0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f,
    0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64,
    0x20, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x69, 0x6d, 0x6d, 0x65, 0x64,
    0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x04, 0x12, 0x04, 0x14, 0x02, 0x0f, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06,
    0x12, 0x03, 0x14, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x14, 0x1e, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x14, 0x34,
    0x35, 0x0a, 0xc3, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x18, 0x02, 0x34, 0x1a,
    0xb5, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
    0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x0a, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
    0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x75, 0x72, 0x69,
    0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
    0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
    0x73, 0x66, 0x75, 0x6c, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74,
    0x6f, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x68, 0x65,
    0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04,
    0x12, 0x04, 0x18, 0x02, 0x14, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x06, 0x12,
    0x03, 0x18, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x18,
    0x1e, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x18, 0x32, 0x33,
    0x0a, 0x34, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x1b, 0x02, 0x2b, 0x1a, 0x27, 0x20,
    0x4e, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x72, 0x74,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12,
    0x04, 0x1b, 0x02, 0x18, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x06, 0x12, 0x03,
    0x1b, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x1b, 0x1e,
    0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x1b, 0x29, 0x2a, 0x0a,
    0x54, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x1d, 0x02, 0x31, 0x1a, 0x47, 0x20, 0x52,
    0x65, 0x75, 0x73, 0x65, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74,
    0x77, 0x65, 0x65, 0x6e, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74,
    0x72, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x04, 0x12, 0x04,
    0x1d, 0x02, 0x1b, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x06, 0x12, 0x03, 0x1d,
    0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x1d, 0x1c, 0x2c,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03, 0x12, 0x03, 0x1d, 0x2f, 0x30, 0x0a, 0x4a,
    0x0a, 0x04, 0x04, 0x00, 0x03, 0x00, 0x12, 0x04, 0x20, 0x02, 0x25, 0x03, 0x1a, 0x3c, 0x20, 0x44,
    0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x63,
    0x6f, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x79,
    0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x03, 0x00, 0x01, 0x12, 0x03, 0x20, 0x0a, 0x11, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00,
    0x08, 0x00, 0x12, 0x04, 0x21, 0x04, 0x24, 0x05, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00,
    0x08, 0x00, 0x01, 0x12, 0x03, 0x21, 0x0a, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x22, 0x06, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x00, 0x05, 0x12, 0x03, 0x22, 0x06, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x22, 0x0d, 0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x22, 0x14, 0x15, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x23, 0x06, 0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x23, 0x06, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x23, 0x0c, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x23, 0x15, 0x16, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x01, 0x12, 0x04,
    0x26, 0x02, 0x30, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x01, 0x01, 0x12, 0x03, 0x26,
    0x0a, 0x19, 0x0a, 0xb9, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x12, 0x03, 0x2a,
    0x04, 0x14, 0x1a, 0xa9, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x68, 0x65, 0x61, 0x64,
    0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20,
    0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x0a, 0x20, 0x65,
    0x6d, 0x70, 0x74, 0x79, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x29, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x50, 0x20, 0x6f, 0x6e, 0x20,
    0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20,
    0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0x2a, 0x04, 0x26, 0x1b, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x2a, 0x04, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2a, 0x0b, 0x0f, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x2a, 0x12, 0x13, 0x0a,
    0xa4, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x01, 0x02, 0x01, 0x12, 0x03, 0x2d, 0x04, 0x14, 0x1a,
    0x94, 0x01, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
    0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x69, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x68, 0x74, 0x74,
    0x70, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x70, 0x61, 0x74, 0x68, 0x0a, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20,
    0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
    0x68, 0x65, 0x63, 0x6b, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x01,
    0x04, 0x12, 0x04, 0x2d, 0x04, 0x2a, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x2d, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x2d, 0x0b, 0x0f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x2d, 0x12, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x02, 0x12, 0x03, 0x2e, 0x04, 0x15, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x02,
    0x04, 0x12, 0x04, 0x2e, 0x04, 0x2d, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x02, 0x06, 0x12, 0x03, 0x2e, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x2e, 0x0c, 0x10, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x02, 0x03, 0x12, 0x03, 0x2e, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x03, 0x12, 0x03, 0x2f, 0x04, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x03,
    0x04, 0x12, 0x04, 0x2f, 0x04, 0x2e, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x03, 0x06, 0x12, 0x03, 0x2f, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x2f, 0x0c, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02,
    0x03, 0x03, 0x12, 0x03, 0x2f, 0x16, 0x17, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x02, 0x12,
    0x04, 0x31, 0x02, 0x35, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x02, 0x01, 0x12, 0x03,
    0x31, 0x0a, 0x18, 0x0a, 0x42, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x12, 0x03, 0x33,
    0x04, 0x15, 0x1a, 0x33, 0x20, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f,
    0x61, 0x64, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
    0x65, 0x63, 0x74, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02,
    0x00, 0x04, 0x12, 0x04, 0x33, 0x04, 0x31, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x00, 0x06, 0x12, 0x03, 0x33, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x33, 0x0c, 0x10, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x33, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x34, 0x04, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02,
    0x01, 0x04, 0x12, 0x04, 0x34, 0x04, 0x33, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x01, 0x06, 0x12, 0x03, 0x34, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x34, 0x0c, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x34, 0x16, 0x17, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00,
    0x12, 0x04, 0x36, 0x02, 0x39, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12,
    0x03, 0x36, 0x08, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x37, 0x04,
    0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x06, 0x12, 0x03, 0x37, 0x04, 0x13, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x37, 0x14, 0x25, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x07, 0x03, 0x12, 0x03, 0x37, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x08, 0x12, 0x03, 0x38, 0x04, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08,
    0x06, 0x12, 0x03, 0x38, 0x04, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x01, 0x12,
    0x03, 0x38, 0x13, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x03, 0x12, 0x03, 0x38,
    0x26, 0x27, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x3c, 0x00, 0x49, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x3c, 0x05, 0x11, 0x0a, 0x3d, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x3e, 0x02, 0x0e, 0x1a, 0x30, 0x20, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
    0x4e, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72, 0x65, 0x61,
    0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x61, 0x73, 0x20,
    0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x3e, 0x02, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x3e, 0x0c, 0x0d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x3f,
    0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x3f, 0x02, 0x09,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x3f, 0x0c, 0x0d, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x40, 0x02, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x40, 0x02, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x02, 0x02, 0x12, 0x03, 0x40, 0x0e, 0x0f, 0x0a, 0xed, 0x01, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x03,
    0x12, 0x03, 0x45, 0x02, 0x0f, 0x1a, 0xdf, 0x01, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
    0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2d, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70,
    0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x63,
    0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65, 0x6c, 0x62,
    0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x72, 0x61, 0x69,
    0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74,
    0x61, 0x6e, 0x63, 0x65, 0x73, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x2f, 0x0a, 0x20, 0x61,
    0x6e, 0x64, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
    0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
    0x70, 0x75, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62,
    0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e,
    0x67, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x72, 0x61,
    0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x45, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03,
    0x45, 0x0d, 0x0e, 0x0a, 0x89, 0x01, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x04, 0x12, 0x03, 0x48, 0x02,
    0x0e, 0x1a, 0x7c, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x48, 0x44, 0x53, 0x20, 0x52, 0x65,
    0x6d, 0x6f, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x46, 0x72, 0x6f,
    0x6d, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x70, 0x65, 0x72, 0x73,
    0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x0a, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
    0x20, 0x3d, 0x20, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x20, 0x69, 0x6e, 0x20,
    0x63, 0x61, 0x73, 0x65, 0x20, 0x45, 0x44, 0x53, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
    0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x48, 0x02, 0x09, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x48, 0x0c, 0x0d, 0x62, 0x06, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
