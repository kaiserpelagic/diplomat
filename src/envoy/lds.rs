// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ListenerDiscoveryRequest {
    // message fields
    node: ::protobuf::SingularPtrField<super::base::Node>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ListenerDiscoveryRequest {}

impl ListenerDiscoveryRequest {
    pub fn new() -> ListenerDiscoveryRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ListenerDiscoveryRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListenerDiscoveryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListenerDiscoveryRequest,
        };
        unsafe {
            instance.get(ListenerDiscoveryRequest::new)
        }
    }

    // .envoy.api.v2.Node node = 1;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        };
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| super::base::Node::default_instance())
    }

    fn get_node_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Node> {
        &self.node
    }

    fn mut_node_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Node> {
        &mut self.node
    }
}

impl ::protobuf::Message for ListenerDiscoveryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ListenerDiscoveryRequest {
    fn new() -> ListenerDiscoveryRequest {
        ListenerDiscoveryRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<ListenerDiscoveryRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                    "node",
                    ListenerDiscoveryRequest::get_node_for_reflect,
                    ListenerDiscoveryRequest::mut_node_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListenerDiscoveryRequest>(
                    "ListenerDiscoveryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ListenerDiscoveryRequest {
    fn clear(&mut self) {
        self.clear_node();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerDiscoveryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerDiscoveryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListenerDiscoverResponse {
    // message fields
    listeners: ::protobuf::RepeatedField<Listener>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ListenerDiscoverResponse {}

impl ListenerDiscoverResponse {
    pub fn new() -> ListenerDiscoverResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ListenerDiscoverResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListenerDiscoverResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListenerDiscoverResponse,
        };
        unsafe {
            instance.get(ListenerDiscoverResponse::new)
        }
    }

    // repeated .envoy.api.v2.Listener listeners = 1;

    pub fn clear_listeners(&mut self) {
        self.listeners.clear();
    }

    // Param is passed by value, moved
    pub fn set_listeners(&mut self, v: ::protobuf::RepeatedField<Listener>) {
        self.listeners = v;
    }

    // Mutable pointer to the field.
    pub fn mut_listeners(&mut self) -> &mut ::protobuf::RepeatedField<Listener> {
        &mut self.listeners
    }

    // Take field
    pub fn take_listeners(&mut self) -> ::protobuf::RepeatedField<Listener> {
        ::std::mem::replace(&mut self.listeners, ::protobuf::RepeatedField::new())
    }

    pub fn get_listeners(&self) -> &[Listener] {
        &self.listeners
    }

    fn get_listeners_for_reflect(&self) -> &::protobuf::RepeatedField<Listener> {
        &self.listeners
    }

    fn mut_listeners_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Listener> {
        &mut self.listeners
    }
}

impl ::protobuf::Message for ListenerDiscoverResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.listeners)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.listeners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.listeners {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ListenerDiscoverResponse {
    fn new() -> ListenerDiscoverResponse {
        ListenerDiscoverResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<ListenerDiscoverResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Listener>>(
                    "listeners",
                    ListenerDiscoverResponse::get_listeners_for_reflect,
                    ListenerDiscoverResponse::mut_listeners_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListenerDiscoverResponse>(
                    "ListenerDiscoverResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ListenerDiscoverResponse {
    fn clear(&mut self) {
        self.clear_listeners();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerDiscoverResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerDiscoverResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Filter {
    // message fields
    pub field_type: Filter_Type,
    pub name: ::std::string::String,
    config: ::protobuf::SingularPtrField<super::struct_pb::Struct>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Filter {}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Filter {
        static mut instance: ::protobuf::lazy::Lazy<Filter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Filter,
        };
        unsafe {
            instance.get(Filter::new)
        }
    }

    // .envoy.api.v2.Filter.Type type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = Filter_Type::BOTH;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Filter_Type) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> Filter_Type {
        self.field_type
    }

    fn get_field_type_for_reflect(&self) -> &Filter_Type {
        &self.field_type
    }

    fn mut_field_type_for_reflect(&mut self) -> &mut Filter_Type {
        &mut self.field_type
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    fn get_name_for_reflect(&self) -> &::std::string::String {
        &self.name
    }

    fn mut_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // .google.protobuf.Struct config = 3;

    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::struct_pb::Struct) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::struct_pb::Struct {
        if self.config.is_none() {
            self.config.set_default();
        };
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::struct_pb::Struct {
        self.config.take().unwrap_or_else(|| super::struct_pb::Struct::new())
    }

    pub fn get_config(&self) -> &super::struct_pb::Struct {
        self.config.as_ref().unwrap_or_else(|| super::struct_pb::Struct::default_instance())
    }

    fn get_config_for_reflect(&self) -> &::protobuf::SingularPtrField<super::struct_pb::Struct> {
        &self.config
    }

    fn mut_config_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::struct_pb::Struct> {
        &mut self.config
    }
}

impl ::protobuf::Message for Filter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.field_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Filter_Type::BOTH {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        };
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        };
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Filter_Type::BOTH {
            os.write_enum(1, self.field_type.value())?;
        };
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        };
        if let Some(v) = self.config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Filter {
    fn new() -> Filter {
        Filter::new()
    }

    fn descriptor_static(_: ::std::option::Option<Filter>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Filter_Type>>(
                    "type",
                    Filter::get_field_type_for_reflect,
                    Filter::mut_field_type_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    Filter::get_name_for_reflect,
                    Filter::mut_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::struct_pb::Struct>>(
                    "config",
                    Filter::get_config_for_reflect,
                    Filter::mut_config_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Filter>(
                    "Filter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Filter {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_name();
        self.clear_config();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Filter_Type {
    BOTH = 0,
    READ = 1,
    WRITE = 2,
}

impl ::protobuf::ProtobufEnum for Filter_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Filter_Type> {
        match value {
            0 => ::std::option::Option::Some(Filter_Type::BOTH),
            1 => ::std::option::Option::Some(Filter_Type::READ),
            2 => ::std::option::Option::Some(Filter_Type::WRITE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Filter_Type] = &[
            Filter_Type::BOTH,
            Filter_Type::READ,
            Filter_Type::WRITE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Filter_Type>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Filter_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Filter_Type {
}

impl ::std::default::Default for Filter_Type {
    fn default() -> Self {
        Filter_Type::BOTH
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterChainMatch {
    // message fields
    sni_domains: ::protobuf::RepeatedField<::std::string::String>,
    prefix_ranges: ::protobuf::RepeatedField<FilterChainMatch_CidrRange>,
    pub address_suffix: ::std::string::String,
    suffix_len: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    source_prefix_ranges: ::protobuf::RepeatedField<FilterChainMatch_CidrRange>,
    source_ports: ::protobuf::RepeatedField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for FilterChainMatch {}

impl FilterChainMatch {
    pub fn new() -> FilterChainMatch {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static FilterChainMatch {
        static mut instance: ::protobuf::lazy::Lazy<FilterChainMatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FilterChainMatch,
        };
        unsafe {
            instance.get(FilterChainMatch::new)
        }
    }

    // repeated string sni_domains = 1;

    pub fn clear_sni_domains(&mut self) {
        self.sni_domains.clear();
    }

    // Param is passed by value, moved
    pub fn set_sni_domains(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.sni_domains = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sni_domains(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sni_domains
    }

    // Take field
    pub fn take_sni_domains(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.sni_domains, ::protobuf::RepeatedField::new())
    }

    pub fn get_sni_domains(&self) -> &[::std::string::String] {
        &self.sni_domains
    }

    fn get_sni_domains_for_reflect(&self) -> &::protobuf::RepeatedField<::std::string::String> {
        &self.sni_domains
    }

    fn mut_sni_domains_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sni_domains
    }

    // repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;

    pub fn clear_prefix_ranges(&mut self) {
        self.prefix_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix_ranges(&mut self, v: ::protobuf::RepeatedField<FilterChainMatch_CidrRange>) {
        self.prefix_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_prefix_ranges(&mut self) -> &mut ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &mut self.prefix_ranges
    }

    // Take field
    pub fn take_prefix_ranges(&mut self) -> ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        ::std::mem::replace(&mut self.prefix_ranges, ::protobuf::RepeatedField::new())
    }

    pub fn get_prefix_ranges(&self) -> &[FilterChainMatch_CidrRange] {
        &self.prefix_ranges
    }

    fn get_prefix_ranges_for_reflect(&self) -> &::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &self.prefix_ranges
    }

    fn mut_prefix_ranges_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &mut self.prefix_ranges
    }

    // string address_suffix = 4;

    pub fn clear_address_suffix(&mut self) {
        self.address_suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_suffix(&mut self, v: ::std::string::String) {
        self.address_suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.address_suffix
    }

    // Take field
    pub fn take_address_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address_suffix, ::std::string::String::new())
    }

    pub fn get_address_suffix(&self) -> &str {
        &self.address_suffix
    }

    fn get_address_suffix_for_reflect(&self) -> &::std::string::String {
        &self.address_suffix
    }

    fn mut_address_suffix_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.address_suffix
    }

    // .google.protobuf.UInt32Value suffix_len = 5;

    pub fn clear_suffix_len(&mut self) {
        self.suffix_len.clear();
    }

    pub fn has_suffix_len(&self) -> bool {
        self.suffix_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix_len(&mut self, v: super::wrappers::UInt32Value) {
        self.suffix_len = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix_len(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.suffix_len.is_none() {
            self.suffix_len.set_default();
        };
        self.suffix_len.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix_len(&mut self) -> super::wrappers::UInt32Value {
        self.suffix_len.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_suffix_len(&self) -> &super::wrappers::UInt32Value {
        self.suffix_len.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_suffix_len_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.suffix_len
    }

    fn mut_suffix_len_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.suffix_len
    }

    // repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;

    pub fn clear_source_prefix_ranges(&mut self) {
        self.source_prefix_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_prefix_ranges(&mut self, v: ::protobuf::RepeatedField<FilterChainMatch_CidrRange>) {
        self.source_prefix_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_prefix_ranges(&mut self) -> &mut ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &mut self.source_prefix_ranges
    }

    // Take field
    pub fn take_source_prefix_ranges(&mut self) -> ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        ::std::mem::replace(&mut self.source_prefix_ranges, ::protobuf::RepeatedField::new())
    }

    pub fn get_source_prefix_ranges(&self) -> &[FilterChainMatch_CidrRange] {
        &self.source_prefix_ranges
    }

    fn get_source_prefix_ranges_for_reflect(&self) -> &::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &self.source_prefix_ranges
    }

    fn mut_source_prefix_ranges_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<FilterChainMatch_CidrRange> {
        &mut self.source_prefix_ranges
    }

    // repeated .google.protobuf.UInt32Value source_ports = 7;

    pub fn clear_source_ports(&mut self) {
        self.source_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_ports(&mut self, v: ::protobuf::RepeatedField<super::wrappers::UInt32Value>) {
        self.source_ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_ports(&mut self) -> &mut ::protobuf::RepeatedField<super::wrappers::UInt32Value> {
        &mut self.source_ports
    }

    // Take field
    pub fn take_source_ports(&mut self) -> ::protobuf::RepeatedField<super::wrappers::UInt32Value> {
        ::std::mem::replace(&mut self.source_ports, ::protobuf::RepeatedField::new())
    }

    pub fn get_source_ports(&self) -> &[super::wrappers::UInt32Value] {
        &self.source_ports
    }

    fn get_source_ports_for_reflect(&self) -> &::protobuf::RepeatedField<super::wrappers::UInt32Value> {
        &self.source_ports
    }

    fn mut_source_ports_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::wrappers::UInt32Value> {
        &mut self.source_ports
    }
}

impl ::protobuf::Message for FilterChainMatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.sni_domains)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.prefix_ranges)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address_suffix)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.suffix_len)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.source_prefix_ranges)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.source_ports)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sni_domains {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.prefix_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.address_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address_suffix);
        };
        if let Some(v) = self.suffix_len.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.source_prefix_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.source_ports {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sni_domains {
            os.write_string(1, &v)?;
        };
        for v in &self.prefix_ranges {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.address_suffix.is_empty() {
            os.write_string(4, &self.address_suffix)?;
        };
        if let Some(v) = self.suffix_len.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.source_prefix_ranges {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.source_ports {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for FilterChainMatch {
    fn new() -> FilterChainMatch {
        FilterChainMatch::new()
    }

    fn descriptor_static(_: ::std::option::Option<FilterChainMatch>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sni_domains",
                    FilterChainMatch::get_sni_domains_for_reflect,
                    FilterChainMatch::mut_sni_domains_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FilterChainMatch_CidrRange>>(
                    "prefix_ranges",
                    FilterChainMatch::get_prefix_ranges_for_reflect,
                    FilterChainMatch::mut_prefix_ranges_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address_suffix",
                    FilterChainMatch::get_address_suffix_for_reflect,
                    FilterChainMatch::mut_address_suffix_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "suffix_len",
                    FilterChainMatch::get_suffix_len_for_reflect,
                    FilterChainMatch::mut_suffix_len_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FilterChainMatch_CidrRange>>(
                    "source_prefix_ranges",
                    FilterChainMatch::get_source_prefix_ranges_for_reflect,
                    FilterChainMatch::mut_source_prefix_ranges_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "source_ports",
                    FilterChainMatch::get_source_ports_for_reflect,
                    FilterChainMatch::mut_source_ports_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FilterChainMatch>(
                    "FilterChainMatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for FilterChainMatch {
    fn clear(&mut self) {
        self.clear_sni_domains();
        self.clear_prefix_ranges();
        self.clear_address_suffix();
        self.clear_suffix_len();
        self.clear_source_prefix_ranges();
        self.clear_source_ports();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterChainMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChainMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterChainMatch_CidrRange {
    // message fields
    pub address_prefix: ::std::string::String,
    prefix_len: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for FilterChainMatch_CidrRange {}

impl FilterChainMatch_CidrRange {
    pub fn new() -> FilterChainMatch_CidrRange {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static FilterChainMatch_CidrRange {
        static mut instance: ::protobuf::lazy::Lazy<FilterChainMatch_CidrRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FilterChainMatch_CidrRange,
        };
        unsafe {
            instance.get(FilterChainMatch_CidrRange::new)
        }
    }

    // string address_prefix = 1;

    pub fn clear_address_prefix(&mut self) {
        self.address_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_prefix(&mut self, v: ::std::string::String) {
        self.address_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.address_prefix
    }

    // Take field
    pub fn take_address_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address_prefix, ::std::string::String::new())
    }

    pub fn get_address_prefix(&self) -> &str {
        &self.address_prefix
    }

    fn get_address_prefix_for_reflect(&self) -> &::std::string::String {
        &self.address_prefix
    }

    fn mut_address_prefix_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.address_prefix
    }

    // .google.protobuf.UInt32Value prefix_len = 2;

    pub fn clear_prefix_len(&mut self) {
        self.prefix_len.clear();
    }

    pub fn has_prefix_len(&self) -> bool {
        self.prefix_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix_len(&mut self, v: super::wrappers::UInt32Value) {
        self.prefix_len = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix_len(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.prefix_len.is_none() {
            self.prefix_len.set_default();
        };
        self.prefix_len.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix_len(&mut self) -> super::wrappers::UInt32Value {
        self.prefix_len.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_prefix_len(&self) -> &super::wrappers::UInt32Value {
        self.prefix_len.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_prefix_len_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.prefix_len
    }

    fn mut_prefix_len_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.prefix_len
    }
}

impl ::protobuf::Message for FilterChainMatch_CidrRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address_prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prefix_len)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address_prefix);
        };
        if let Some(v) = self.prefix_len.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address_prefix.is_empty() {
            os.write_string(1, &self.address_prefix)?;
        };
        if let Some(v) = self.prefix_len.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for FilterChainMatch_CidrRange {
    fn new() -> FilterChainMatch_CidrRange {
        FilterChainMatch_CidrRange::new()
    }

    fn descriptor_static(_: ::std::option::Option<FilterChainMatch_CidrRange>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address_prefix",
                    FilterChainMatch_CidrRange::get_address_prefix_for_reflect,
                    FilterChainMatch_CidrRange::mut_address_prefix_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "prefix_len",
                    FilterChainMatch_CidrRange::get_prefix_len_for_reflect,
                    FilterChainMatch_CidrRange::mut_prefix_len_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FilterChainMatch_CidrRange>(
                    "FilterChainMatch_CidrRange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for FilterChainMatch_CidrRange {
    fn clear(&mut self) {
        self.clear_address_prefix();
        self.clear_prefix_len();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterChainMatch_CidrRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChainMatch_CidrRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterChain {
    // message fields
    filter_chain_match: ::protobuf::SingularPtrField<FilterChainMatch>,
    tls_context: ::protobuf::SingularPtrField<super::tls_context::DownstreamTlsContext>,
    filter_chain: ::protobuf::RepeatedField<Filter>,
    use_proxy_proto: ::protobuf::SingularPtrField<super::wrappers::BoolValue>,
    metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for FilterChain {}

impl FilterChain {
    pub fn new() -> FilterChain {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static FilterChain {
        static mut instance: ::protobuf::lazy::Lazy<FilterChain> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FilterChain,
        };
        unsafe {
            instance.get(FilterChain::new)
        }
    }

    // .envoy.api.v2.FilterChainMatch filter_chain_match = 1;

    pub fn clear_filter_chain_match(&mut self) {
        self.filter_chain_match.clear();
    }

    pub fn has_filter_chain_match(&self) -> bool {
        self.filter_chain_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter_chain_match(&mut self, v: FilterChainMatch) {
        self.filter_chain_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter_chain_match(&mut self) -> &mut FilterChainMatch {
        if self.filter_chain_match.is_none() {
            self.filter_chain_match.set_default();
        };
        self.filter_chain_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter_chain_match(&mut self) -> FilterChainMatch {
        self.filter_chain_match.take().unwrap_or_else(|| FilterChainMatch::new())
    }

    pub fn get_filter_chain_match(&self) -> &FilterChainMatch {
        self.filter_chain_match.as_ref().unwrap_or_else(|| FilterChainMatch::default_instance())
    }

    fn get_filter_chain_match_for_reflect(&self) -> &::protobuf::SingularPtrField<FilterChainMatch> {
        &self.filter_chain_match
    }

    fn mut_filter_chain_match_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<FilterChainMatch> {
        &mut self.filter_chain_match
    }

    // .envoy.api.v2.DownstreamTlsContext tls_context = 2;

    pub fn clear_tls_context(&mut self) {
        self.tls_context.clear();
    }

    pub fn has_tls_context(&self) -> bool {
        self.tls_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_context(&mut self, v: super::tls_context::DownstreamTlsContext) {
        self.tls_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_context(&mut self) -> &mut super::tls_context::DownstreamTlsContext {
        if self.tls_context.is_none() {
            self.tls_context.set_default();
        };
        self.tls_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_context(&mut self) -> super::tls_context::DownstreamTlsContext {
        self.tls_context.take().unwrap_or_else(|| super::tls_context::DownstreamTlsContext::new())
    }

    pub fn get_tls_context(&self) -> &super::tls_context::DownstreamTlsContext {
        self.tls_context.as_ref().unwrap_or_else(|| super::tls_context::DownstreamTlsContext::default_instance())
    }

    fn get_tls_context_for_reflect(&self) -> &::protobuf::SingularPtrField<super::tls_context::DownstreamTlsContext> {
        &self.tls_context
    }

    fn mut_tls_context_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::tls_context::DownstreamTlsContext> {
        &mut self.tls_context
    }

    // repeated .envoy.api.v2.Filter filter_chain = 3;

    pub fn clear_filter_chain(&mut self) {
        self.filter_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter_chain(&mut self, v: ::protobuf::RepeatedField<Filter>) {
        self.filter_chain = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filter_chain(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filter_chain
    }

    // Take field
    pub fn take_filter_chain(&mut self) -> ::protobuf::RepeatedField<Filter> {
        ::std::mem::replace(&mut self.filter_chain, ::protobuf::RepeatedField::new())
    }

    pub fn get_filter_chain(&self) -> &[Filter] {
        &self.filter_chain
    }

    fn get_filter_chain_for_reflect(&self) -> &::protobuf::RepeatedField<Filter> {
        &self.filter_chain
    }

    fn mut_filter_chain_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filter_chain
    }

    // .google.protobuf.BoolValue use_proxy_proto = 4;

    pub fn clear_use_proxy_proto(&mut self) {
        self.use_proxy_proto.clear();
    }

    pub fn has_use_proxy_proto(&self) -> bool {
        self.use_proxy_proto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_proxy_proto(&mut self, v: super::wrappers::BoolValue) {
        self.use_proxy_proto = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_use_proxy_proto(&mut self) -> &mut super::wrappers::BoolValue {
        if self.use_proxy_proto.is_none() {
            self.use_proxy_proto.set_default();
        };
        self.use_proxy_proto.as_mut().unwrap()
    }

    // Take field
    pub fn take_use_proxy_proto(&mut self) -> super::wrappers::BoolValue {
        self.use_proxy_proto.take().unwrap_or_else(|| super::wrappers::BoolValue::new())
    }

    pub fn get_use_proxy_proto(&self) -> &super::wrappers::BoolValue {
        self.use_proxy_proto.as_ref().unwrap_or_else(|| super::wrappers::BoolValue::default_instance())
    }

    fn get_use_proxy_proto_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &self.use_proxy_proto
    }

    fn mut_use_proxy_proto_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &mut self.use_proxy_proto
    }

    // .envoy.api.v2.Metadata metadata = 5;

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        };
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| super::base::Metadata::default_instance())
    }

    fn get_metadata_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Metadata> {
        &self.metadata
    }

    fn mut_metadata_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Metadata> {
        &mut self.metadata
    }
}

impl ::protobuf::Message for FilterChain {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter_chain_match)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_context)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filter_chain)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.use_proxy_proto)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.filter_chain_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.tls_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.filter_chain {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.use_proxy_proto.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.filter_chain_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.tls_context.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.filter_chain {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.use_proxy_proto.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.metadata.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for FilterChain {
    fn new() -> FilterChain {
        FilterChain::new()
    }

    fn descriptor_static(_: ::std::option::Option<FilterChain>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FilterChainMatch>>(
                    "filter_chain_match",
                    FilterChain::get_filter_chain_match_for_reflect,
                    FilterChain::mut_filter_chain_match_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tls_context::DownstreamTlsContext>>(
                    "tls_context",
                    FilterChain::get_tls_context_for_reflect,
                    FilterChain::mut_tls_context_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                    "filter_chain",
                    FilterChain::get_filter_chain_for_reflect,
                    FilterChain::mut_filter_chain_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::BoolValue>>(
                    "use_proxy_proto",
                    FilterChain::get_use_proxy_proto_for_reflect,
                    FilterChain::mut_use_proxy_proto_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                    "metadata",
                    FilterChain::get_metadata_for_reflect,
                    FilterChain::mut_metadata_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FilterChain>(
                    "FilterChain",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for FilterChain {
    fn clear(&mut self) {
        self.clear_filter_chain_match();
        self.clear_tls_context();
        self.clear_filter_chain();
        self.clear_use_proxy_proto();
        self.clear_metadata();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterChain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChain {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listener {
    // message fields
    address: ::protobuf::SingularPtrField<super::address::UnresolvedAddress>,
    filter_chains: ::protobuf::RepeatedField<FilterChain>,
    use_original_dst: ::protobuf::SingularPtrField<super::wrappers::BoolValue>,
    per_connection_buffer_limit_bytes: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Listener {}

impl Listener {
    pub fn new() -> Listener {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Listener {
        static mut instance: ::protobuf::lazy::Lazy<Listener> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Listener,
        };
        unsafe {
            instance.get(Listener::new)
        }
    }

    // .envoy.api.v2.UnresolvedAddress address = 1;

    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::UnresolvedAddress) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::UnresolvedAddress {
        if self.address.is_none() {
            self.address.set_default();
        };
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::UnresolvedAddress {
        self.address.take().unwrap_or_else(|| super::address::UnresolvedAddress::new())
    }

    pub fn get_address(&self) -> &super::address::UnresolvedAddress {
        self.address.as_ref().unwrap_or_else(|| super::address::UnresolvedAddress::default_instance())
    }

    fn get_address_for_reflect(&self) -> &::protobuf::SingularPtrField<super::address::UnresolvedAddress> {
        &self.address
    }

    fn mut_address_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::address::UnresolvedAddress> {
        &mut self.address
    }

    // repeated .envoy.api.v2.FilterChain filter_chains = 2;

    pub fn clear_filter_chains(&mut self) {
        self.filter_chains.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter_chains(&mut self, v: ::protobuf::RepeatedField<FilterChain>) {
        self.filter_chains = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filter_chains(&mut self) -> &mut ::protobuf::RepeatedField<FilterChain> {
        &mut self.filter_chains
    }

    // Take field
    pub fn take_filter_chains(&mut self) -> ::protobuf::RepeatedField<FilterChain> {
        ::std::mem::replace(&mut self.filter_chains, ::protobuf::RepeatedField::new())
    }

    pub fn get_filter_chains(&self) -> &[FilterChain] {
        &self.filter_chains
    }

    fn get_filter_chains_for_reflect(&self) -> &::protobuf::RepeatedField<FilterChain> {
        &self.filter_chains
    }

    fn mut_filter_chains_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<FilterChain> {
        &mut self.filter_chains
    }

    // .google.protobuf.BoolValue use_original_dst = 3;

    pub fn clear_use_original_dst(&mut self) {
        self.use_original_dst.clear();
    }

    pub fn has_use_original_dst(&self) -> bool {
        self.use_original_dst.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_original_dst(&mut self, v: super::wrappers::BoolValue) {
        self.use_original_dst = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_use_original_dst(&mut self) -> &mut super::wrappers::BoolValue {
        if self.use_original_dst.is_none() {
            self.use_original_dst.set_default();
        };
        self.use_original_dst.as_mut().unwrap()
    }

    // Take field
    pub fn take_use_original_dst(&mut self) -> super::wrappers::BoolValue {
        self.use_original_dst.take().unwrap_or_else(|| super::wrappers::BoolValue::new())
    }

    pub fn get_use_original_dst(&self) -> &super::wrappers::BoolValue {
        self.use_original_dst.as_ref().unwrap_or_else(|| super::wrappers::BoolValue::default_instance())
    }

    fn get_use_original_dst_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &self.use_original_dst
    }

    fn mut_use_original_dst_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &mut self.use_original_dst
    }

    // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;

    pub fn clear_per_connection_buffer_limit_bytes(&mut self) {
        self.per_connection_buffer_limit_bytes.clear();
    }

    pub fn has_per_connection_buffer_limit_bytes(&self) -> bool {
        self.per_connection_buffer_limit_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_connection_buffer_limit_bytes(&mut self, v: super::wrappers::UInt32Value) {
        self.per_connection_buffer_limit_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_connection_buffer_limit_bytes(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.per_connection_buffer_limit_bytes.is_none() {
            self.per_connection_buffer_limit_bytes.set_default();
        };
        self.per_connection_buffer_limit_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_connection_buffer_limit_bytes(&mut self) -> super::wrappers::UInt32Value {
        self.per_connection_buffer_limit_bytes.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_per_connection_buffer_limit_bytes(&self) -> &super::wrappers::UInt32Value {
        self.per_connection_buffer_limit_bytes.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_per_connection_buffer_limit_bytes_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.per_connection_buffer_limit_bytes
    }

    fn mut_per_connection_buffer_limit_bytes_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.per_connection_buffer_limit_bytes
    }

    // .envoy.api.v2.Metadata metadata = 5;

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        };
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| super::base::Metadata::default_instance())
    }

    fn get_metadata_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Metadata> {
        &self.metadata
    }

    fn mut_metadata_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Metadata> {
        &mut self.metadata
    }
}

impl ::protobuf::Message for Listener {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filter_chains)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.use_original_dst)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_connection_buffer_limit_bytes)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.filter_chains {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.use_original_dst.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.per_connection_buffer_limit_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.filter_chains {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.use_original_dst.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.per_connection_buffer_limit_bytes.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.metadata.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Listener {
    fn new() -> Listener {
        Listener::new()
    }

    fn descriptor_static(_: ::std::option::Option<Listener>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::UnresolvedAddress>>(
                    "address",
                    Listener::get_address_for_reflect,
                    Listener::mut_address_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FilterChain>>(
                    "filter_chains",
                    Listener::get_filter_chains_for_reflect,
                    Listener::mut_filter_chains_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::BoolValue>>(
                    "use_original_dst",
                    Listener::get_use_original_dst_for_reflect,
                    Listener::mut_use_original_dst_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "per_connection_buffer_limit_bytes",
                    Listener::get_per_connection_buffer_limit_bytes_for_reflect,
                    Listener::mut_per_connection_buffer_limit_bytes_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                    "metadata",
                    Listener::get_metadata_for_reflect,
                    Listener::mut_metadata_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Listener>(
                    "Listener",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Listener {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_filter_chains();
        self.clear_use_original_dst();
        self.clear_per_connection_buffer_limit_bytes();
        self.clear_metadata();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x11, 0x61,
    0x70, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
    0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
    0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x44,
    0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
    0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64,
    0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
    0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09,
    0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x06, 0x46, 0x69,
    0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
    0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
    0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45,
    0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x22,
    0xf4, 0x03, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
    0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x69, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
    0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x69, 0x44, 0x6f,
    0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
    0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74,
    0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x69, 0x64,
    0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x61,
    0x6e, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
    0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
    0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3b, 0x0a, 0x0a, 0x73,
    0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
    0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
    0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72,
    0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
    0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
    0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
    0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x61,
    0x6e, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
    0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
    0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x6f, 0x0a, 0x09, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e,
    0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
    0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72,
    0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x65,
    0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
    0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65,
    0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65,
    0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74,
    0x63, 0x68, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
    0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
    0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
    0x65, 0x61, 0x6d, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x74,
    0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
    0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x14, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
    0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
    0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
    0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
    0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
    0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
    0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x02, 0x0a, 0x08, 0x4c,
    0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
    0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
    0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
    0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
    0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
    0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
    0x68, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
    0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
    0x61, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
    0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x69,
    0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f,
    0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
    0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
    0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
    0x64, 0x61, 0x74, 0x61, 0x32, 0x88, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
    0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
    0x65, 0x12, 0x65, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
    0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
    0x65, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x74,
    0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6e,
    0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
    0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
    0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
    0x72, 0x79, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x4a,
    0xe7, 0x30, 0x0a, 0x07, 0x12, 0x05, 0x04, 0x00, 0x90, 0x01, 0x01, 0x0a, 0xaf, 0x01, 0x0a, 0x01,
    0x0c, 0x12, 0x03, 0x04, 0x00, 0x12, 0x32, 0xa4, 0x01, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
    0x73, 0x20, 0x68, 0x65, 0x61, 0x76, 0x69, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
    0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
    0x6c, 0x79, 0x66, 0x74, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
    0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
    0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x32, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x41, 0x50,
    0x49, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x61, 0x72,
    0x65, 0x20, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5b, 0x56,
    0x32, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x44, 0x49, 0x46, 0x46, 0x5d, 0x2e, 0x0a, 0x0a, 0x08, 0x0a,
    0x01, 0x02, 0x12, 0x03, 0x06, 0x08, 0x14, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x08,
    0x07, 0x1a, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x09, 0x07, 0x17, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x0a, 0x07, 0x1e, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x0c, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x03, 0x0d, 0x07, 0x25, 0x0a, 0x09,
    0x0a, 0x02, 0x03, 0x05, 0x12, 0x03, 0x0e, 0x07, 0x27, 0x0a, 0xa5, 0x02, 0x0a, 0x02, 0x06, 0x00,
    0x12, 0x04, 0x14, 0x00, 0x1f, 0x01, 0x1a, 0x98, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x45, 0x6e,
    0x76, 0x6f, 0x79, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x69,
    0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x52, 0x50, 0x43, 0x20, 0x61, 0x74,
    0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x63,
    0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x0a, 0x20,
    0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
    0x20, 0x76, 0x69, 0x61, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x66,
    0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x44, 0x53, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x75, 0x70,
    0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74,
    0x65, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20,
    0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x62, 0x65, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x64, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f,
    0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e,
    0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x06, 0x00, 0x01, 0x12, 0x03, 0x14, 0x08, 0x20, 0x0a, 0x0c, 0x0a,
    0x04, 0x06, 0x00, 0x02, 0x00, 0x12, 0x04, 0x15, 0x02, 0x16, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x06,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15, 0x06, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x00, 0x02, 0x12, 0x03, 0x15, 0x16, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x06,
    0x12, 0x03, 0x16, 0x07, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x16, 0x0e, 0x26, 0x0a, 0x0c, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01, 0x12, 0x04, 0x18, 0x02, 0x1e,
    0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x18, 0x06, 0x14, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x18, 0x15, 0x2d, 0x0a, 0x0c, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x19, 0x0f, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x06,
    0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x1a, 0x04, 0x1d, 0x06, 0x0a, 0x10, 0x0a, 0x08, 0x06, 0x00,
    0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x04, 0x1a, 0x04, 0x1d, 0x06, 0x0a, 0x10, 0x0a, 0x09,
    0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x1a, 0x0b, 0x1c, 0x0a, 0x11,
    0x0a, 0x0a, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1a, 0x0b,
    0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x1a, 0x0c, 0x1b, 0x0a, 0x11, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07,
    0x00, 0x08, 0x12, 0x04, 0x1a, 0x1f, 0x1d, 0x05, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04,
    0x21, 0x00, 0x23, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x21, 0x08, 0x20,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x22, 0x02, 0x10, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x22, 0x02, 0x21, 0x22, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x22, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x22, 0x07, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x22, 0x0e, 0x0f, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x25, 0x00,
    0x27, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x25, 0x08, 0x20, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x26, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x26, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x00, 0x06, 0x12, 0x03, 0x26, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x26, 0x14, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x26, 0x20, 0x21, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x29, 0x00, 0x39, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x29, 0x08, 0x0e, 0x0a, 0xf3, 0x01, 0x0a, 0x04,
    0x04, 0x02, 0x04, 0x00, 0x12, 0x04, 0x2d, 0x02, 0x31, 0x03, 0x1a, 0xe4, 0x01, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x2e,
    0x20, 0x4d, 0x6f, 0x73, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6d,
    0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x63, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x0a, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
    0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63,
    0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
    0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x69, 0x74, 0x0a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6d,
    0x6f, 0x64, 0x65, 0x73, 0x2e, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20,
    0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2c, 0x20,
    0x77, 0x72, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x04, 0x00, 0x01, 0x12, 0x03, 0x2d, 0x07, 0x0b, 0x0a,
    0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x2e, 0x04, 0x0d, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2e, 0x04, 0x08, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x2e, 0x0b, 0x0c, 0x0a, 0x0d,
    0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x2f, 0x04, 0x0d, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2f, 0x04, 0x08, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2f, 0x0b, 0x0c, 0x0a, 0x0d, 0x0a,
    0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x30, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x30, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x30, 0x0c, 0x0d, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x32, 0x02, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x04, 0x12, 0x04, 0x32, 0x02, 0x31, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00,
    0x06, 0x12, 0x03, 0x32, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x32, 0x07, 0x0b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x32,
    0x0e, 0x0f, 0x0a, 0x5e, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x35, 0x02, 0x12, 0x1a,
    0x51, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x73, 0x74,
    0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
    0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x20, 0x73,
    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x04, 0x35, 0x02, 0x32,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x05, 0x12, 0x03, 0x35, 0x02, 0x08, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x35, 0x09, 0x0d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x35, 0x10, 0x11, 0x0a, 0x93, 0x01, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x38, 0x02, 0x24, 0x1a, 0x85, 0x01, 0x20, 0x46, 0x69, 0x6c,
    0x74, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
    0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x69, 0x6e,
    0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x66, 0x69,
    0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
    0x72, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x04, 0x38, 0x02, 0x35, 0x12,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x38, 0x02, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x38, 0x19, 0x1f, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x38, 0x22, 0x23, 0x0a, 0x6f, 0x0a, 0x02, 0x04, 0x03,
    0x12, 0x04, 0x3d, 0x00, 0x59, 0x01, 0x1a, 0x63, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x63, 0x72, 0x69,
    0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x66,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x61, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x5b, 0x56, 0x32, 0x2d,
    0x41, 0x50, 0x49, 0x2d, 0x44, 0x49, 0x46, 0x46, 0x5d, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x03, 0x01, 0x12, 0x03, 0x3d, 0x08, 0x18, 0x0a, 0x6d, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12,
    0x03, 0x40, 0x02, 0x22, 0x1a, 0x60, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d,
    0x70, 0x74, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x49, 0x20, 0x64, 0x6f, 0x6d,
    0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
    0x2e, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20,
    0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2c,
    0x0a, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x2a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
    0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x40,
    0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x40, 0x12, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x40, 0x20, 0x21, 0x0a, 0xa2,
    0x01, 0x0a, 0x04, 0x04, 0x03, 0x03, 0x00, 0x12, 0x04, 0x44, 0x02, 0x47, 0x03, 0x1a, 0x93, 0x01,
    0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x61,
    0x6e, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x74,
    0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
    0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74,
    0x65, 0x6e, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2f, 0x3a, 0x3a, 0x20, 0x6f, 0x72, 0x20, 0x77,
    0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
    0x5f, 0x64, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x03, 0x00, 0x01, 0x12, 0x03, 0x44, 0x0a,
    0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x45, 0x04, 0x1e,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x45, 0x04, 0x44,
    0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x45, 0x04,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x45, 0x0b,
    0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x45, 0x1c,
    0x1d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x46, 0x04, 0x2f,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x46, 0x04, 0x45,
    0x1e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x46, 0x04,
    0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x46, 0x20,
    0x2a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x46, 0x2d,
    0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x03, 0x48, 0x02, 0x27, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x03, 0x48, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x03, 0x48, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x48, 0x15, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x48, 0x25, 0x26, 0x0a, 0xa1, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12,
    0x03, 0x4c, 0x02, 0x1c, 0x1a, 0x93, 0x01, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x65,
    0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72,
    0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x6c,
    0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61,
    0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x62,
    0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2f,
    0x3a, 0x3a, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x5f, 0x6f,
    0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x02, 0x04, 0x12, 0x04, 0x4c, 0x02, 0x48, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x02, 0x05, 0x12, 0x03, 0x4c, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x4c, 0x09, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12, 0x03,
    0x4c, 0x1a, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x03, 0x12, 0x03, 0x4d, 0x02, 0x2d,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x04, 0x12, 0x04, 0x4d, 0x02, 0x4c, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x06, 0x12, 0x03, 0x4d, 0x02, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x03, 0x01, 0x12, 0x03, 0x4d, 0x1e, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x03, 0x03, 0x12, 0x03, 0x4d, 0x2b, 0x2c, 0x0a, 0xf3, 0x01, 0x0a, 0x04, 0x04, 0x03,
    0x02, 0x04, 0x12, 0x03, 0x53, 0x02, 0x2e, 0x1a, 0xe5, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63,
    0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x69, 0x73, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73,
    0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72,
    0x63, 0x65, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a,
    0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63,
    0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x6c,
    0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
    0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x65, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
    0x74, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
    0x73, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x04, 0x12, 0x03, 0x53, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x04, 0x06, 0x12, 0x03, 0x53, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x04, 0x01, 0x12, 0x03, 0x53, 0x15, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x04, 0x03, 0x12, 0x03, 0x53, 0x2c, 0x2d, 0x0a, 0xcf, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x05,
    0x12, 0x03, 0x58, 0x02, 0x38, 0x1a, 0xc1, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x72, 0x69,
    0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x69, 0x73, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
    0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77,
    0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
    0x20, 0x69, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
    0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20,
    0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x05, 0x04, 0x12, 0x03, 0x58, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x06,
    0x12, 0x03, 0x58, 0x0b, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x01, 0x12, 0x03,
    0x58, 0x27, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x03, 0x12, 0x03, 0x58, 0x36,
    0x37, 0x0a, 0x7b, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x5d, 0x00, 0x70, 0x01, 0x1a, 0x6f, 0x20,
    0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x46, 0x69, 0x6c, 0x74,
    0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x63, 0x72, 0x69,
    0x74, 0x65, 0x72, 0x69, 0x61, 0x2c, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
    0x6d, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63,
    0x68, 0x61, 0x69, 0x6e, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
    0x64, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03, 0x5d, 0x08, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04,
    0x02, 0x00, 0x12, 0x03, 0x5e, 0x02, 0x2a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04,
    0x12, 0x04, 0x5e, 0x02, 0x5d, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x5e, 0x02, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5e,
    0x13, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x5e, 0x28, 0x29,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x01, 0x12, 0x03, 0x5f, 0x02, 0x27, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x04, 0x5f, 0x02, 0x5e, 0x2a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x01, 0x06, 0x12, 0x03, 0x5f, 0x02, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x5f, 0x17, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x5f, 0x25, 0x26, 0x0a, 0xa3, 0x02, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x02, 0x12,
    0x03, 0x64, 0x02, 0x23, 0x1a, 0x95, 0x02, 0x20, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
    0x66, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x6e, 0x65, 0x74,
    0x77, 0x6f, 0x72, 0x6b, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x75, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
    0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20,
    0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61,
    0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72,
    0x20, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x70, 0x72, 0x6f,
    0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61,
    0x6c, 0x6c, 0x79, 0x20, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x2e,
    0x20, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x65,
    0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20,
    0x62, 0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x03, 0x64, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x02, 0x06, 0x12, 0x03, 0x64, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x64, 0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12,
    0x03, 0x64, 0x21, 0x22, 0x0a, 0xa3, 0x03, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x03, 0x12, 0x03, 0x6c,
    0x02, 0x30, 0x1a, 0x95, 0x03, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
    0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x20, 0x61, 0x20, 0x50, 0x52, 0x4f, 0x58, 0x59,
    0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x56, 0x31, 0x20, 0x68, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x77, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
    0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
    0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x61,
    0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6f, 0x6e, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x53, 0x6f, 0x6d,
    0x65, 0x0a, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
    0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x41, 0x57, 0x53, 0x20, 0x45, 0x4c, 0x42, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x61,
    0x62, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20,
    0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x77, 0x69, 0x6c,
    0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
    0x61, 0x6c, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
    0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x03, 0x04, 0x12, 0x04, 0x6c, 0x02, 0x64, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x03, 0x06, 0x12, 0x03, 0x6c, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x6c, 0x1c, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x6c, 0x2e, 0x2f, 0x0a, 0x2d, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x04, 0x12, 0x03, 0x6f, 0x02, 0x18,
    0x1a, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
    0x64, 0x61, 0x74, 0x61, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x04, 0x12, 0x04, 0x6f, 0x02, 0x6c,
    0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x06, 0x12, 0x03, 0x6f, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x01, 0x12, 0x03, 0x6f, 0x0b, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x04, 0x03, 0x12, 0x03, 0x6f, 0x16, 0x17, 0x0a, 0x0b, 0x0a, 0x02, 0x04,
    0x05, 0x12, 0x05, 0x72, 0x00, 0x90, 0x01, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12,
    0x03, 0x72, 0x08, 0x10, 0x0a, 0x3e, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00, 0x12, 0x03, 0x74, 0x02,
    0x20, 0x1a, 0x31, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
    0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x20,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x04, 0x74,
    0x02, 0x72, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x06, 0x12, 0x03, 0x74, 0x02,
    0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x74, 0x14, 0x1b, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x03, 0x74, 0x1e, 0x1f, 0x0a, 0xcf, 0x05,
    0x0a, 0x04, 0x04, 0x05, 0x02, 0x01, 0x12, 0x04, 0x82, 0x01, 0x02, 0x29, 0x1a, 0xc0, 0x05, 0x20,
    0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x64, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x73,
    0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65,
    0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x46,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20,
    0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x20, 0x54, 0x68, 0x65, 0x0a, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
    0x20, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
    0x73, 0x3a, 0x0a, 0x20, 0x31, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x53, 0x4e, 0x49, 0x20, 0x69, 0x6e,
    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
    0x74, 0x68, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68,
    0x61, 0x69, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x53, 0x4e, 0x49, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
    0x65, 0x72, 0x65, 0x64, 0x2e, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2c,
    0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6e, 0x6f, 0x20, 0x53,
    0x4e, 0x49, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x32, 0x2e, 0x20, 0x4f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
    0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x31, 0x2c, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x65, 0x66,
    0x69, 0x78, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x69, 0x73,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73,
    0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e,
    0x65, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x72,
    0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x72, 0x65, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x20, 0x74, 0x69, 0x65, 0x2e,
    0x0a, 0x20, 0x33, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
    0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69,
    0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x65,
    0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
    0x68, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x32,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x04, 0x12, 0x04, 0x82, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x06, 0x12, 0x04, 0x82, 0x01, 0x0b, 0x16, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x04, 0x82, 0x01, 0x17, 0x24, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x01, 0x03, 0x12, 0x04, 0x82, 0x01, 0x27, 0x28, 0x0a, 0xaa, 0x02, 0x0a, 0x04,
    0x04, 0x05, 0x02, 0x02, 0x12, 0x04, 0x88, 0x01, 0x02, 0x31, 0x1a, 0x9b, 0x02, 0x20, 0x49, 0x66,
    0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73,
    0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e,
    0x67, 0x20, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
    0x73, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69,
    0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e,
    0x0a, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x73,
    0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69,
    0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x63,
    0x68, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02,
    0x04, 0x12, 0x06, 0x88, 0x01, 0x02, 0x82, 0x01, 0x29, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x02, 0x06, 0x12, 0x04, 0x88, 0x01, 0x02, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02,
    0x01, 0x12, 0x04, 0x88, 0x01, 0x1c, 0x2c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x03,
    0x12, 0x04, 0x88, 0x01, 0x2f, 0x30, 0x0a, 0xa4, 0x01, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x03, 0x12,
    0x04, 0x8c, 0x01, 0x02, 0x44, 0x1a, 0x95, 0x01, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x20, 0x6c, 0x69,
    0x6d, 0x69, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0xe2, 0x80, 0x99, 0x73, 0x20,
    0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
    0x65, 0x61, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x62, 0x75,
    0x66, 0x66, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65,
    0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
    0x64, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70,
    0x6c, 0x69, 0x65, 0x64, 0x20, 0x28, 0x31, 0x4d, 0x69, 0x42, 0x29, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x03, 0x04, 0x12, 0x06, 0x8c, 0x01, 0x02, 0x88, 0x01, 0x31, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x06, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x1d, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x03, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x1e, 0x3f, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x03, 0x03, 0x12, 0x04, 0x8c, 0x01, 0x42, 0x43, 0x0a, 0x2e, 0x0a, 0x04, 0x04,
    0x05, 0x02, 0x04, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x18, 0x1a, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x64, 0x65,
    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x04, 0x04, 0x12, 0x06, 0x8f, 0x01, 0x02, 0x8c, 0x01, 0x44, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x04, 0x06, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x04, 0x01, 0x12, 0x04, 0x8f, 0x01, 0x0b, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x04, 0x03, 0x12, 0x04, 0x8f, 0x01, 0x16, 0x17, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
