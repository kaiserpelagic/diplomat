// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct EndpointDiscoveryRequest {
    // message fields
    cluster_name: ::protobuf::RepeatedField<::std::string::String>,
    node: ::protobuf::SingularPtrField<super::base::Node>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EndpointDiscoveryRequest {}

impl EndpointDiscoveryRequest {
    pub fn new() -> EndpointDiscoveryRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EndpointDiscoveryRequest {
        static mut instance: ::protobuf::lazy::Lazy<EndpointDiscoveryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointDiscoveryRequest,
        };
        unsafe {
            instance.get(EndpointDiscoveryRequest::new)
        }
    }

    // repeated string cluster_name = 1;

    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_name(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cluster_name, ::protobuf::RepeatedField::new())
    }

    pub fn get_cluster_name(&self) -> &[::std::string::String] {
        &self.cluster_name
    }

    fn get_cluster_name_for_reflect(&self) -> &::protobuf::RepeatedField<::std::string::String> {
        &self.cluster_name
    }

    fn mut_cluster_name_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cluster_name
    }

    // .envoy.api.v2.Node node = 2;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        };
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| super::base::Node::default_instance())
    }

    fn get_node_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Node> {
        &self.node
    }

    fn mut_node_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Node> {
        &mut self.node
    }
}

impl ::protobuf::Message for EndpointDiscoveryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cluster_name {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cluster_name {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.node.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EndpointDiscoveryRequest {
    fn new() -> EndpointDiscoveryRequest {
        EndpointDiscoveryRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<EndpointDiscoveryRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cluster_name",
                    EndpointDiscoveryRequest::get_cluster_name_for_reflect,
                    EndpointDiscoveryRequest::mut_cluster_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                    "node",
                    EndpointDiscoveryRequest::get_node_for_reflect,
                    EndpointDiscoveryRequest::mut_node_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointDiscoveryRequest>(
                    "EndpointDiscoveryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EndpointDiscoveryRequest {
    fn clear(&mut self) {
        self.clear_cluster_name();
        self.clear_node();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointDiscoveryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointDiscoveryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LbEndpoint {
    // message fields
    endpoint: ::protobuf::SingularPtrField<super::base::Endpoint>,
    pub health_status: super::health_check::HealthStatus,
    canary: ::protobuf::SingularPtrField<super::wrappers::BoolValue>,
    load_balancing_weight: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LbEndpoint {}

impl LbEndpoint {
    pub fn new() -> LbEndpoint {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LbEndpoint {
        static mut instance: ::protobuf::lazy::Lazy<LbEndpoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LbEndpoint,
        };
        unsafe {
            instance.get(LbEndpoint::new)
        }
    }

    // .envoy.api.v2.Endpoint endpoint = 1;

    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    pub fn has_endpoint(&self) -> bool {
        self.endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: super::base::Endpoint) {
        self.endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut super::base::Endpoint {
        if self.endpoint.is_none() {
            self.endpoint.set_default();
        };
        self.endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_endpoint(&mut self) -> super::base::Endpoint {
        self.endpoint.take().unwrap_or_else(|| super::base::Endpoint::new())
    }

    pub fn get_endpoint(&self) -> &super::base::Endpoint {
        self.endpoint.as_ref().unwrap_or_else(|| super::base::Endpoint::default_instance())
    }

    fn get_endpoint_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Endpoint> {
        &self.endpoint
    }

    fn mut_endpoint_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Endpoint> {
        &mut self.endpoint
    }

    // .envoy.api.v2.HealthStatus health_status = 2;

    pub fn clear_health_status(&mut self) {
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: super::health_check::HealthStatus) {
        self.health_status = v;
    }

    pub fn get_health_status(&self) -> super::health_check::HealthStatus {
        self.health_status
    }

    fn get_health_status_for_reflect(&self) -> &super::health_check::HealthStatus {
        &self.health_status
    }

    fn mut_health_status_for_reflect(&mut self) -> &mut super::health_check::HealthStatus {
        &mut self.health_status
    }

    // .google.protobuf.BoolValue canary = 3;

    pub fn clear_canary(&mut self) {
        self.canary.clear();
    }

    pub fn has_canary(&self) -> bool {
        self.canary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_canary(&mut self, v: super::wrappers::BoolValue) {
        self.canary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_canary(&mut self) -> &mut super::wrappers::BoolValue {
        if self.canary.is_none() {
            self.canary.set_default();
        };
        self.canary.as_mut().unwrap()
    }

    // Take field
    pub fn take_canary(&mut self) -> super::wrappers::BoolValue {
        self.canary.take().unwrap_or_else(|| super::wrappers::BoolValue::new())
    }

    pub fn get_canary(&self) -> &super::wrappers::BoolValue {
        self.canary.as_ref().unwrap_or_else(|| super::wrappers::BoolValue::default_instance())
    }

    fn get_canary_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &self.canary
    }

    fn mut_canary_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::BoolValue> {
        &mut self.canary
    }

    // .google.protobuf.UInt32Value load_balancing_weight = 4;

    pub fn clear_load_balancing_weight(&mut self) {
        self.load_balancing_weight.clear();
    }

    pub fn has_load_balancing_weight(&self) -> bool {
        self.load_balancing_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_balancing_weight(&mut self, v: super::wrappers::UInt32Value) {
        self.load_balancing_weight = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_balancing_weight(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.load_balancing_weight.is_none() {
            self.load_balancing_weight.set_default();
        };
        self.load_balancing_weight.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_balancing_weight(&mut self) -> super::wrappers::UInt32Value {
        self.load_balancing_weight.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_load_balancing_weight(&self) -> &super::wrappers::UInt32Value {
        self.load_balancing_weight.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_load_balancing_weight_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.load_balancing_weight
    }

    fn mut_load_balancing_weight_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.load_balancing_weight
    }
}

impl ::protobuf::Message for LbEndpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.health_status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.canary)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_balancing_weight)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.health_status);
        };
        if let Some(v) = self.canary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.load_balancing_weight.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            os.write_enum(2, self.health_status.value())?;
        };
        if let Some(v) = self.canary.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.load_balancing_weight.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LbEndpoint {
    fn new() -> LbEndpoint {
        LbEndpoint::new()
    }

    fn descriptor_static(_: ::std::option::Option<LbEndpoint>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Endpoint>>(
                    "endpoint",
                    LbEndpoint::get_endpoint_for_reflect,
                    LbEndpoint::mut_endpoint_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::health_check::HealthStatus>>(
                    "health_status",
                    LbEndpoint::get_health_status_for_reflect,
                    LbEndpoint::mut_health_status_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::BoolValue>>(
                    "canary",
                    LbEndpoint::get_canary_for_reflect,
                    LbEndpoint::mut_canary_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "load_balancing_weight",
                    LbEndpoint::get_load_balancing_weight_for_reflect,
                    LbEndpoint::mut_load_balancing_weight_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LbEndpoint>(
                    "LbEndpoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LbEndpoint {
    fn clear(&mut self) {
        self.clear_endpoint();
        self.clear_health_status();
        self.clear_canary();
        self.clear_load_balancing_weight();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LbEndpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LbEndpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalityLbEndpoints {
    // message fields
    locality: ::protobuf::SingularPtrField<super::base::Locality>,
    lb_endpoints: ::protobuf::RepeatedField<LbEndpoint>,
    load_balancing_weight: ::protobuf::SingularPtrField<super::wrappers::UInt32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LocalityLbEndpoints {}

impl LocalityLbEndpoints {
    pub fn new() -> LocalityLbEndpoints {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LocalityLbEndpoints {
        static mut instance: ::protobuf::lazy::Lazy<LocalityLbEndpoints> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LocalityLbEndpoints,
        };
        unsafe {
            instance.get(LocalityLbEndpoints::new)
        }
    }

    // .envoy.api.v2.Locality locality = 1;

    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        };
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }

    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| super::base::Locality::default_instance())
    }

    fn get_locality_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Locality> {
        &self.locality
    }

    fn mut_locality_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Locality> {
        &mut self.locality
    }

    // repeated .envoy.api.v2.LbEndpoint lb_endpoints = 2;

    pub fn clear_lb_endpoints(&mut self) {
        self.lb_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_lb_endpoints(&mut self, v: ::protobuf::RepeatedField<LbEndpoint>) {
        self.lb_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lb_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LbEndpoint> {
        &mut self.lb_endpoints
    }

    // Take field
    pub fn take_lb_endpoints(&mut self) -> ::protobuf::RepeatedField<LbEndpoint> {
        ::std::mem::replace(&mut self.lb_endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_lb_endpoints(&self) -> &[LbEndpoint] {
        &self.lb_endpoints
    }

    fn get_lb_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<LbEndpoint> {
        &self.lb_endpoints
    }

    fn mut_lb_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<LbEndpoint> {
        &mut self.lb_endpoints
    }

    // .google.protobuf.UInt32Value load_balancing_weight = 3;

    pub fn clear_load_balancing_weight(&mut self) {
        self.load_balancing_weight.clear();
    }

    pub fn has_load_balancing_weight(&self) -> bool {
        self.load_balancing_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_balancing_weight(&mut self, v: super::wrappers::UInt32Value) {
        self.load_balancing_weight = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_balancing_weight(&mut self) -> &mut super::wrappers::UInt32Value {
        if self.load_balancing_weight.is_none() {
            self.load_balancing_weight.set_default();
        };
        self.load_balancing_weight.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_balancing_weight(&mut self) -> super::wrappers::UInt32Value {
        self.load_balancing_weight.take().unwrap_or_else(|| super::wrappers::UInt32Value::new())
    }

    pub fn get_load_balancing_weight(&self) -> &super::wrappers::UInt32Value {
        self.load_balancing_weight.as_ref().unwrap_or_else(|| super::wrappers::UInt32Value::default_instance())
    }

    fn get_load_balancing_weight_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &self.load_balancing_weight
    }

    fn mut_load_balancing_weight_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::UInt32Value> {
        &mut self.load_balancing_weight
    }
}

impl ::protobuf::Message for LocalityLbEndpoints {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.lb_endpoints)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_balancing_weight)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.lb_endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.load_balancing_weight.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.locality.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.lb_endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.load_balancing_weight.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LocalityLbEndpoints {
    fn new() -> LocalityLbEndpoints {
        LocalityLbEndpoints::new()
    }

    fn descriptor_static(_: ::std::option::Option<LocalityLbEndpoints>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                    "locality",
                    LocalityLbEndpoints::get_locality_for_reflect,
                    LocalityLbEndpoints::mut_locality_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LbEndpoint>>(
                    "lb_endpoints",
                    LocalityLbEndpoints::get_lb_endpoints_for_reflect,
                    LocalityLbEndpoints::mut_lb_endpoints_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::UInt32Value>>(
                    "load_balancing_weight",
                    LocalityLbEndpoints::get_load_balancing_weight_for_reflect,
                    LocalityLbEndpoints::mut_load_balancing_weight_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LocalityLbEndpoints>(
                    "LocalityLbEndpoints",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LocalityLbEndpoints {
    fn clear(&mut self) {
        self.clear_locality();
        self.clear_lb_endpoints();
        self.clear_load_balancing_weight();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalityLbEndpoints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalityLbEndpoints {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointDiscoveryResponse {
    // message fields
    cluster_endpoints: ::protobuf::RepeatedField<ClusterLoadBalance>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EndpointDiscoveryResponse {}

impl EndpointDiscoveryResponse {
    pub fn new() -> EndpointDiscoveryResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EndpointDiscoveryResponse {
        static mut instance: ::protobuf::lazy::Lazy<EndpointDiscoveryResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointDiscoveryResponse,
        };
        unsafe {
            instance.get(EndpointDiscoveryResponse::new)
        }
    }

    // repeated .envoy.api.v2.ClusterLoadBalance cluster_endpoints = 1;

    pub fn clear_cluster_endpoints(&mut self) {
        self.cluster_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_endpoints(&mut self, v: ::protobuf::RepeatedField<ClusterLoadBalance>) {
        self.cluster_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<ClusterLoadBalance> {
        &mut self.cluster_endpoints
    }

    // Take field
    pub fn take_cluster_endpoints(&mut self) -> ::protobuf::RepeatedField<ClusterLoadBalance> {
        ::std::mem::replace(&mut self.cluster_endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_cluster_endpoints(&self) -> &[ClusterLoadBalance] {
        &self.cluster_endpoints
    }

    fn get_cluster_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<ClusterLoadBalance> {
        &self.cluster_endpoints
    }

    fn mut_cluster_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<ClusterLoadBalance> {
        &mut self.cluster_endpoints
    }
}

impl ::protobuf::Message for EndpointDiscoveryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cluster_endpoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cluster_endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cluster_endpoints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EndpointDiscoveryResponse {
    fn new() -> EndpointDiscoveryResponse {
        EndpointDiscoveryResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<EndpointDiscoveryResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterLoadBalance>>(
                    "cluster_endpoints",
                    EndpointDiscoveryResponse::get_cluster_endpoints_for_reflect,
                    EndpointDiscoveryResponse::mut_cluster_endpoints_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointDiscoveryResponse>(
                    "EndpointDiscoveryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EndpointDiscoveryResponse {
    fn clear(&mut self) {
        self.clear_cluster_endpoints();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointDiscoveryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointDiscoveryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointLoadMetricStats {
    // message fields
    pub metric_name: ::std::string::String,
    pub num_requests_finished_with_metric: u64,
    pub total_metric_value: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EndpointLoadMetricStats {}

impl EndpointLoadMetricStats {
    pub fn new() -> EndpointLoadMetricStats {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EndpointLoadMetricStats {
        static mut instance: ::protobuf::lazy::Lazy<EndpointLoadMetricStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointLoadMetricStats,
        };
        unsafe {
            instance.get(EndpointLoadMetricStats::new)
        }
    }

    // string metric_name = 1;

    pub fn clear_metric_name(&mut self) {
        self.metric_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_name(&mut self, v: ::std::string::String) {
        self.metric_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_name(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // Take field
    pub fn take_metric_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metric_name, ::std::string::String::new())
    }

    pub fn get_metric_name(&self) -> &str {
        &self.metric_name
    }

    fn get_metric_name_for_reflect(&self) -> &::std::string::String {
        &self.metric_name
    }

    fn mut_metric_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // uint64 num_requests_finished_with_metric = 2;

    pub fn clear_num_requests_finished_with_metric(&mut self) {
        self.num_requests_finished_with_metric = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_requests_finished_with_metric(&mut self, v: u64) {
        self.num_requests_finished_with_metric = v;
    }

    pub fn get_num_requests_finished_with_metric(&self) -> u64 {
        self.num_requests_finished_with_metric
    }

    fn get_num_requests_finished_with_metric_for_reflect(&self) -> &u64 {
        &self.num_requests_finished_with_metric
    }

    fn mut_num_requests_finished_with_metric_for_reflect(&mut self) -> &mut u64 {
        &mut self.num_requests_finished_with_metric
    }

    // double total_metric_value = 3;

    pub fn clear_total_metric_value(&mut self) {
        self.total_metric_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_metric_value(&mut self, v: f64) {
        self.total_metric_value = v;
    }

    pub fn get_total_metric_value(&self) -> f64 {
        self.total_metric_value
    }

    fn get_total_metric_value_for_reflect(&self) -> &f64 {
        &self.total_metric_value
    }

    fn mut_total_metric_value_for_reflect(&mut self) -> &mut f64 {
        &mut self.total_metric_value
    }
}

impl ::protobuf::Message for EndpointLoadMetricStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metric_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.num_requests_finished_with_metric = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_double()?;
                    self.total_metric_value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metric_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_name);
        };
        if self.num_requests_finished_with_metric != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_requests_finished_with_metric, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.total_metric_value != 0. {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.metric_name.is_empty() {
            os.write_string(1, &self.metric_name)?;
        };
        if self.num_requests_finished_with_metric != 0 {
            os.write_uint64(2, self.num_requests_finished_with_metric)?;
        };
        if self.total_metric_value != 0. {
            os.write_double(3, self.total_metric_value)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EndpointLoadMetricStats {
    fn new() -> EndpointLoadMetricStats {
        EndpointLoadMetricStats::new()
    }

    fn descriptor_static(_: ::std::option::Option<EndpointLoadMetricStats>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "metric_name",
                    EndpointLoadMetricStats::get_metric_name_for_reflect,
                    EndpointLoadMetricStats::mut_metric_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "num_requests_finished_with_metric",
                    EndpointLoadMetricStats::get_num_requests_finished_with_metric_for_reflect,
                    EndpointLoadMetricStats::mut_num_requests_finished_with_metric_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_metric_value",
                    EndpointLoadMetricStats::get_total_metric_value_for_reflect,
                    EndpointLoadMetricStats::mut_total_metric_value_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointLoadMetricStats>(
                    "EndpointLoadMetricStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EndpointLoadMetricStats {
    fn clear(&mut self) {
        self.clear_metric_name();
        self.clear_num_requests_finished_with_metric();
        self.clear_total_metric_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointLoadMetricStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointLoadMetricStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamLocalityStats {
    // message fields
    pub Locality: ::std::string::String,
    pub total_requests: u64,
    pub total_requests_in_progress: u64,
    tcp_errors: ::std::collections::HashMap<u32, u64>,
    http_errors: ::std::collections::HashMap<u32, u64>,
    grpc_errors: ::std::collections::HashMap<u32, u64>,
    pub dropped_requests: u64,
    load_metric_stats: ::protobuf::RepeatedField<EndpointLoadMetricStats>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for UpstreamLocalityStats {}

impl UpstreamLocalityStats {
    pub fn new() -> UpstreamLocalityStats {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static UpstreamLocalityStats {
        static mut instance: ::protobuf::lazy::Lazy<UpstreamLocalityStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpstreamLocalityStats,
        };
        unsafe {
            instance.get(UpstreamLocalityStats::new)
        }
    }

    // string Locality = 1;

    pub fn clear_Locality(&mut self) {
        self.Locality.clear();
    }

    // Param is passed by value, moved
    pub fn set_Locality(&mut self, v: ::std::string::String) {
        self.Locality = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Locality(&mut self) -> &mut ::std::string::String {
        &mut self.Locality
    }

    // Take field
    pub fn take_Locality(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Locality, ::std::string::String::new())
    }

    pub fn get_Locality(&self) -> &str {
        &self.Locality
    }

    fn get_Locality_for_reflect(&self) -> &::std::string::String {
        &self.Locality
    }

    fn mut_Locality_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.Locality
    }

    // uint64 total_requests = 2;

    pub fn clear_total_requests(&mut self) {
        self.total_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_requests(&mut self, v: u64) {
        self.total_requests = v;
    }

    pub fn get_total_requests(&self) -> u64 {
        self.total_requests
    }

    fn get_total_requests_for_reflect(&self) -> &u64 {
        &self.total_requests
    }

    fn mut_total_requests_for_reflect(&mut self) -> &mut u64 {
        &mut self.total_requests
    }

    // uint64 total_requests_in_progress = 3;

    pub fn clear_total_requests_in_progress(&mut self) {
        self.total_requests_in_progress = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_requests_in_progress(&mut self, v: u64) {
        self.total_requests_in_progress = v;
    }

    pub fn get_total_requests_in_progress(&self) -> u64 {
        self.total_requests_in_progress
    }

    fn get_total_requests_in_progress_for_reflect(&self) -> &u64 {
        &self.total_requests_in_progress
    }

    fn mut_total_requests_in_progress_for_reflect(&mut self) -> &mut u64 {
        &mut self.total_requests_in_progress
    }

    // repeated .envoy.api.v2.UpstreamLocalityStats.TcpErrorsEntry tcp_errors = 4;

    pub fn clear_tcp_errors(&mut self) {
        self.tcp_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_tcp_errors(&mut self, v: ::std::collections::HashMap<u32, u64>) {
        self.tcp_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_errors(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.tcp_errors
    }

    // Take field
    pub fn take_tcp_errors(&mut self) -> ::std::collections::HashMap<u32, u64> {
        ::std::mem::replace(&mut self.tcp_errors, ::std::collections::HashMap::new())
    }

    pub fn get_tcp_errors(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.tcp_errors
    }

    fn get_tcp_errors_for_reflect(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.tcp_errors
    }

    fn mut_tcp_errors_for_reflect(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.tcp_errors
    }

    // repeated .envoy.api.v2.UpstreamLocalityStats.HttpErrorsEntry http_errors = 5;

    pub fn clear_http_errors(&mut self) {
        self.http_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_http_errors(&mut self, v: ::std::collections::HashMap<u32, u64>) {
        self.http_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_http_errors(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.http_errors
    }

    // Take field
    pub fn take_http_errors(&mut self) -> ::std::collections::HashMap<u32, u64> {
        ::std::mem::replace(&mut self.http_errors, ::std::collections::HashMap::new())
    }

    pub fn get_http_errors(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.http_errors
    }

    fn get_http_errors_for_reflect(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.http_errors
    }

    fn mut_http_errors_for_reflect(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.http_errors
    }

    // repeated .envoy.api.v2.UpstreamLocalityStats.GrpcErrorsEntry grpc_errors = 6;

    pub fn clear_grpc_errors(&mut self) {
        self.grpc_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_grpc_errors(&mut self, v: ::std::collections::HashMap<u32, u64>) {
        self.grpc_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_errors(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.grpc_errors
    }

    // Take field
    pub fn take_grpc_errors(&mut self) -> ::std::collections::HashMap<u32, u64> {
        ::std::mem::replace(&mut self.grpc_errors, ::std::collections::HashMap::new())
    }

    pub fn get_grpc_errors(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.grpc_errors
    }

    fn get_grpc_errors_for_reflect(&self) -> &::std::collections::HashMap<u32, u64> {
        &self.grpc_errors
    }

    fn mut_grpc_errors_for_reflect(&mut self) -> &mut ::std::collections::HashMap<u32, u64> {
        &mut self.grpc_errors
    }

    // uint64 dropped_requests = 7;

    pub fn clear_dropped_requests(&mut self) {
        self.dropped_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_dropped_requests(&mut self, v: u64) {
        self.dropped_requests = v;
    }

    pub fn get_dropped_requests(&self) -> u64 {
        self.dropped_requests
    }

    fn get_dropped_requests_for_reflect(&self) -> &u64 {
        &self.dropped_requests
    }

    fn mut_dropped_requests_for_reflect(&mut self) -> &mut u64 {
        &mut self.dropped_requests
    }

    // repeated .envoy.api.v2.EndpointLoadMetricStats load_metric_stats = 8;

    pub fn clear_load_metric_stats(&mut self) {
        self.load_metric_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_load_metric_stats(&mut self, v: ::protobuf::RepeatedField<EndpointLoadMetricStats>) {
        self.load_metric_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_load_metric_stats(&mut self) -> &mut ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        &mut self.load_metric_stats
    }

    // Take field
    pub fn take_load_metric_stats(&mut self) -> ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        ::std::mem::replace(&mut self.load_metric_stats, ::protobuf::RepeatedField::new())
    }

    pub fn get_load_metric_stats(&self) -> &[EndpointLoadMetricStats] {
        &self.load_metric_stats
    }

    fn get_load_metric_stats_for_reflect(&self) -> &::protobuf::RepeatedField<EndpointLoadMetricStats> {
        &self.load_metric_stats
    }

    fn mut_load_metric_stats_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        &mut self.load_metric_stats
    }
}

impl ::protobuf::Message for UpstreamLocalityStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Locality)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.total_requests = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.total_requests_in_progress = tmp;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(wire_type, is, &mut self.tcp_errors)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(wire_type, is, &mut self.http_errors)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(wire_type, is, &mut self.grpc_errors)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.dropped_requests = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.load_metric_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Locality.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Locality);
        };
        if self.total_requests != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total_requests, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.total_requests_in_progress != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_requests_in_progress, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(4, &self.tcp_errors);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(5, &self.http_errors);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(6, &self.grpc_errors);
        if self.dropped_requests != 0 {
            my_size += ::protobuf::rt::value_size(7, self.dropped_requests, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.load_metric_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.Locality.is_empty() {
            os.write_string(1, &self.Locality)?;
        };
        if self.total_requests != 0 {
            os.write_uint64(2, self.total_requests)?;
        };
        if self.total_requests_in_progress != 0 {
            os.write_uint64(3, self.total_requests_in_progress)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(4, &self.tcp_errors, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(5, &self.http_errors, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(6, &self.grpc_errors, os)?;
        if self.dropped_requests != 0 {
            os.write_uint64(7, self.dropped_requests)?;
        };
        for v in &self.load_metric_stats {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for UpstreamLocalityStats {
    fn new() -> UpstreamLocalityStats {
        UpstreamLocalityStats::new()
    }

    fn descriptor_static(_: ::std::option::Option<UpstreamLocalityStats>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "Locality",
                    UpstreamLocalityStats::get_Locality_for_reflect,
                    UpstreamLocalityStats::mut_Locality_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "total_requests",
                    UpstreamLocalityStats::get_total_requests_for_reflect,
                    UpstreamLocalityStats::mut_total_requests_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "total_requests_in_progress",
                    UpstreamLocalityStats::get_total_requests_in_progress_for_reflect,
                    UpstreamLocalityStats::mut_total_requests_in_progress_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(
                    "tcp_errors",
                    UpstreamLocalityStats::get_tcp_errors_for_reflect,
                    UpstreamLocalityStats::mut_tcp_errors_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(
                    "http_errors",
                    UpstreamLocalityStats::get_http_errors_for_reflect,
                    UpstreamLocalityStats::mut_http_errors_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeUint64>(
                    "grpc_errors",
                    UpstreamLocalityStats::get_grpc_errors_for_reflect,
                    UpstreamLocalityStats::mut_grpc_errors_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "dropped_requests",
                    UpstreamLocalityStats::get_dropped_requests_for_reflect,
                    UpstreamLocalityStats::mut_dropped_requests_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndpointLoadMetricStats>>(
                    "load_metric_stats",
                    UpstreamLocalityStats::get_load_metric_stats_for_reflect,
                    UpstreamLocalityStats::mut_load_metric_stats_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpstreamLocalityStats>(
                    "UpstreamLocalityStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for UpstreamLocalityStats {
    fn clear(&mut self) {
        self.clear_Locality();
        self.clear_total_requests();
        self.clear_total_requests_in_progress();
        self.clear_tcp_errors();
        self.clear_http_errors();
        self.clear_grpc_errors();
        self.clear_dropped_requests();
        self.clear_load_metric_stats();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamLocalityStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamLocalityStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum UpstreamLocalityStats_TcpErrorType {
    TIMEOUT = 0,
}

impl ::protobuf::ProtobufEnum for UpstreamLocalityStats_TcpErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UpstreamLocalityStats_TcpErrorType> {
        match value {
            0 => ::std::option::Option::Some(UpstreamLocalityStats_TcpErrorType::TIMEOUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UpstreamLocalityStats_TcpErrorType] = &[
            UpstreamLocalityStats_TcpErrorType::TIMEOUT,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<UpstreamLocalityStats_TcpErrorType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("UpstreamLocalityStats_TcpErrorType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for UpstreamLocalityStats_TcpErrorType {
}

impl ::std::default::Default for UpstreamLocalityStats_TcpErrorType {
    fn default() -> Self {
        UpstreamLocalityStats_TcpErrorType::TIMEOUT
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamLocalityStats_TcpErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterStats {
    // message fields
    pub cluster_name: ::std::string::String,
    upstream_locality_stats: ::protobuf::RepeatedField<UpstreamLocalityStats>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterStats {}

impl ClusterStats {
    pub fn new() -> ClusterStats {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterStats {
        static mut instance: ::protobuf::lazy::Lazy<ClusterStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterStats,
        };
        unsafe {
            instance.get(ClusterStats::new)
        }
    }

    // string cluster_name = 1;

    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }

    fn get_cluster_name_for_reflect(&self) -> &::std::string::String {
        &self.cluster_name
    }

    fn mut_cluster_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // repeated .envoy.api.v2.UpstreamLocalityStats upstream_locality_stats = 2;

    pub fn clear_upstream_locality_stats(&mut self) {
        self.upstream_locality_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_locality_stats(&mut self, v: ::protobuf::RepeatedField<UpstreamLocalityStats>) {
        self.upstream_locality_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upstream_locality_stats(&mut self) -> &mut ::protobuf::RepeatedField<UpstreamLocalityStats> {
        &mut self.upstream_locality_stats
    }

    // Take field
    pub fn take_upstream_locality_stats(&mut self) -> ::protobuf::RepeatedField<UpstreamLocalityStats> {
        ::std::mem::replace(&mut self.upstream_locality_stats, ::protobuf::RepeatedField::new())
    }

    pub fn get_upstream_locality_stats(&self) -> &[UpstreamLocalityStats] {
        &self.upstream_locality_stats
    }

    fn get_upstream_locality_stats_for_reflect(&self) -> &::protobuf::RepeatedField<UpstreamLocalityStats> {
        &self.upstream_locality_stats
    }

    fn mut_upstream_locality_stats_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<UpstreamLocalityStats> {
        &mut self.upstream_locality_stats
    }
}

impl ::protobuf::Message for ClusterStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upstream_locality_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        };
        for value in &self.upstream_locality_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        };
        for v in &self.upstream_locality_stats {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterStats {
    fn new() -> ClusterStats {
        ClusterStats::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterStats>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cluster_name",
                    ClusterStats::get_cluster_name_for_reflect,
                    ClusterStats::mut_cluster_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpstreamLocalityStats>>(
                    "upstream_locality_stats",
                    ClusterStats::get_upstream_locality_stats_for_reflect,
                    ClusterStats::mut_upstream_locality_stats_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterStats>(
                    "ClusterStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterStats {
    fn clear(&mut self) {
        self.clear_cluster_name();
        self.clear_upstream_locality_stats();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoadBalanceRequest {
    // message fields
    node: ::protobuf::SingularPtrField<super::base::Node>,
    cluster_stats: ::protobuf::RepeatedField<ClusterStats>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LoadBalanceRequest {}

impl LoadBalanceRequest {
    pub fn new() -> LoadBalanceRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LoadBalanceRequest {
        static mut instance: ::protobuf::lazy::Lazy<LoadBalanceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoadBalanceRequest,
        };
        unsafe {
            instance.get(LoadBalanceRequest::new)
        }
    }

    // .envoy.api.v2.Node node = 1;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        };
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| super::base::Node::default_instance())
    }

    fn get_node_for_reflect(&self) -> &::protobuf::SingularPtrField<super::base::Node> {
        &self.node
    }

    fn mut_node_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::base::Node> {
        &mut self.node
    }

    // repeated .envoy.api.v2.ClusterStats cluster_stats = 3;

    pub fn clear_cluster_stats(&mut self) {
        self.cluster_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_stats(&mut self, v: ::protobuf::RepeatedField<ClusterStats>) {
        self.cluster_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_stats(&mut self) -> &mut ::protobuf::RepeatedField<ClusterStats> {
        &mut self.cluster_stats
    }

    // Take field
    pub fn take_cluster_stats(&mut self) -> ::protobuf::RepeatedField<ClusterStats> {
        ::std::mem::replace(&mut self.cluster_stats, ::protobuf::RepeatedField::new())
    }

    pub fn get_cluster_stats(&self) -> &[ClusterStats] {
        &self.cluster_stats
    }

    fn get_cluster_stats_for_reflect(&self) -> &::protobuf::RepeatedField<ClusterStats> {
        &self.cluster_stats
    }

    fn mut_cluster_stats_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<ClusterStats> {
        &mut self.cluster_stats
    }
}

impl ::protobuf::Message for LoadBalanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cluster_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.cluster_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.cluster_stats {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LoadBalanceRequest {
    fn new() -> LoadBalanceRequest {
        LoadBalanceRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<LoadBalanceRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                    "node",
                    LoadBalanceRequest::get_node_for_reflect,
                    LoadBalanceRequest::mut_node_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterStats>>(
                    "cluster_stats",
                    LoadBalanceRequest::get_cluster_stats_for_reflect,
                    LoadBalanceRequest::mut_cluster_stats_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoadBalanceRequest>(
                    "LoadBalanceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LoadBalanceRequest {
    fn clear(&mut self) {
        self.clear_node();
        self.clear_cluster_stats();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoadBalanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoadBalanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterLoadBalance {
    // message fields
    pub cluster_name: ::std::string::String,
    endpoints: ::protobuf::RepeatedField<LocalityLbEndpoints>,
    failover_endpoints: ::protobuf::RepeatedField<LocalityLbEndpoints>,
    policy: ::protobuf::SingularPtrField<ClusterLoadBalance_Policy>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterLoadBalance {}

impl ClusterLoadBalance {
    pub fn new() -> ClusterLoadBalance {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterLoadBalance {
        static mut instance: ::protobuf::lazy::Lazy<ClusterLoadBalance> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterLoadBalance,
        };
        unsafe {
            instance.get(ClusterLoadBalance::new)
        }
    }

    // string cluster_name = 1;

    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }

    fn get_cluster_name_for_reflect(&self) -> &::std::string::String {
        &self.cluster_name
    }

    fn mut_cluster_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // repeated .envoy.api.v2.LocalityLbEndpoints endpoints = 2;

    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<LocalityLbEndpoints>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LocalityLbEndpoints> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<LocalityLbEndpoints> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_endpoints(&self) -> &[LocalityLbEndpoints] {
        &self.endpoints
    }

    fn get_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<LocalityLbEndpoints> {
        &self.endpoints
    }

    fn mut_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<LocalityLbEndpoints> {
        &mut self.endpoints
    }

    // repeated .envoy.api.v2.LocalityLbEndpoints failover_endpoints = 3;

    pub fn clear_failover_endpoints(&mut self) {
        self.failover_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_failover_endpoints(&mut self, v: ::protobuf::RepeatedField<LocalityLbEndpoints>) {
        self.failover_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failover_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LocalityLbEndpoints> {
        &mut self.failover_endpoints
    }

    // Take field
    pub fn take_failover_endpoints(&mut self) -> ::protobuf::RepeatedField<LocalityLbEndpoints> {
        ::std::mem::replace(&mut self.failover_endpoints, ::protobuf::RepeatedField::new())
    }

    pub fn get_failover_endpoints(&self) -> &[LocalityLbEndpoints] {
        &self.failover_endpoints
    }

    fn get_failover_endpoints_for_reflect(&self) -> &::protobuf::RepeatedField<LocalityLbEndpoints> {
        &self.failover_endpoints
    }

    fn mut_failover_endpoints_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<LocalityLbEndpoints> {
        &mut self.failover_endpoints
    }

    // .envoy.api.v2.ClusterLoadBalance.Policy policy = 4;

    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: ClusterLoadBalance_Policy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut ClusterLoadBalance_Policy {
        if self.policy.is_none() {
            self.policy.set_default();
        };
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> ClusterLoadBalance_Policy {
        self.policy.take().unwrap_or_else(|| ClusterLoadBalance_Policy::new())
    }

    pub fn get_policy(&self) -> &ClusterLoadBalance_Policy {
        self.policy.as_ref().unwrap_or_else(|| ClusterLoadBalance_Policy::default_instance())
    }

    fn get_policy_for_reflect(&self) -> &::protobuf::SingularPtrField<ClusterLoadBalance_Policy> {
        &self.policy
    }

    fn mut_policy_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<ClusterLoadBalance_Policy> {
        &mut self.policy
    }
}

impl ::protobuf::Message for ClusterLoadBalance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.failover_endpoints)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        };
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.failover_endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        };
        for v in &self.endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.failover_endpoints {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.policy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterLoadBalance {
    fn new() -> ClusterLoadBalance {
        ClusterLoadBalance::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterLoadBalance>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cluster_name",
                    ClusterLoadBalance::get_cluster_name_for_reflect,
                    ClusterLoadBalance::mut_cluster_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalityLbEndpoints>>(
                    "endpoints",
                    ClusterLoadBalance::get_endpoints_for_reflect,
                    ClusterLoadBalance::mut_endpoints_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalityLbEndpoints>>(
                    "failover_endpoints",
                    ClusterLoadBalance::get_failover_endpoints_for_reflect,
                    ClusterLoadBalance::mut_failover_endpoints_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterLoadBalance_Policy>>(
                    "policy",
                    ClusterLoadBalance::get_policy_for_reflect,
                    ClusterLoadBalance::mut_policy_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterLoadBalance>(
                    "ClusterLoadBalance",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterLoadBalance {
    fn clear(&mut self) {
        self.clear_cluster_name();
        self.clear_endpoints();
        self.clear_failover_endpoints();
        self.clear_policy();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterLoadBalance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterLoadBalance {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterLoadBalance_Policy {
    // message fields
    pub drop_overload: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClusterLoadBalance_Policy {}

impl ClusterLoadBalance_Policy {
    pub fn new() -> ClusterLoadBalance_Policy {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClusterLoadBalance_Policy {
        static mut instance: ::protobuf::lazy::Lazy<ClusterLoadBalance_Policy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterLoadBalance_Policy,
        };
        unsafe {
            instance.get(ClusterLoadBalance_Policy::new)
        }
    }

    // double drop_overload = 1;

    pub fn clear_drop_overload(&mut self) {
        self.drop_overload = 0.;
    }

    // Param is passed by value, moved
    pub fn set_drop_overload(&mut self, v: f64) {
        self.drop_overload = v;
    }

    pub fn get_drop_overload(&self) -> f64 {
        self.drop_overload
    }

    fn get_drop_overload_for_reflect(&self) -> &f64 {
        &self.drop_overload
    }

    fn mut_drop_overload_for_reflect(&mut self) -> &mut f64 {
        &mut self.drop_overload
    }
}

impl ::protobuf::Message for ClusterLoadBalance_Policy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_double()?;
                    self.drop_overload = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.drop_overload != 0. {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.drop_overload != 0. {
            os.write_double(1, self.drop_overload)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClusterLoadBalance_Policy {
    fn new() -> ClusterLoadBalance_Policy {
        ClusterLoadBalance_Policy::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClusterLoadBalance_Policy>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "drop_overload",
                    ClusterLoadBalance_Policy::get_drop_overload_for_reflect,
                    ClusterLoadBalance_Policy::mut_drop_overload_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterLoadBalance_Policy>(
                    "ClusterLoadBalance_Policy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClusterLoadBalance_Policy {
    fn clear(&mut self) {
        self.clear_drop_overload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterLoadBalance_Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterLoadBalance_Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoadBalanceResponse {
    // message fields
    clusters: ::protobuf::RepeatedField<ClusterLoadBalance>,
    load_reporting_interval: ::protobuf::SingularPtrField<super::duration::Duration>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LoadBalanceResponse {}

impl LoadBalanceResponse {
    pub fn new() -> LoadBalanceResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LoadBalanceResponse {
        static mut instance: ::protobuf::lazy::Lazy<LoadBalanceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoadBalanceResponse,
        };
        unsafe {
            instance.get(LoadBalanceResponse::new)
        }
    }

    // repeated .envoy.api.v2.ClusterLoadBalance clusters = 1;

    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<ClusterLoadBalance>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<ClusterLoadBalance> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<ClusterLoadBalance> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }

    pub fn get_clusters(&self) -> &[ClusterLoadBalance] {
        &self.clusters
    }

    fn get_clusters_for_reflect(&self) -> &::protobuf::RepeatedField<ClusterLoadBalance> {
        &self.clusters
    }

    fn mut_clusters_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<ClusterLoadBalance> {
        &mut self.clusters
    }

    // .google.protobuf.Duration load_reporting_interval = 2;

    pub fn clear_load_reporting_interval(&mut self) {
        self.load_reporting_interval.clear();
    }

    pub fn has_load_reporting_interval(&self) -> bool {
        self.load_reporting_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_reporting_interval(&mut self, v: super::duration::Duration) {
        self.load_reporting_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_reporting_interval(&mut self) -> &mut super::duration::Duration {
        if self.load_reporting_interval.is_none() {
            self.load_reporting_interval.set_default();
        };
        self.load_reporting_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_reporting_interval(&mut self) -> super::duration::Duration {
        self.load_reporting_interval.take().unwrap_or_else(|| super::duration::Duration::new())
    }

    pub fn get_load_reporting_interval(&self) -> &super::duration::Duration {
        self.load_reporting_interval.as_ref().unwrap_or_else(|| super::duration::Duration::default_instance())
    }

    fn get_load_reporting_interval_for_reflect(&self) -> &::protobuf::SingularPtrField<super::duration::Duration> {
        &self.load_reporting_interval
    }

    fn mut_load_reporting_interval_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::duration::Duration> {
        &mut self.load_reporting_interval
    }
}

impl ::protobuf::Message for LoadBalanceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_reporting_interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.load_reporting_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clusters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.load_reporting_interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LoadBalanceResponse {
    fn new() -> LoadBalanceResponse {
        LoadBalanceResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<LoadBalanceResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterLoadBalance>>(
                    "clusters",
                    LoadBalanceResponse::get_clusters_for_reflect,
                    LoadBalanceResponse::mut_clusters_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::duration::Duration>>(
                    "load_reporting_interval",
                    LoadBalanceResponse::get_load_reporting_interval_for_reflect,
                    LoadBalanceResponse::mut_load_reporting_interval_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoadBalanceResponse>(
                    "LoadBalanceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LoadBalanceResponse {
    fn clear(&mut self) {
        self.clear_clusters();
        self.clear_load_reporting_interval();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoadBalanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoadBalanceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x0e, 0x61,
    0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61,
    0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
    0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x18, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
    0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
    0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
    0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
    0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x12, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
    0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x4c,
    0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e,
    0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
    0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69,
    0x2e, 0x76, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
    0x0a, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x61,
    0x72, 0x79, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
    0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
    0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x57, 0x65,
    0x69, 0x67, 0x68, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
    0x79, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08,
    0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
    0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f,
    0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
    0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x52, 0x0b, 0x6c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a,
    0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
    0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
    0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64,
    0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
    0x6a, 0x0a, 0x19, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
    0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11,
    0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
    0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x17,
    0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72,
    0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
    0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
    0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x5f,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
    0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
    0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72,
    0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72,
    0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
    0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
    0x22, 0xed, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63,
    0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f,
    0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f,
    0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
    0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a,
    0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
    0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x04, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
    0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x74, 0x63,
    0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
    0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
    0x61, 0x74, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
    0x72, 0x79, 0x52, 0x09, 0x74, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a,
    0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
    0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x32, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
    0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f,
    0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72,
    0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f,
    0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
    0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
    0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x47, 0x72,
    0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67,
    0x72, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x72, 0x6f,
    0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74,
    0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x25, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
    0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72,
    0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x72,
    0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72,
    0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f,
    0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
    0x02, 0x38, 0x01, 0x22, 0x1b, 0x0a, 0x0c, 0x54, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
    0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x00,
    0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
    0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
    0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
    0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
    0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63,
    0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x15, 0x75, 0x70, 0x73, 0x74,
    0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
    0x73, 0x22, 0x7d, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
    0x3f, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
    0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
    0x74, 0x73, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
    0x22, 0xba, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64,
    0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x6e,
    0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63,
    0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x66,
    0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c,
    0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c,
    0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a,
    0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
    0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e,
    0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x2d,
    0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70,
    0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
    0x0c, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x01,
    0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
    0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
    0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
    0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
    0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
    0x15, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
    0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x32, 0xec, 0x03, 0x0a, 0x18, 0x45, 0x6e, 0x64, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61,
    0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69,
    0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
    0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
    0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x85, 0x01,
    0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
    0x12, 0x26, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
    0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
    0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
    0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
    0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x64,
    0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
    0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x76,
    0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
    0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65,
    0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
    0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
    0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f,
    0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
    0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
    0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6e,
    0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
    0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25,
    0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x63,
    0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
    0x63, 0x65, 0x3a, 0x01, 0x2a, 0x4a, 0xb0, 0x46, 0x0a, 0x07, 0x12, 0x05, 0x00, 0x00, 0xd1, 0x01,
    0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02,
    0x12, 0x03, 0x02, 0x08, 0x14, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x07, 0x17,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x05, 0x07, 0x1f, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x02, 0x12, 0x03, 0x07, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03, 0x08, 0x07,
    0x27, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x03, 0x09, 0x07, 0x27, 0x0a, 0x0a, 0x0a, 0x02,
    0x06, 0x00, 0x12, 0x04, 0x0b, 0x00, 0x41, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x06, 0x00, 0x01, 0x12,
    0x03, 0x0b, 0x08, 0x20, 0x0a, 0x2f, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x00, 0x12, 0x04, 0x0d, 0x02,
    0x0f, 0x03, 0x1a, 0x21, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x6f, 0x66, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x41, 0x50, 0x49, 0x20, 0x74, 0x6f, 0x20,
    0x67, 0x52, 0x50, 0x43, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x0d, 0x06, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x0d, 0x16,
    0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0d, 0x1d, 0x35, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0e, 0x0f, 0x15, 0x0a, 0x0c, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0e, 0x16, 0x2f, 0x0a, 0x0c, 0x0a, 0x04, 0x06,
    0x00, 0x02, 0x01, 0x12, 0x04, 0x11, 0x02, 0x17, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x11, 0x06, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x11, 0x15, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x12, 0x0f, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x13, 0x04,
    0x16, 0x06, 0x0a, 0x10, 0x0a, 0x08, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x04,
    0x13, 0x04, 0x16, 0x06, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00,
    0x02, 0x12, 0x03, 0x13, 0x0b, 0x1c, 0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x13, 0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02,
    0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x13, 0x0c, 0x1b, 0x0a, 0x11, 0x0a,
    0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x08, 0x12, 0x04, 0x13, 0x1f, 0x16, 0x05,
    0x0a, 0xe4, 0x0c, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x02, 0x12, 0x04, 0x33, 0x02, 0x35, 0x03, 0x1a,
    0xd5, 0x0c, 0x20, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x41, 0x50, 0x49, 0x20,
    0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c,
    0x74, 0x69, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6c,
    0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x79,
    0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x65, 0x70, 0x73, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x0a,
    0x20, 0x31, 0x2c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x65, 0x72,
    0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x6c, 0x6f,
    0x61, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61,
    0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
    0x74, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x20, 0x32, 0x2e, 0x20, 0x45, 0x6e,
    0x76, 0x6f, 0x79, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42,
    0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6c, 0x75, 0x73,
    0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x6c, 0x6f, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
    0x65, 0x20, 0x74, 0x6f, 0x20, 0x28, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66,
    0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x45,
    0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x29, 0x2e, 0x0a, 0x20, 0x33, 0x2e, 0x20, 0x4f, 0x6e,
    0x63, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x72, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
    0x69, 0x74, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x34, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63,
    0x68, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79,
    0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x69,
    0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20,
    0x74, 0x6f, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74,
    0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70,
    0x65, 0x72, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20,
    0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
    0x6e, 0x63, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x28, 0x69, 0x66, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62,
    0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x2d, 0x7a, 0x6f,
    0x6e, 0x65, 0x20, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x0a, 0x20, 0x35, 0x2e,
    0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x68,
    0x6f, 0x73, 0x74, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x79,
    0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x64, 0x64, 0x20,
    0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x3c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x68,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3e, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x6e, 0x64,
    0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
    0x74, 0x61, 0x74, 0x73, 0x2e, 0x0a, 0x20, 0x36, 0x2e, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20,
    0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20,
    0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
    0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
    0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x20,
    0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x61, 0x67,
    0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x73, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61,
    0x69, 0x6e, 0x73, 0x20, 0x62, 0x79, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x28, 0x74,
    0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x72,
    0x70, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29, 0x20,
    0x61, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x6c,
    0x6f, 0x61, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
    0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e,
    0x0a, 0x20, 0x37, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
    0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x65,
    0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x73, 0x65,
    0x6e, 0x64, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x4c, 0x6f, 0x61, 0x64,
    0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66,
    0x69, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20,
    0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
    0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x38, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72,
    0x76, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x61,
    0x64, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
    0x6c, 0x6c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x45, 0x6e, 0x76, 0x6f,
    0x79, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x72, 0x6f, 0x75,
    0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2c, 0x20, 0x63, 0x6f,
    0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x61, 0x73,
    0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65,
    0x70, 0x61, 0x72, 0x65, 0x73, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x73,
    0x74, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x7a,
    0x6f, 0x6e, 0x65, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6c,
    0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x2e, 0x20, 0x47, 0x6f, 0x74, 0x6f, 0x20,
    0x33, 0x2e, 0x0a, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a,
    0x20, 0x41, 0x64, 0x64, 0x20, 0x40, 0x61, 0x6d, 0x62, 0x36, 0x37, 0x27, 0x73, 0x20, 0x64, 0x69,
    0x61, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x33, 0x06, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03,
    0x33, 0x18, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x33, 0x1f,
    0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x34, 0x0f, 0x15, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x34, 0x16, 0x29, 0x0a, 0xc0, 0x01,
    0x0a, 0x04, 0x06, 0x00, 0x02, 0x03, 0x12, 0x04, 0x3a, 0x02, 0x40, 0x03, 0x1a, 0xb1, 0x01, 0x20,
    0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x55, 0x6e, 0x6c,
    0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e,
    0x6f, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x62,
    0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x53, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x77, 0x65, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64,
    0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3f, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x3a, 0x06, 0x16, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x3a, 0x17, 0x29, 0x0a, 0x0c, 0x0a, 0x05,
    0x06, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x3b, 0x0f, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x06, 0x00,
    0x02, 0x03, 0x04, 0x12, 0x04, 0x3c, 0x04, 0x3f, 0x06, 0x0a, 0x10, 0x0a, 0x08, 0x06, 0x00, 0x02,
    0x03, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x04, 0x3c, 0x04, 0x3f, 0x06, 0x0a, 0x10, 0x0a, 0x09, 0x06,
    0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x3c, 0x0b, 0x1c, 0x0a, 0x11, 0x0a,
    0x0a, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x3c, 0x0b, 0x1c,
    0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x3c, 0x0c, 0x1b, 0x0a, 0x11, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00,
    0x08, 0x12, 0x04, 0x3c, 0x1f, 0x3f, 0x05, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x43,
    0x00, 0x46, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x43, 0x08, 0x20, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x44, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x44, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x05, 0x12, 0x03, 0x44, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x44, 0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x44, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x45, 0x02,
    0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x45, 0x02, 0x44, 0x23,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x45, 0x02, 0x06, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x45, 0x07, 0x0b, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x45, 0x0e, 0x0f, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01,
    0x12, 0x04, 0x48, 0x00, 0x5c, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x48,
    0x08, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x49, 0x02, 0x18, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0x49, 0x02, 0x48, 0x14, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x49, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x49, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x49, 0x16, 0x17, 0x0a, 0x4c, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01,
    0x12, 0x03, 0x4c, 0x02, 0x21, 0x1a, 0x3f, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
    0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x77,
    0x68, 0x65, 0x6e, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75,
    0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x45, 0x44, 0x53, 0x20, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12,
    0x04, 0x4c, 0x02, 0x49, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03,
    0x4c, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4c, 0x0f,
    0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x4c, 0x1f, 0x20, 0x0a,
    0xa5, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x51, 0x02, 0x27, 0x1a, 0x97, 0x01,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x61,
    0x6e, 0x61, 0x72, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74,
    0x2e, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20,
    0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20,
    0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x65, 0x6c, 0x73, 0x65,
    0x77, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04,
    0x12, 0x04, 0x51, 0x02, 0x4c, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12,
    0x03, 0x51, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x51,
    0x1c, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x51, 0x25, 0x26,
    0x0a, 0xe3, 0x04, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x5b, 0x02, 0x38, 0x1a, 0xd5,
    0x04, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6c,
    0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x65,
    0x69, 0x67, 0x68, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x73, 0x74,
    0x72, 0x65, 0x61, 0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x31, 0x20, 0x2d, 0x0a, 0x20, 0x31, 0x30, 0x30,
    0x2e, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20,
    0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6c,
    0x6f, 0x61, 0x64, 0x0a, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x2e, 0x20,
    0x41, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
    0x6e, 0x67, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
    0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x75,
    0x6d, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x25, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62,
    0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e,
    0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
    0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61,
    0x6c, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
    0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
    0x20, 0x49, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c,
    0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x70,
    0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
    0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69, 0x6e, 0x20,
    0x61, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x20, 0x54, 0x4f, 0x44,
    0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x5b, 0x56, 0x32, 0x2d, 0x41, 0x50,
    0x49, 0x2d, 0x44, 0x49, 0x46, 0x46, 0x5d, 0x20, 0x44, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x77, 0x61,
    0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x25, 0x2c, 0x20, 0x6f,
    0x72, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x75, 0x73,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c,
    0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e,
    0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x65, 0x66, 0x66, 0x65,
    0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x69,
    0x6e, 0x20, 0x76, 0x31, 0x3f, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x04, 0x12,
    0x04, 0x5b, 0x02, 0x51, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x06, 0x12, 0x03,
    0x5b, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x5b, 0x1e,
    0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x03, 0x12, 0x03, 0x5b, 0x36, 0x37, 0x0a,
    0x34, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x5f, 0x00, 0x6a, 0x01, 0x1a, 0x28, 0x20, 0x41, 0x6c,
    0x6c, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f,
    0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
    0x69, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x5f, 0x08,
    0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x60, 0x02, 0x18, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0x60, 0x02, 0x5f, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12, 0x03, 0x60, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x60, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x60, 0x16, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x61, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x61,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x06, 0x12, 0x03, 0x61, 0x0b, 0x15,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x61, 0x16, 0x22, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x61, 0x25, 0x26, 0x0a, 0x8b, 0x03, 0x0a,
    0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x69, 0x02, 0x38, 0x1a, 0xfd, 0x02, 0x20, 0x4f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x50, 0x65, 0x72, 0x20, 0x72, 0x65, 0x67, 0x69,
    0x6f, 0x6e, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
    0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x2d, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20,
    0x31, 0x2d, 0x31, 0x30, 0x30, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20,
    0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68,
    0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
    0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x25,
    0x2e, 0x20, 0x49, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
    0x2c, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
    0x69, 0x73, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x68, 0x61, 0x76, 0x65, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68,
    0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a,
    0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x5b, 0x56,
    0x32, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x44, 0x49, 0x46, 0x46, 0x5d, 0x20, 0x44, 0x6f, 0x20, 0x77,
    0x65, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68,
    0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30,
    0x25, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61,
    0x64, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66,
    0x20, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20,
    0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x0a, 0x20,
    0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65,
    0x69, 0x67, 0x68, 0x74, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x64, 0x6f,
    0x6e, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x31, 0x3f, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x02, 0x04, 0x12, 0x04, 0x69, 0x02, 0x61, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x02, 0x06, 0x12, 0x03, 0x69, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x69, 0x1e, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03,
    0x69, 0x36, 0x37, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x6c, 0x00, 0x6e, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x6c, 0x08, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x00, 0x12, 0x03, 0x6d, 0x02, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x6d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x6d, 0x0b, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x6d,
    0x1e, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x6d, 0x32, 0x33,
    0x0a, 0x8c, 0x03, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x05, 0x7d, 0x00, 0x85, 0x01, 0x01, 0x1a, 0xfe,
    0x02, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x72,
    0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
    0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x0a, 0x0a, 0x20, 0x5b,
    0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x74,
    0x72, 0x69, 0x63, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x0a, 0x20, 0x2a, 0x20, 0x63, 0x70,
    0x75, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x0a, 0x20,
    0x2a, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x37, 0x35, 0x0a, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x61,
    0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79,
    0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,
    0x68, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x27, 0x73, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x0a,
    0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6d,
    0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x45,
    0x6e, 0x76, 0x6f, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x74, 0x79,
    0x70, 0x65, 0x2e, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x3a, 0x0a, 0x0a, 0x20, 0x5b, 0x6e, 0x61, 0x6d,
    0x65, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5d, 0x0a, 0x20, 0x2a, 0x20, 0x63, 0x70, 0x75, 0x5f,
    0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x31, 0x30, 0x2c, 0x20, 0x31, 0x37, 0x2e,
    0x35, 0x0a, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
    0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x35, 0x2c, 0x20, 0x33, 0x37, 0x35, 0x0a, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03, 0x7d, 0x08, 0x1f, 0x0a, 0x30, 0x0a, 0x04, 0x04,
    0x04, 0x02, 0x00, 0x12, 0x03, 0x7f, 0x02, 0x19, 0x1a, 0x23, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3b, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x04, 0x7f, 0x02, 0x7d, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x7f, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x7f, 0x09, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x7f, 0x17, 0x18, 0x0a, 0x47, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x01, 0x12, 0x04,
    0x81, 0x01, 0x02, 0x2f, 0x1a, 0x39, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x69, 0x6e, 0x69,
    0x73, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x05, 0x81, 0x01, 0x02, 0x7f, 0x19, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x05, 0x12, 0x04, 0x81, 0x01, 0x02, 0x08, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12, 0x04, 0x81, 0x01, 0x09, 0x2a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x04, 0x81, 0x01, 0x2d, 0x2e, 0x0a, 0x72, 0x0a, 0x04,
    0x04, 0x04, 0x02, 0x02, 0x12, 0x04, 0x84, 0x01, 0x02, 0x20, 0x1a, 0x64, 0x20, 0x53, 0x75, 0x6d,
    0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x73, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x6c,
    0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
    0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69,
    0x63, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
    0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x06, 0x84, 0x01, 0x02, 0x81, 0x01,
    0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12, 0x04, 0x84, 0x01, 0x02, 0x08,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x04, 0x84, 0x01, 0x09, 0x1b, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x04, 0x84, 0x01, 0x1e, 0x1f, 0x0a, 0xbd,
    0x01, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x06, 0x8a, 0x01, 0x00, 0xa5, 0x01, 0x01, 0x1a, 0xae, 0x01,
    0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73,
    0x20, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x47, 0x4c, 0x42, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x73, 0x6f, 0x20, 0x6f,
    0x66, 0x74, 0x65, 0x6e, 0x2e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
    0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
    0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
    0x61, 0x6c, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x75, 0x70,
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x7a, 0x6f,
    0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
    0x79, 0x20, 0x70, 0x65, 0x72, 0x20, 0x73, 0x75, 0x62, 0x7a, 0x6f, 0x6e, 0x65, 0x0a, 0x0a, 0x0b,
    0x0a, 0x03, 0x04, 0x05, 0x01, 0x12, 0x04, 0x8a, 0x01, 0x08, 0x1d, 0x0a, 0x96, 0x01, 0x0a, 0x04,
    0x04, 0x05, 0x02, 0x00, 0x12, 0x04, 0x8d, 0x01, 0x02, 0x16, 0x1a, 0x87, 0x01, 0x20, 0x4e, 0x61,
    0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x7a, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x67, 0x69,
    0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
    0x79, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x77, 0x61,
    0x73, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
    0x6d, 0x2e, 0x20, 0x5a, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x67, 0x69,
    0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
    0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x69, 0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
    0x77, 0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x06, 0x8d,
    0x01, 0x02, 0x8a, 0x01, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x04,
    0x8d, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x04, 0x8d,
    0x01, 0x09, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x04, 0x8d, 0x01,
    0x14, 0x15, 0x0a, 0x56, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x01, 0x12, 0x04, 0x90, 0x01, 0x02, 0x1c,
    0x1a, 0x48, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20,
    0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x45, 0x6e, 0x76,
    0x6f, 0x79, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73,
    0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x01, 0x04, 0x12, 0x06, 0x90, 0x01, 0x02, 0x8d, 0x01, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x01, 0x05, 0x12, 0x04, 0x90, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x01, 0x01, 0x12, 0x04, 0x90, 0x01, 0x09, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x01, 0x03, 0x12, 0x04, 0x90, 0x01, 0x1a, 0x1b, 0x0a, 0x37, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x02,
    0x12, 0x04, 0x92, 0x01, 0x02, 0x28, 0x1a, 0x29, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74,
    0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x66,
    0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
    0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x04, 0x12, 0x06, 0x92, 0x01, 0x02, 0x90,
    0x01, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x05, 0x12, 0x04, 0x92, 0x01, 0x02,
    0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x04, 0x92, 0x01, 0x09, 0x23,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x04, 0x92, 0x01, 0x26, 0x27, 0x0a,
    0x3d, 0x0a, 0x04, 0x04, 0x05, 0x04, 0x00, 0x12, 0x06, 0x94, 0x01, 0x02, 0x97, 0x01, 0x03, 0x1a,
    0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x04, 0x00, 0x01, 0x12, 0x04, 0x94, 0x01, 0x07, 0x13, 0x0a, 0x46, 0x0a,
    0x06, 0x04, 0x05, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0x95, 0x01, 0x04, 0x10, 0x22, 0x36, 0x20,
    0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68, 0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x46, 0x69, 0x6c,
    0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
    0x54, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x04, 0x95, 0x01, 0x04, 0x0b, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x02, 0x12, 0x04, 0x95, 0x01, 0x0e, 0x0f, 0x0a, 0xcc, 0x01, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x03,
    0x12, 0x04, 0x9b, 0x01, 0x02, 0x25, 0x1a, 0xbd, 0x01, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x28, 0x68,
    0x74, 0x75, 0x63, 0x68, 0x29, 0x3a, 0x20, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x77,
    0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x74, 0x63, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20,
    0x62, 0x65, 0x20, 0x54, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c,
    0x20, 0x62, 0x75, 0x74, 0x0a, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73,
    0x20, 0x6d, 0x61, 0x70, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x20,
    0x4d, 0x61, 0x79, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x61, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x54, 0x63, 0x70, 0x45, 0x72, 0x72, 0x6f,
    0x72, 0x54, 0x79, 0x70, 0x65, 0x20, 0x78, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x20, 0x70,
    0x61, 0x69, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x04, 0x12,
    0x06, 0x9b, 0x01, 0x02, 0x97, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x06,
    0x12, 0x04, 0x9b, 0x01, 0x02, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x01, 0x12,
    0x04, 0x9b, 0x01, 0x16, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x03, 0x12, 0x04,
    0x9b, 0x01, 0x23, 0x24, 0x0a, 0x27, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x04, 0x12, 0x04, 0x9d, 0x01,
    0x02, 0x26, 0x1a, 0x19, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x20, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x0a, 0x0a, 0x0f, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x04, 0x04, 0x12, 0x06, 0x9d, 0x01, 0x02, 0x9b, 0x01, 0x25, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x04, 0x06, 0x12, 0x04, 0x9d, 0x01, 0x02, 0x15, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x04, 0x01, 0x12, 0x04, 0x9d, 0x01, 0x16, 0x21, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x04, 0x03, 0x12, 0x04, 0x9d, 0x01, 0x24, 0x25, 0x0a, 0x27, 0x0a, 0x04, 0x04,
    0x05, 0x02, 0x05, 0x12, 0x04, 0x9f, 0x01, 0x02, 0x26, 0x1a, 0x19, 0x20, 0x47, 0x52, 0x43, 0x50,
    0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x05, 0x04, 0x12, 0x06, 0x9f,
    0x01, 0x02, 0x9d, 0x01, 0x26, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x05, 0x06, 0x12, 0x04,
    0x9f, 0x01, 0x02, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x05, 0x01, 0x12, 0x04, 0x9f,
    0x01, 0x16, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x05, 0x03, 0x12, 0x04, 0x9f, 0x01,
    0x24, 0x25, 0x0a, 0x45, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x06, 0x12, 0x04, 0xa1, 0x01, 0x02, 0x1e,
    0x1a, 0x37, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74,
    0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x06, 0x04, 0x12, 0x06, 0xa1, 0x01, 0x02, 0x9f, 0x01, 0x26, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x06, 0x05, 0x12, 0x04, 0xa1, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x06, 0x01, 0x12, 0x04, 0xa1, 0x01, 0x09, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x06,
    0x03, 0x12, 0x04, 0xa1, 0x01, 0x1c, 0x1d, 0x0a, 0x3b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x07, 0x12,
    0x04, 0xa4, 0x01, 0x02, 0x39, 0x1a, 0x2d, 0x20, 0x53, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
    0x6e, 0x61, 0x6c, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
    0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x07, 0x04, 0x12, 0x04, 0xa4,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x07, 0x06, 0x12, 0x04, 0xa4, 0x01,
    0x0b, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x07, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x23,
    0x34, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x07, 0x03, 0x12, 0x04, 0xa4, 0x01, 0x37, 0x38,
    0x0a, 0x21, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x06, 0xa8, 0x01, 0x00, 0xac, 0x01, 0x01, 0x1a, 0x13,
    0x20, 0x50, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61,
    0x74, 0x73, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x06, 0x01, 0x12, 0x04, 0xa8, 0x01, 0x08, 0x14,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x00, 0x12, 0x04, 0xa9, 0x01, 0x02, 0x1a, 0x0a, 0x0f,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12, 0x06, 0xa9, 0x01, 0x02, 0xa8, 0x01, 0x16, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x05, 0x12, 0x04, 0xa9, 0x01, 0x02, 0x08, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x04, 0xa9, 0x01, 0x09, 0x15, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x04, 0xa9, 0x01, 0x18, 0x19, 0x0a, 0x22, 0x0a, 0x04,
    0x04, 0x06, 0x02, 0x01, 0x12, 0x04, 0xab, 0x01, 0x02, 0x3d, 0x1a, 0x14, 0x20, 0x4e, 0x65, 0x65,
    0x64, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x04, 0x12, 0x04, 0xab, 0x01, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x06, 0x12, 0x04, 0xab, 0x01, 0x0b, 0x20, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x01, 0x12, 0x04, 0xab, 0x01, 0x21, 0x38, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12, 0x04, 0xab, 0x01, 0x3b, 0x3c, 0x0a, 0x0c, 0x0a, 0x02,
    0x04, 0x07, 0x12, 0x06, 0xae, 0x01, 0x00, 0xb1, 0x01, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x07,
    0x01, 0x12, 0x04, 0xae, 0x01, 0x08, 0x1a, 0x0a, 0x31, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x00, 0x12,
    0x04, 0xaf, 0x01, 0x02, 0x10, 0x22, 0x23, 0x20, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x72, 0x65, 0x67,
    0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x45,
    0x6e, 0x76, 0x6f, 0x79, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x00, 0x04, 0x12, 0x06, 0xaf, 0x01, 0x02, 0xae, 0x01, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x00, 0x06, 0x12, 0x04, 0xaf, 0x01, 0x02, 0x06, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x00, 0x01, 0x12, 0x04, 0xaf, 0x01, 0x07, 0x0b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02,
    0x00, 0x03, 0x12, 0x04, 0xaf, 0x01, 0x0e, 0x0f, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x01,
    0x12, 0x04, 0xb0, 0x01, 0x02, 0x2a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12,
    0x04, 0xb0, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x06, 0x12, 0x04,
    0xb0, 0x01, 0x0b, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x01, 0x12, 0x04, 0xb0,
    0x01, 0x18, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x03, 0x12, 0x04, 0xb0, 0x01,
    0x28, 0x29, 0x0a, 0xeb, 0x03, 0x0a, 0x02, 0x04, 0x08, 0x12, 0x06, 0xbb, 0x01, 0x00, 0xcb, 0x01,
    0x01, 0x1a, 0xdc, 0x03, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20,
    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x52, 0x44, 0x53, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61,
    0x70, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x63, 0x6c,
    0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
    0x20, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x0a, 0x20, 0x63,
    0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x65,
    0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x44, 0x53, 0x20, 0x57, 0x65, 0x69, 0x67, 0x68,
    0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x20, 0x57, 0x69,
    0x74, 0x68, 0x20, 0x45, 0x44, 0x53, 0x2c, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x63, 0x6c, 0x75,
    0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x66, 0x72,
    0x6f, 0x6d, 0x20, 0x61, 0x20, 0x4c, 0x42, 0x20, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74,
    0x69, 0x76, 0x65, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x4c, 0x42, 0x20, 0x74, 0x61,
    0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
    0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65,
    0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74,
    0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6e, 0x65,
    0x72, 0x0a, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x62,
    0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73,
    0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
    0x74, 0x79, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
    0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x65, 0x66,
    0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,
    0x66, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20,
    0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77,
    0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
    0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,
    0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x0a,
    0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x08, 0x01, 0x12, 0x04, 0xbb, 0x01, 0x08, 0x1a, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x08, 0x02, 0x00, 0x12, 0x04, 0xbc, 0x01, 0x02, 0x1a, 0x0a, 0x0f, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x00, 0x04, 0x12, 0x06, 0xbc, 0x01, 0x02, 0xbb, 0x01, 0x1c, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x08, 0x02, 0x00, 0x05, 0x12, 0x04, 0xbc, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x00, 0x01, 0x12, 0x04, 0xbc, 0x01, 0x09, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x00, 0x03, 0x12, 0x04, 0xbc, 0x01, 0x18, 0x19, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x08, 0x02,
    0x01, 0x12, 0x04, 0xbd, 0x01, 0x02, 0x2d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x04,
    0x12, 0x04, 0xbd, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x06, 0x12,
    0x04, 0xbd, 0x01, 0x0b, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x01, 0x12, 0x04,
    0xbd, 0x01, 0x1f, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x03, 0x12, 0x04, 0xbd,
    0x01, 0x2b, 0x2c, 0x0a, 0xcf, 0x01, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x02, 0x12, 0x04, 0xc1, 0x01,
    0x02, 0x36, 0x1a, 0xc0, 0x01, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x73,
    0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x6e, 0x64, 0x70,
    0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x7a,
    0x6f, 0x6e, 0x65, 0x20, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
    0x61, 0x62, 0x6c, 0x65, 0x2f, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2c, 0x20,
    0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x6f,
    0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61,
    0x73, 0x65, 0x0a, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x70,
    0x68, 0x69, 0x63, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65,
    0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67,
    0x68, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x04, 0x12, 0x04,
    0xc1, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x06, 0x12, 0x04, 0xc1,
    0x01, 0x0b, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x01, 0x12, 0x04, 0xc1, 0x01,
    0x1f, 0x31, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x03, 0x12, 0x04, 0xc1, 0x01, 0x34,
    0x35, 0x0a, 0x0e, 0x0a, 0x04, 0x04, 0x08, 0x03, 0x00, 0x12, 0x06, 0xc2, 0x01, 0x02, 0xc9, 0x01,
    0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x03, 0x00, 0x01, 0x12, 0x04, 0xc2, 0x01, 0x0a, 0x10,
    0x0a, 0xd4, 0x02, 0x0a, 0x06, 0x04, 0x08, 0x03, 0x00, 0x02, 0x00, 0x12, 0x04, 0xc8, 0x01, 0x04,
    0x1d, 0x1a, 0xc3, 0x02, 0x20, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x28, 0x30, 0x2d, 0x31, 0x30,
    0x30, 0x29, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
    0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x0a,
    0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x70,
    0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x70, 0x73,
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75,
    0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
    0x6f, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
    0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x61, 0x62,
    0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x61,
    0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x66,
    0x66, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x2e, 0x0a, 0x20,
    0x5b, 0x56, 0x32, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x44, 0x49, 0x46, 0x46, 0x5d, 0x20, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20,
    0x69, 0x6e, 0x20, 0x76, 0x31, 0x2e, 0x0a, 0x0a, 0x11, 0x0a, 0x07, 0x04, 0x08, 0x03, 0x00, 0x02,
    0x00, 0x04, 0x12, 0x06, 0xc8, 0x01, 0x04, 0xc2, 0x01, 0x12, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08,
    0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x04, 0xc8, 0x01, 0x04, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x08, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0xc8, 0x01, 0x0b, 0x18, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x08, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x04, 0xc8, 0x01, 0x1b, 0x1c, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x08, 0x02, 0x03, 0x12, 0x04, 0xca, 0x01, 0x02, 0x14, 0x0a, 0x0f, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x03, 0x04, 0x12, 0x06, 0xca, 0x01, 0x02, 0xc9, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x08, 0x02, 0x03, 0x06, 0x12, 0x04, 0xca, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x03, 0x01, 0x12, 0x04, 0xca, 0x01, 0x09, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x03, 0x03, 0x12, 0x04, 0xca, 0x01, 0x12, 0x13, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x09, 0x12,
    0x06, 0xcd, 0x01, 0x00, 0xd1, 0x01, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x09, 0x01, 0x12, 0x04,
    0xcd, 0x01, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x00, 0x12, 0x04, 0xce, 0x01,
    0x02, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x04, 0x12, 0x04, 0xce, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x06, 0x12, 0x04, 0xce, 0x01, 0x0b, 0x1d,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x01, 0x12, 0x04, 0xce, 0x01, 0x1e, 0x26, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x03, 0x12, 0x04, 0xce, 0x01, 0x29, 0x2a, 0x0a, 0x2a,
    0x0a, 0x04, 0x04, 0x09, 0x02, 0x01, 0x12, 0x04, 0xd0, 0x01, 0x02, 0x37, 0x1a, 0x1c, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x31, 0x30,
    0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x01, 0x04, 0x12, 0x06, 0xd0, 0x01, 0x02, 0xce, 0x01, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x01, 0x06, 0x12, 0x04, 0xd0, 0x01, 0x02, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x01, 0x01, 0x12, 0x04, 0xd0, 0x01, 0x1b, 0x32, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02,
    0x01, 0x03, 0x12, 0x04, 0xd0, 0x01, 0x35, 0x36, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
